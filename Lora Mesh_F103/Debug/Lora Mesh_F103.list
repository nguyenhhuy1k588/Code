
Lora Mesh_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006124  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08006234  08006234  00016234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006474  08006474  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006474  08006474  00016474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800647c  0800647c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800647c  0800647c  0001647c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006480  08006480  00016480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006484  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022b8  20000070  080064f4  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002328  080064f4  00022328  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b943  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000271d  00000000  00000000  0002b9dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  0002e100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac0  00000000  00000000  0002ece8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197c6  00000000  00000000  0002f7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e432  00000000  00000000  00048f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086cbd  00000000  00000000  000573a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de05d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a84  00000000  00000000  000de0b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800621c 	.word	0x0800621c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800621c 	.word	0x0800621c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_uldivmod>:
 8000160:	b953      	cbnz	r3, 8000178 <__aeabi_uldivmod+0x18>
 8000162:	b94a      	cbnz	r2, 8000178 <__aeabi_uldivmod+0x18>
 8000164:	2900      	cmp	r1, #0
 8000166:	bf08      	it	eq
 8000168:	2800      	cmpeq	r0, #0
 800016a:	bf1c      	itt	ne
 800016c:	f04f 31ff 	movne.w	r1, #4294967295
 8000170:	f04f 30ff 	movne.w	r0, #4294967295
 8000174:	f000 b976 	b.w	8000464 <__aeabi_idiv0>
 8000178:	f1ad 0c08 	sub.w	ip, sp, #8
 800017c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000180:	f000 f806 	bl	8000190 <__udivmoddi4>
 8000184:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000188:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800018c:	b004      	add	sp, #16
 800018e:	4770      	bx	lr

08000190 <__udivmoddi4>:
 8000190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000194:	9e08      	ldr	r6, [sp, #32]
 8000196:	460d      	mov	r5, r1
 8000198:	4604      	mov	r4, r0
 800019a:	4688      	mov	r8, r1
 800019c:	2b00      	cmp	r3, #0
 800019e:	d14d      	bne.n	800023c <__udivmoddi4+0xac>
 80001a0:	428a      	cmp	r2, r1
 80001a2:	4694      	mov	ip, r2
 80001a4:	d968      	bls.n	8000278 <__udivmoddi4+0xe8>
 80001a6:	fab2 f282 	clz	r2, r2
 80001aa:	b152      	cbz	r2, 80001c2 <__udivmoddi4+0x32>
 80001ac:	fa01 f302 	lsl.w	r3, r1, r2
 80001b0:	f1c2 0120 	rsb	r1, r2, #32
 80001b4:	fa20 f101 	lsr.w	r1, r0, r1
 80001b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001bc:	ea41 0803 	orr.w	r8, r1, r3
 80001c0:	4094      	lsls	r4, r2
 80001c2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001c6:	fbb8 f7f1 	udiv	r7, r8, r1
 80001ca:	fa1f fe8c 	uxth.w	lr, ip
 80001ce:	fb01 8817 	mls	r8, r1, r7, r8
 80001d2:	fb07 f00e 	mul.w	r0, r7, lr
 80001d6:	0c23      	lsrs	r3, r4, #16
 80001d8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001dc:	4298      	cmp	r0, r3
 80001de:	d90a      	bls.n	80001f6 <__udivmoddi4+0x66>
 80001e0:	eb1c 0303 	adds.w	r3, ip, r3
 80001e4:	f107 35ff 	add.w	r5, r7, #4294967295
 80001e8:	f080 811e 	bcs.w	8000428 <__udivmoddi4+0x298>
 80001ec:	4298      	cmp	r0, r3
 80001ee:	f240 811b 	bls.w	8000428 <__udivmoddi4+0x298>
 80001f2:	3f02      	subs	r7, #2
 80001f4:	4463      	add	r3, ip
 80001f6:	1a1b      	subs	r3, r3, r0
 80001f8:	fbb3 f0f1 	udiv	r0, r3, r1
 80001fc:	fb01 3310 	mls	r3, r1, r0, r3
 8000200:	fb00 fe0e 	mul.w	lr, r0, lr
 8000204:	b2a4      	uxth	r4, r4
 8000206:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800020a:	45a6      	cmp	lr, r4
 800020c:	d90a      	bls.n	8000224 <__udivmoddi4+0x94>
 800020e:	eb1c 0404 	adds.w	r4, ip, r4
 8000212:	f100 33ff 	add.w	r3, r0, #4294967295
 8000216:	f080 8109 	bcs.w	800042c <__udivmoddi4+0x29c>
 800021a:	45a6      	cmp	lr, r4
 800021c:	f240 8106 	bls.w	800042c <__udivmoddi4+0x29c>
 8000220:	4464      	add	r4, ip
 8000222:	3802      	subs	r0, #2
 8000224:	2100      	movs	r1, #0
 8000226:	eba4 040e 	sub.w	r4, r4, lr
 800022a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800022e:	b11e      	cbz	r6, 8000238 <__udivmoddi4+0xa8>
 8000230:	2300      	movs	r3, #0
 8000232:	40d4      	lsrs	r4, r2
 8000234:	e9c6 4300 	strd	r4, r3, [r6]
 8000238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800023c:	428b      	cmp	r3, r1
 800023e:	d908      	bls.n	8000252 <__udivmoddi4+0xc2>
 8000240:	2e00      	cmp	r6, #0
 8000242:	f000 80ee 	beq.w	8000422 <__udivmoddi4+0x292>
 8000246:	2100      	movs	r1, #0
 8000248:	e9c6 0500 	strd	r0, r5, [r6]
 800024c:	4608      	mov	r0, r1
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	fab3 f183 	clz	r1, r3
 8000256:	2900      	cmp	r1, #0
 8000258:	d14a      	bne.n	80002f0 <__udivmoddi4+0x160>
 800025a:	42ab      	cmp	r3, r5
 800025c:	d302      	bcc.n	8000264 <__udivmoddi4+0xd4>
 800025e:	4282      	cmp	r2, r0
 8000260:	f200 80fc 	bhi.w	800045c <__udivmoddi4+0x2cc>
 8000264:	1a84      	subs	r4, r0, r2
 8000266:	eb65 0303 	sbc.w	r3, r5, r3
 800026a:	2001      	movs	r0, #1
 800026c:	4698      	mov	r8, r3
 800026e:	2e00      	cmp	r6, #0
 8000270:	d0e2      	beq.n	8000238 <__udivmoddi4+0xa8>
 8000272:	e9c6 4800 	strd	r4, r8, [r6]
 8000276:	e7df      	b.n	8000238 <__udivmoddi4+0xa8>
 8000278:	b902      	cbnz	r2, 800027c <__udivmoddi4+0xec>
 800027a:	deff      	udf	#255	; 0xff
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	2a00      	cmp	r2, #0
 8000282:	f040 8091 	bne.w	80003a8 <__udivmoddi4+0x218>
 8000286:	eba1 000c 	sub.w	r0, r1, ip
 800028a:	2101      	movs	r1, #1
 800028c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000290:	fa1f fe8c 	uxth.w	lr, ip
 8000294:	fbb0 f3f7 	udiv	r3, r0, r7
 8000298:	fb07 0013 	mls	r0, r7, r3, r0
 800029c:	0c25      	lsrs	r5, r4, #16
 800029e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002a2:	fb0e f003 	mul.w	r0, lr, r3
 80002a6:	42a8      	cmp	r0, r5
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0x12c>
 80002aa:	eb1c 0505 	adds.w	r5, ip, r5
 80002ae:	f103 38ff 	add.w	r8, r3, #4294967295
 80002b2:	d202      	bcs.n	80002ba <__udivmoddi4+0x12a>
 80002b4:	42a8      	cmp	r0, r5
 80002b6:	f200 80ce 	bhi.w	8000456 <__udivmoddi4+0x2c6>
 80002ba:	4643      	mov	r3, r8
 80002bc:	1a2d      	subs	r5, r5, r0
 80002be:	fbb5 f0f7 	udiv	r0, r5, r7
 80002c2:	fb07 5510 	mls	r5, r7, r0, r5
 80002c6:	fb0e fe00 	mul.w	lr, lr, r0
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002d0:	45a6      	cmp	lr, r4
 80002d2:	d908      	bls.n	80002e6 <__udivmoddi4+0x156>
 80002d4:	eb1c 0404 	adds.w	r4, ip, r4
 80002d8:	f100 35ff 	add.w	r5, r0, #4294967295
 80002dc:	d202      	bcs.n	80002e4 <__udivmoddi4+0x154>
 80002de:	45a6      	cmp	lr, r4
 80002e0:	f200 80b6 	bhi.w	8000450 <__udivmoddi4+0x2c0>
 80002e4:	4628      	mov	r0, r5
 80002e6:	eba4 040e 	sub.w	r4, r4, lr
 80002ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80002ee:	e79e      	b.n	800022e <__udivmoddi4+0x9e>
 80002f0:	f1c1 0720 	rsb	r7, r1, #32
 80002f4:	408b      	lsls	r3, r1
 80002f6:	fa22 fc07 	lsr.w	ip, r2, r7
 80002fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80002fe:	fa25 fa07 	lsr.w	sl, r5, r7
 8000302:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000306:	fbba f8f9 	udiv	r8, sl, r9
 800030a:	fa20 f307 	lsr.w	r3, r0, r7
 800030e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000312:	408d      	lsls	r5, r1
 8000314:	fa1f fe8c 	uxth.w	lr, ip
 8000318:	431d      	orrs	r5, r3
 800031a:	fa00 f301 	lsl.w	r3, r0, r1
 800031e:	fb08 f00e 	mul.w	r0, r8, lr
 8000322:	0c2c      	lsrs	r4, r5, #16
 8000324:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000328:	42a0      	cmp	r0, r4
 800032a:	fa02 f201 	lsl.w	r2, r2, r1
 800032e:	d90b      	bls.n	8000348 <__udivmoddi4+0x1b8>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f108 3aff 	add.w	sl, r8, #4294967295
 8000338:	f080 8088 	bcs.w	800044c <__udivmoddi4+0x2bc>
 800033c:	42a0      	cmp	r0, r4
 800033e:	f240 8085 	bls.w	800044c <__udivmoddi4+0x2bc>
 8000342:	f1a8 0802 	sub.w	r8, r8, #2
 8000346:	4464      	add	r4, ip
 8000348:	1a24      	subs	r4, r4, r0
 800034a:	fbb4 f0f9 	udiv	r0, r4, r9
 800034e:	fb09 4410 	mls	r4, r9, r0, r4
 8000352:	fb00 fe0e 	mul.w	lr, r0, lr
 8000356:	b2ad      	uxth	r5, r5
 8000358:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x1e2>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 35ff 	add.w	r5, r0, #4294967295
 8000368:	d26c      	bcs.n	8000444 <__udivmoddi4+0x2b4>
 800036a:	45a6      	cmp	lr, r4
 800036c:	d96a      	bls.n	8000444 <__udivmoddi4+0x2b4>
 800036e:	3802      	subs	r0, #2
 8000370:	4464      	add	r4, ip
 8000372:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000376:	fba0 9502 	umull	r9, r5, r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	42ac      	cmp	r4, r5
 8000380:	46c8      	mov	r8, r9
 8000382:	46ae      	mov	lr, r5
 8000384:	d356      	bcc.n	8000434 <__udivmoddi4+0x2a4>
 8000386:	d053      	beq.n	8000430 <__udivmoddi4+0x2a0>
 8000388:	2e00      	cmp	r6, #0
 800038a:	d069      	beq.n	8000460 <__udivmoddi4+0x2d0>
 800038c:	ebb3 0208 	subs.w	r2, r3, r8
 8000390:	eb64 040e 	sbc.w	r4, r4, lr
 8000394:	fa22 f301 	lsr.w	r3, r2, r1
 8000398:	fa04 f707 	lsl.w	r7, r4, r7
 800039c:	431f      	orrs	r7, r3
 800039e:	40cc      	lsrs	r4, r1
 80003a0:	e9c6 7400 	strd	r7, r4, [r6]
 80003a4:	2100      	movs	r1, #0
 80003a6:	e747      	b.n	8000238 <__udivmoddi4+0xa8>
 80003a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ac:	f1c2 0120 	rsb	r1, r2, #32
 80003b0:	fa25 f301 	lsr.w	r3, r5, r1
 80003b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b8:	fa20 f101 	lsr.w	r1, r0, r1
 80003bc:	4095      	lsls	r5, r2
 80003be:	430d      	orrs	r5, r1
 80003c0:	fbb3 f1f7 	udiv	r1, r3, r7
 80003c4:	fb07 3311 	mls	r3, r7, r1, r3
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	0c28      	lsrs	r0, r5, #16
 80003ce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d2:	fb01 f30e 	mul.w	r3, r1, lr
 80003d6:	4283      	cmp	r3, r0
 80003d8:	fa04 f402 	lsl.w	r4, r4, r2
 80003dc:	d908      	bls.n	80003f0 <__udivmoddi4+0x260>
 80003de:	eb1c 0000 	adds.w	r0, ip, r0
 80003e2:	f101 38ff 	add.w	r8, r1, #4294967295
 80003e6:	d22f      	bcs.n	8000448 <__udivmoddi4+0x2b8>
 80003e8:	4283      	cmp	r3, r0
 80003ea:	d92d      	bls.n	8000448 <__udivmoddi4+0x2b8>
 80003ec:	3902      	subs	r1, #2
 80003ee:	4460      	add	r0, ip
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	fbb0 f3f7 	udiv	r3, r0, r7
 80003f6:	fb07 0013 	mls	r0, r7, r3, r0
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000400:	fb03 f00e 	mul.w	r0, r3, lr
 8000404:	42a8      	cmp	r0, r5
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x28a>
 8000408:	eb1c 0505 	adds.w	r5, ip, r5
 800040c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000410:	d216      	bcs.n	8000440 <__udivmoddi4+0x2b0>
 8000412:	42a8      	cmp	r0, r5
 8000414:	d914      	bls.n	8000440 <__udivmoddi4+0x2b0>
 8000416:	3b02      	subs	r3, #2
 8000418:	4465      	add	r5, ip
 800041a:	1a28      	subs	r0, r5, r0
 800041c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000420:	e738      	b.n	8000294 <__udivmoddi4+0x104>
 8000422:	4631      	mov	r1, r6
 8000424:	4630      	mov	r0, r6
 8000426:	e707      	b.n	8000238 <__udivmoddi4+0xa8>
 8000428:	462f      	mov	r7, r5
 800042a:	e6e4      	b.n	80001f6 <__udivmoddi4+0x66>
 800042c:	4618      	mov	r0, r3
 800042e:	e6f9      	b.n	8000224 <__udivmoddi4+0x94>
 8000430:	454b      	cmp	r3, r9
 8000432:	d2a9      	bcs.n	8000388 <__udivmoddi4+0x1f8>
 8000434:	ebb9 0802 	subs.w	r8, r9, r2
 8000438:	eb65 0e0c 	sbc.w	lr, r5, ip
 800043c:	3801      	subs	r0, #1
 800043e:	e7a3      	b.n	8000388 <__udivmoddi4+0x1f8>
 8000440:	4643      	mov	r3, r8
 8000442:	e7ea      	b.n	800041a <__udivmoddi4+0x28a>
 8000444:	4628      	mov	r0, r5
 8000446:	e794      	b.n	8000372 <__udivmoddi4+0x1e2>
 8000448:	4641      	mov	r1, r8
 800044a:	e7d1      	b.n	80003f0 <__udivmoddi4+0x260>
 800044c:	46d0      	mov	r8, sl
 800044e:	e77b      	b.n	8000348 <__udivmoddi4+0x1b8>
 8000450:	4464      	add	r4, ip
 8000452:	3802      	subs	r0, #2
 8000454:	e747      	b.n	80002e6 <__udivmoddi4+0x156>
 8000456:	3b02      	subs	r3, #2
 8000458:	4465      	add	r5, ip
 800045a:	e72f      	b.n	80002bc <__udivmoddi4+0x12c>
 800045c:	4608      	mov	r0, r1
 800045e:	e706      	b.n	800026e <__udivmoddi4+0xde>
 8000460:	4631      	mov	r1, r6
 8000462:	e6e9      	b.n	8000238 <__udivmoddi4+0xa8>

08000464 <__aeabi_idiv0>:
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <Push_Command_To_Ring_Buffer>:
SENSOR_state_t SENSOR_state = Idle;
VALVE_state_t VALVE_state = OPEN;
VALVE_state_t VALVE_prestate = OPEN;
//extern uint8_t flag_control = 0;
void Push_Command_To_Ring_Buffer(uint8_t final_des_id, uint8_t temp_des_id, uint8_t time_to_live, uint8_t is_requiring_reply, uint8_t length, uint8_t buffer[])
{
 8000468:	b5b0      	push	{r4, r5, r7, lr}
 800046a:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 800046e:	af40      	add	r7, sp, #256	; 0x100
 8000470:	4605      	mov	r5, r0
 8000472:	460c      	mov	r4, r1
 8000474:	4610      	mov	r0, r2
 8000476:	4619      	mov	r1, r3
 8000478:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800047c:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000480:	462a      	mov	r2, r5
 8000482:	701a      	strb	r2, [r3, #0]
 8000484:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000488:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 800048c:	4622      	mov	r2, r4
 800048e:	701a      	strb	r2, [r3, #0]
 8000490:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000494:	f2a3 1313 	subw	r3, r3, #275	; 0x113
 8000498:	4602      	mov	r2, r0
 800049a:	701a      	strb	r2, [r3, #0]
 800049c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80004a0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80004a4:	460a      	mov	r2, r1
 80004a6:	701a      	strb	r2, [r3, #0]
	PACKET_STRUCTURE temp_data = {final_des_id, temp_des_id, FS_Data.my_id, time_to_live, length};
 80004a8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80004ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80004b0:	4618      	mov	r0, r3
 80004b2:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80004b6:	461a      	mov	r2, r3
 80004b8:	2100      	movs	r1, #0
 80004ba:	f004 fc57 	bl	8004d6c <memset>
 80004be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80004c2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80004c6:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80004ca:	f2a2 1211 	subw	r2, r2, #273	; 0x111
 80004ce:	7812      	ldrb	r2, [r2, #0]
 80004d0:	701a      	strb	r2, [r3, #0]
 80004d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80004d6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80004da:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80004de:	f5a2 7289 	sub.w	r2, r2, #274	; 0x112
 80004e2:	7812      	ldrb	r2, [r2, #0]
 80004e4:	705a      	strb	r2, [r3, #1]
 80004e6:	4b2c      	ldr	r3, [pc, #176]	; (8000598 <Push_Command_To_Ring_Buffer+0x130>)
 80004e8:	781a      	ldrb	r2, [r3, #0]
 80004ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80004ee:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80004f2:	709a      	strb	r2, [r3, #2]
 80004f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80004f8:	f2a3 1313 	subw	r3, r3, #275	; 0x113
 80004fc:	f993 2000 	ldrsb.w	r2, [r3]
 8000500:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000504:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000508:	70da      	strb	r2, [r3, #3]
 800050a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800050e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000512:	f897 2128 	ldrb.w	r2, [r7, #296]	; 0x128
 8000516:	711a      	strb	r2, [r3, #4]
	for(int i = 0; i < length; i++)
 8000518:	2300      	movs	r3, #0
 800051a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800051e:	e014      	b.n	800054a <Push_Command_To_Ring_Buffer+0xe2>
	{
		temp_data.buffer[i] = buffer[i];
 8000520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000524:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000528:	4413      	add	r3, r2
 800052a:	7819      	ldrb	r1, [r3, #0]
 800052c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000530:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8000534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000538:	4413      	add	r3, r2
 800053a:	3305      	adds	r3, #5
 800053c:	460a      	mov	r2, r1
 800053e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < length; i++)
 8000540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000544:	3301      	adds	r3, #1
 8000546:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800054a:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 800054e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000552:	429a      	cmp	r2, r3
 8000554:	dbe4      	blt.n	8000520 <Push_Command_To_Ring_Buffer+0xb8>
	}
	temp_data.is_requiring_reply = is_requiring_reply;
 8000556:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800055a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800055e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000562:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8000566:	7812      	ldrb	r2, [r2, #0]
 8000568:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	RING_BUFFER_Push(&ring_buffer, temp_data);
 800056c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000570:	f5a3 7488 	sub.w	r4, r3, #272	; 0x110
 8000574:	4668      	mov	r0, sp
 8000576:	f104 030c 	add.w	r3, r4, #12
 800057a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800057e:	4619      	mov	r1, r3
 8000580:	f004 fbe6 	bl	8004d50 <memcpy>
 8000584:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000588:	4804      	ldr	r0, [pc, #16]	; (800059c <Push_Command_To_Ring_Buffer+0x134>)
 800058a:	f004 fb37 	bl	8004bfc <RING_BUFFER_Push>
}
 800058e:	bf00      	nop
 8000590:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000594:	46bd      	mov	sp, r7
 8000596:	bdb0      	pop	{r4, r5, r7, pc}
 8000598:	20001668 	.word	0x20001668
 800059c:	20000be4 	.word	0x20000be4

080005a0 <Command_Sending_Handle>:

void Command_Sending_Handle()
{
 80005a0:	b5b0      	push	{r4, r5, r7, lr}
 80005a2:	b0c6      	sub	sp, #280	; 0x118
 80005a4:	af02      	add	r7, sp, #8
	if(RING_BUFFER_Available(&ring_buffer) && FRAME_SYNC_Is_Ready_Transmit())
 80005a6:	481d      	ldr	r0, [pc, #116]	; (800061c <Command_Sending_Handle+0x7c>)
 80005a8:	f004 fb94 	bl	8004cd4 <RING_BUFFER_Available>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d02e      	beq.n	8000610 <Command_Sending_Handle+0x70>
 80005b2:	f003 fe27 	bl	8004204 <FRAME_SYNC_Is_Ready_Transmit>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d029      	beq.n	8000610 <Command_Sending_Handle+0x70>
	{
		PACKET_STRUCTURE temp_data;
		RING_BUFFER_Pop(&ring_buffer, &temp_data);
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	4619      	mov	r1, r3
 80005c0:	4816      	ldr	r0, [pc, #88]	; (800061c <Command_Sending_Handle+0x7c>)
 80005c2:	f004 fb54 	bl	8004c6e <RING_BUFFER_Pop>
		FRAME_SYNC_Send_Frame(temp_data.final_des_id, temp_data.temp_des_id, temp_data.time_to_live, temp_data.buffer, temp_data.length, temp_data.is_requiring_reply);
 80005c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80005ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80005ce:	7818      	ldrb	r0, [r3, #0]
 80005d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80005d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80005d8:	785c      	ldrb	r4, [r3, #1]
 80005da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80005de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80005e2:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80005e6:	b2dd      	uxtb	r5, r3
 80005e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80005ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80005f0:	791b      	ldrb	r3, [r3, #4]
 80005f2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80005f6:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80005fa:	f892 2108 	ldrb.w	r2, [r2, #264]	; 0x108
 80005fe:	1d39      	adds	r1, r7, #4
 8000600:	3105      	adds	r1, #5
 8000602:	9201      	str	r2, [sp, #4]
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	460b      	mov	r3, r1
 8000608:	462a      	mov	r2, r5
 800060a:	4621      	mov	r1, r4
 800060c:	f003 faee 	bl	8003bec <FRAME_SYNC_Send_Frame>
	}
}
 8000610:	bf00      	nop
 8000612:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000616:	46bd      	mov	sp, r7
 8000618:	bdb0      	pop	{r4, r5, r7, pc}
 800061a:	bf00      	nop
 800061c:	20000be4 	.word	0x20000be4

08000620 <FRAME_SYNC_RxCpltCallback>:

void FRAME_SYNC_RxCpltCallback(PACKET_STRUCTURE rx_packet)
{
 8000620:	b084      	sub	sp, #16
 8000622:	b590      	push	{r4, r7, lr}
 8000624:	b09d      	sub	sp, #116	; 0x74
 8000626:	af00      	add	r7, sp, #0
 8000628:	f107 0480 	add.w	r4, r7, #128	; 0x80
 800062c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		Push_Command_To_Ring_Buffer(0, FS_Data.my_id - 1, 7, 0, sizeof(temp_cmd), temp_cmd);
		VALVE_Close();
	}
#endif

	char tx_str[100] = {};
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2260      	movs	r2, #96	; 0x60
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f004 fb95 	bl	8004d6c <memset>
	sprintf(tx_str, "\nSource ID: %02X\nData: ", rx_packet.src_id);
 8000642:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8000646:	461a      	mov	r2, r3
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	4924      	ldr	r1, [pc, #144]	; (80006e0 <FRAME_SYNC_RxCpltCallback+0xc0>)
 800064e:	4618      	mov	r0, r3
 8000650:	f004 fb94 	bl	8004d7c <siprintf>
	for(int i = 0; i < rx_packet.length; i++)
 8000654:	2300      	movs	r3, #0
 8000656:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000658:	e014      	b.n	8000684 <FRAME_SYNC_RxCpltCallback+0x64>
	{
		char temp_str[4];
		sprintf(temp_str, "%02X ", rx_packet.buffer[i]);
 800065a:	f107 0285 	add.w	r2, r7, #133	; 0x85
 800065e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000660:	4413      	add	r3, r2
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	491e      	ldr	r1, [pc, #120]	; (80006e4 <FRAME_SYNC_RxCpltCallback+0xc4>)
 800066a:	4618      	mov	r0, r3
 800066c:	f004 fb86 	bl	8004d7c <siprintf>
		strcat(tx_str, temp_str);
 8000670:	1d3a      	adds	r2, r7, #4
 8000672:	f107 0308 	add.w	r3, r7, #8
 8000676:	4611      	mov	r1, r2
 8000678:	4618      	mov	r0, r3
 800067a:	f004 fb9f 	bl	8004dbc <strcat>
	for(int i = 0; i < rx_packet.length; i++)
 800067e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000680:	3301      	adds	r3, #1
 8000682:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000684:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8000688:	461a      	mov	r2, r3
 800068a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800068c:	4293      	cmp	r3, r2
 800068e:	dbe4      	blt.n	800065a <FRAME_SYNC_RxCpltCallback+0x3a>
	}
	strcat(tx_str, "\nCRC Correct\n");
 8000690:	f107 0308 	add.w	r3, r7, #8
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff fd5b 	bl	8000150 <strlen>
 800069a:	4603      	mov	r3, r0
 800069c:	461a      	mov	r2, r3
 800069e:	f107 0308 	add.w	r3, r7, #8
 80006a2:	4413      	add	r3, r2
 80006a4:	4a10      	ldr	r2, [pc, #64]	; (80006e8 <FRAME_SYNC_RxCpltCallback+0xc8>)
 80006a6:	461c      	mov	r4, r3
 80006a8:	4613      	mov	r3, r2
 80006aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80006ac:	6020      	str	r0, [r4, #0]
 80006ae:	6061      	str	r1, [r4, #4]
 80006b0:	60a2      	str	r2, [r4, #8]
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	81a3      	strh	r3, [r4, #12]
	HAL_UART_Transmit(&huart1, (uint8_t *)tx_str, strlen(tx_str), 1000);
 80006b6:	f107 0308 	add.w	r3, r7, #8
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fd48 	bl	8000150 <strlen>
 80006c0:	4603      	mov	r3, r0
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	f107 0108 	add.w	r1, r7, #8
 80006c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006cc:	4807      	ldr	r0, [pc, #28]	; (80006ec <FRAME_SYNC_RxCpltCallback+0xcc>)
 80006ce:	f002 f9c2 	bl	8002a56 <HAL_UART_Transmit>

}
 80006d2:	bf00      	nop
 80006d4:	3774      	adds	r7, #116	; 0x74
 80006d6:	46bd      	mov	sp, r7
 80006d8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80006dc:	b004      	add	sp, #16
 80006de:	4770      	bx	lr
 80006e0:	08006234 	.word	0x08006234
 80006e4:	0800624c 	.word	0x0800624c
 80006e8:	08006254 	.word	0x08006254
 80006ec:	200000e4 	.word	0x200000e4

080006f0 <FRAME_SYNC_RxFailCallback>:

void FRAME_SYNC_RxFailCallback(uint8_t *p_rx_data, uint8_t data_size)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b09c      	sub	sp, #112	; 0x70
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	460b      	mov	r3, r1
 80006fa:	70fb      	strb	r3, [r7, #3]
	char tx_str[100] = "\nCRC Fail\n";
 80006fc:	4a10      	ldr	r2, [pc, #64]	; (8000740 <FRAME_SYNC_RxFailCallback+0x50>)
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	ca07      	ldmia	r2, {r0, r1, r2}
 8000704:	c303      	stmia	r3!, {r0, r1}
 8000706:	801a      	strh	r2, [r3, #0]
 8000708:	3302      	adds	r3, #2
 800070a:	0c12      	lsrs	r2, r2, #16
 800070c:	701a      	strb	r2, [r3, #0]
 800070e:	f107 0317 	add.w	r3, r7, #23
 8000712:	2259      	movs	r2, #89	; 0x59
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f004 fb28 	bl	8004d6c <memset>
	HAL_UART_Transmit(&huart1, (uint8_t *)tx_str, strlen(tx_str), 1000);
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fd15 	bl	8000150 <strlen>
 8000726:	4603      	mov	r3, r0
 8000728:	b29a      	uxth	r2, r3
 800072a:	f107 010c 	add.w	r1, r7, #12
 800072e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000732:	4804      	ldr	r0, [pc, #16]	; (8000744 <FRAME_SYNC_RxFailCallback+0x54>)
 8000734:	f002 f98f 	bl	8002a56 <HAL_UART_Transmit>
}
 8000738:	bf00      	nop
 800073a:	3770      	adds	r7, #112	; 0x70
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	08006264 	.word	0x08006264
 8000744:	200000e4 	.word	0x200000e4

08000748 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <HAL_UART_RxCpltCallback+0x30>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	429a      	cmp	r2, r3
 800075a:	d109      	bne.n	8000770 <HAL_UART_RxCpltCallback+0x28>
	{
		COMMAND_LINE_Receive(uart_rx_buf);
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <HAL_UART_RxCpltCallback+0x34>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	4618      	mov	r0, r3
 8000762:	f003 f8d3 	bl	800390c <COMMAND_LINE_Receive>
		HAL_UART_Receive_IT(&huart1, &uart_rx_buf, 1);
 8000766:	2201      	movs	r2, #1
 8000768:	4904      	ldr	r1, [pc, #16]	; (800077c <HAL_UART_RxCpltCallback+0x34>)
 800076a:	4803      	ldr	r0, [pc, #12]	; (8000778 <HAL_UART_RxCpltCallback+0x30>)
 800076c:	f002 fa05 	bl	8002b7a <HAL_UART_Receive_IT>
	}
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	200000e4 	.word	0x200000e4
 800077c:	20000e40 	.word	0x20000e40

08000780 <FRAME_SYNC_Packet_Transmit>:

void FRAME_SYNC_Packet_Transmit(uint8_t* tx_buffer, uint8_t tx_buffer_length)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	70fb      	strb	r3, [r7, #3]
	SX1278_transmit(&hlora, tx_buffer, tx_buffer_length, 2000);
 800078c:	78fa      	ldrb	r2, [r7, #3]
 800078e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000792:	6879      	ldr	r1, [r7, #4]
 8000794:	4806      	ldr	r0, [pc, #24]	; (80007b0 <FRAME_SYNC_Packet_Transmit+0x30>)
 8000796:	f004 f8ac 	bl	80048f2 <SX1278_transmit>
	SX1278_LoRaEntryRx(&hlora, 0, 2000);
 800079a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800079e:	2100      	movs	r1, #0
 80007a0:	4803      	ldr	r0, [pc, #12]	; (80007b0 <FRAME_SYNC_Packet_Transmit+0x30>)
 80007a2:	f003 ff39 	bl	8004618 <SX1278_LoRaEntryRx>
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000c28 	.word	0x20000c28

080007b4 <FRAME_SYNC_Packet_Receive>:

void FRAME_SYNC_Packet_Receive()
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
  	if(hlora.status != RX)
 80007ba:	4b19      	ldr	r3, [pc, #100]	; (8000820 <FRAME_SYNC_Packet_Receive+0x6c>)
 80007bc:	7d9b      	ldrb	r3, [r3, #22]
 80007be:	2b03      	cmp	r3, #3
 80007c0:	d005      	beq.n	80007ce <FRAME_SYNC_Packet_Receive+0x1a>
  	{
  		SX1278_LoRaEntryRx(&hlora, 0, 2000);
 80007c2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80007c6:	2100      	movs	r1, #0
 80007c8:	4815      	ldr	r0, [pc, #84]	; (8000820 <FRAME_SYNC_Packet_Receive+0x6c>)
 80007ca:	f003 ff25 	bl	8004618 <SX1278_LoRaEntryRx>
  	}

	num_rx_byte = SX1278_LoRaRxPacket(&hlora);
 80007ce:	4814      	ldr	r0, [pc, #80]	; (8000820 <FRAME_SYNC_Packet_Receive+0x6c>)
 80007d0:	f003 ff87 	bl	80046e2 <SX1278_LoRaRxPacket>
 80007d4:	4603      	mov	r3, r0
 80007d6:	461a      	mov	r2, r3
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <FRAME_SYNC_Packet_Receive+0x70>)
 80007da:	701a      	strb	r2, [r3, #0]
	if(num_rx_byte > 0)
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <FRAME_SYNC_Packet_Receive+0x70>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d019      	beq.n	8000818 <FRAME_SYNC_Packet_Receive+0x64>
	{
		SX1278_read(&hlora, LoRa_Rx_Buffer, num_rx_byte);
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <FRAME_SYNC_Packet_Receive+0x70>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	490f      	ldr	r1, [pc, #60]	; (8000828 <FRAME_SYNC_Packet_Receive+0x74>)
 80007ec:	480c      	ldr	r0, [pc, #48]	; (8000820 <FRAME_SYNC_Packet_Receive+0x6c>)
 80007ee:	f004 f89e 	bl	800492e <SX1278_read>
		for(int i = 0; i < num_rx_byte; i++)
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	e009      	b.n	800080c <FRAME_SYNC_Packet_Receive+0x58>
		{
			FRAME_SYNC_Receive(LoRa_Rx_Buffer[i]);
 80007f8:	4a0b      	ldr	r2, [pc, #44]	; (8000828 <FRAME_SYNC_Packet_Receive+0x74>)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4413      	add	r3, r2
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	4618      	mov	r0, r3
 8000802:	f003 fbb1 	bl	8003f68 <FRAME_SYNC_Receive>
		for(int i = 0; i < num_rx_byte; i++)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	3301      	adds	r3, #1
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <FRAME_SYNC_Packet_Receive+0x70>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4293      	cmp	r3, r2
 8000816:	dbef      	blt.n	80007f8 <FRAME_SYNC_Packet_Receive+0x44>
		}
	}
}
 8000818:	bf00      	nop
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000c28 	.word	0x20000c28
 8000824:	20000e3f 	.word	0x20000e3f
 8000828:	20000d40 	.word	0x20000d40

0800082c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	460b      	mov	r3, r1
 8000836:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == huart3.Instance)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4b23      	ldr	r3, [pc, #140]	; (80008cc <HAL_UARTEx_RxEventCallback+0xa0>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	429a      	cmp	r2, r3
 8000842:	d13e      	bne.n	80008c2 <HAL_UARTEx_RxEventCallback+0x96>
	{
		if(rx_sensor_data[0]==SENSOR_1)
 8000844:	4b22      	ldr	r3, [pc, #136]	; (80008d0 <HAL_UARTEx_RxEventCallback+0xa4>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d118      	bne.n	800087e <HAL_UARTEx_RxEventCallback+0x52>
		{
			Sensor_1.humidty = rx_sensor_data[3]<<8 | rx_sensor_data[4];
 800084c:	4b20      	ldr	r3, [pc, #128]	; (80008d0 <HAL_UARTEx_RxEventCallback+0xa4>)
 800084e:	78db      	ldrb	r3, [r3, #3]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	b21a      	sxth	r2, r3
 8000854:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <HAL_UARTEx_RxEventCallback+0xa4>)
 8000856:	791b      	ldrb	r3, [r3, #4]
 8000858:	b21b      	sxth	r3, r3
 800085a:	4313      	orrs	r3, r2
 800085c:	b21a      	sxth	r2, r3
 800085e:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <HAL_UARTEx_RxEventCallback+0xa8>)
 8000860:	809a      	strh	r2, [r3, #4]
			Sensor_1.temperature = rx_sensor_data[5]<<8 | rx_sensor_data[6];
 8000862:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <HAL_UARTEx_RxEventCallback+0xa4>)
 8000864:	795b      	ldrb	r3, [r3, #5]
 8000866:	021b      	lsls	r3, r3, #8
 8000868:	b21a      	sxth	r2, r3
 800086a:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <HAL_UARTEx_RxEventCallback+0xa4>)
 800086c:	799b      	ldrb	r3, [r3, #6]
 800086e:	b21b      	sxth	r3, r3
 8000870:	4313      	orrs	r3, r2
 8000872:	b21a      	sxth	r2, r3
 8000874:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <HAL_UARTEx_RxEventCallback+0xa8>)
 8000876:	805a      	strh	r2, [r3, #2]
			SENSOR_state = Slave_2;
 8000878:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <HAL_UARTEx_RxEventCallback+0xac>)
 800087a:	2202      	movs	r2, #2
 800087c:	701a      	strb	r2, [r3, #0]
		}
		if(rx_sensor_data[0]==SENSOR_2)
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <HAL_UARTEx_RxEventCallback+0xa4>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b02      	cmp	r3, #2
 8000884:	d118      	bne.n	80008b8 <HAL_UARTEx_RxEventCallback+0x8c>
		{
			Sensor_2.humidty = rx_sensor_data[3]<<8 | rx_sensor_data[4];
 8000886:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <HAL_UARTEx_RxEventCallback+0xa4>)
 8000888:	78db      	ldrb	r3, [r3, #3]
 800088a:	021b      	lsls	r3, r3, #8
 800088c:	b21a      	sxth	r2, r3
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <HAL_UARTEx_RxEventCallback+0xa4>)
 8000890:	791b      	ldrb	r3, [r3, #4]
 8000892:	b21b      	sxth	r3, r3
 8000894:	4313      	orrs	r3, r2
 8000896:	b21a      	sxth	r2, r3
 8000898:	4b10      	ldr	r3, [pc, #64]	; (80008dc <HAL_UARTEx_RxEventCallback+0xb0>)
 800089a:	809a      	strh	r2, [r3, #4]
			Sensor_2.temperature = rx_sensor_data[5]<<8 | rx_sensor_data[6];
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <HAL_UARTEx_RxEventCallback+0xa4>)
 800089e:	795b      	ldrb	r3, [r3, #5]
 80008a0:	021b      	lsls	r3, r3, #8
 80008a2:	b21a      	sxth	r2, r3
 80008a4:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <HAL_UARTEx_RxEventCallback+0xa4>)
 80008a6:	799b      	ldrb	r3, [r3, #6]
 80008a8:	b21b      	sxth	r3, r3
 80008aa:	4313      	orrs	r3, r2
 80008ac:	b21a      	sxth	r2, r3
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <HAL_UARTEx_RxEventCallback+0xb0>)
 80008b0:	805a      	strh	r2, [r3, #2]
			SENSOR_state = Idle;
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <HAL_UARTEx_RxEventCallback+0xac>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
		}
		//HAL_UARTEx_ReceiveToIdle_IT(&huart3, rx_sensor_data, 16);
		HAL_UARTEx_ReceiveToIdle_IT(&huart3, (&rx_sensor_data[0]), sizeof(rx_sensor_data));
 80008b8:	220a      	movs	r2, #10
 80008ba:	4905      	ldr	r1, [pc, #20]	; (80008d0 <HAL_UARTEx_RxEventCallback+0xa4>)
 80008bc:	4803      	ldr	r0, [pc, #12]	; (80008cc <HAL_UARTEx_RxEventCallback+0xa0>)
 80008be:	f002 f98c 	bl	8002bda <HAL_UARTEx_ReceiveToIdle_IT>
	}


}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000128 	.word	0x20000128
 80008d0:	20000f44 	.word	0x20000f44
 80008d4:	20000bf0 	.word	0x20000bf0
 80008d8:	20000f4e 	.word	0x20000f4e
 80008dc:	20000bfc 	.word	0x20000bfc

080008e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e6:	f000 fc41 	bl	800116c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ea:	f000 f8a1 	bl	8000a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ee:	f000 f96f 	bl	8000bd0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80008f2:	f000 f8e3 	bl	8000abc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80008f6:	f000 f917 	bl	8000b28 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80008fa:	f000 f93f 	bl	8000b7c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  hlora_hw.dio0.port = D0_GPIO_Port;
 80008fe:	4b3e      	ldr	r3, [pc, #248]	; (80009f8 <main+0x118>)
 8000900:	4a3e      	ldr	r2, [pc, #248]	; (80009fc <main+0x11c>)
 8000902:	60da      	str	r2, [r3, #12]
  hlora_hw.dio0.pin = D0_Pin;
 8000904:	4b3c      	ldr	r3, [pc, #240]	; (80009f8 <main+0x118>)
 8000906:	2204      	movs	r2, #4
 8000908:	609a      	str	r2, [r3, #8]
  hlora_hw.nss.port = NSS_GPIO_Port;
 800090a:	4b3b      	ldr	r3, [pc, #236]	; (80009f8 <main+0x118>)
 800090c:	4a3b      	ldr	r2, [pc, #236]	; (80009fc <main+0x11c>)
 800090e:	615a      	str	r2, [r3, #20]
  hlora_hw.nss.pin = NSS_Pin;
 8000910:	4b39      	ldr	r3, [pc, #228]	; (80009f8 <main+0x118>)
 8000912:	2210      	movs	r2, #16
 8000914:	611a      	str	r2, [r3, #16]
  hlora_hw.reset.port = RST_GPIO_Port;
 8000916:	4b38      	ldr	r3, [pc, #224]	; (80009f8 <main+0x118>)
 8000918:	4a38      	ldr	r2, [pc, #224]	; (80009fc <main+0x11c>)
 800091a:	605a      	str	r2, [r3, #4]
  hlora_hw.reset.pin = RST_Pin;
 800091c:	4b36      	ldr	r3, [pc, #216]	; (80009f8 <main+0x118>)
 800091e:	2208      	movs	r2, #8
 8000920:	601a      	str	r2, [r3, #0]
  hlora_hw.spi = &hspi1;
 8000922:	4b35      	ldr	r3, [pc, #212]	; (80009f8 <main+0x118>)
 8000924:	4a36      	ldr	r2, [pc, #216]	; (8000a00 <main+0x120>)
 8000926:	619a      	str	r2, [r3, #24]

  hlora.hw = &hlora_hw;
 8000928:	4b36      	ldr	r3, [pc, #216]	; (8000a04 <main+0x124>)
 800092a:	4a33      	ldr	r2, [pc, #204]	; (80009f8 <main+0x118>)
 800092c:	601a      	str	r2, [r3, #0]
  SX1278_init(&hlora, 434000000, SX1278_POWER_20DBM, SX1278_LORA_SF_12,
 800092e:	230a      	movs	r3, #10
 8000930:	9305      	str	r3, [sp, #20]
 8000932:	2300      	movs	r3, #0
 8000934:	9304      	str	r3, [sp, #16]
 8000936:	2303      	movs	r3, #3
 8000938:	9303      	str	r3, [sp, #12]
 800093a:	2309      	movs	r3, #9
 800093c:	9302      	str	r3, [sp, #8]
 800093e:	2306      	movs	r3, #6
 8000940:	9301      	str	r3, [sp, #4]
 8000942:	2300      	movs	r3, #0
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	a32a      	add	r3, pc, #168	; (adr r3, 80009f0 <main+0x110>)
 8000948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800094c:	482d      	ldr	r0, [pc, #180]	; (8000a04 <main+0x124>)
 800094e:	f003 ffa3 	bl	8004898 <SX1278_init>
		  SX1278_LORA_BW_500KHZ, SX1278_LORA_CR_4_8, SX1278_LORA_CRC_EN, 10);

  HAL_UART_Receive_IT(&huart1, &uart_rx_buf, 1);
 8000952:	2201      	movs	r2, #1
 8000954:	492c      	ldr	r1, [pc, #176]	; (8000a08 <main+0x128>)
 8000956:	482d      	ldr	r0, [pc, #180]	; (8000a0c <main+0x12c>)
 8000958:	f002 f90f 	bl	8002b7a <HAL_UART_Receive_IT>
//  HAL_UART_Receive_IT(&huart3, rx_sensor_data, sizeof(rx_sensor_data));
  SX1278_LoRaEntryRx(&hlora, 0, 2000);
 800095c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000960:	2100      	movs	r1, #0
 8000962:	4828      	ldr	r0, [pc, #160]	; (8000a04 <main+0x124>)
 8000964:	f003 fe58 	bl	8004618 <SX1278_LoRaEntryRx>

  RING_BUFFER_Init(&ring_buffer, command_buffer, 10);
 8000968:	220a      	movs	r2, #10
 800096a:	4929      	ldr	r1, [pc, #164]	; (8000a10 <main+0x130>)
 800096c:	4829      	ldr	r0, [pc, #164]	; (8000a14 <main+0x134>)
 800096e:	f004 f92d 	bl	8004bcc <RING_BUFFER_Init>

  Sensor_Init(&Sensor_1, &huart3, SENSOR_1);
 8000972:	2201      	movs	r2, #1
 8000974:	4928      	ldr	r1, [pc, #160]	; (8000a18 <main+0x138>)
 8000976:	4829      	ldr	r0, [pc, #164]	; (8000a1c <main+0x13c>)
 8000978:	f004 f8b7 	bl	8004aea <Sensor_Init>
  Sensor_Init(&Sensor_2, &huart3, SENSOR_2);
 800097c:	2202      	movs	r2, #2
 800097e:	4926      	ldr	r1, [pc, #152]	; (8000a18 <main+0x138>)
 8000980:	4827      	ldr	r0, [pc, #156]	; (8000a20 <main+0x140>)
 8000982:	f004 f8b2 	bl	8004aea <Sensor_Init>
////		  Push_Command_To_Ring_Buffer(2, 1, 7, 1, sizeof(temp_cmd), temp_cmd);
//		  Push_Command_To_Ring_Buffer(4, 1, 7, 0, sizeof(temp_cmd), temp_cmd);
////		  timer = HAL_GetTick();
////	  }
//#endif
  HAL_UARTEx_ReceiveToIdle_IT(&huart3, (&rx_sensor_data[0]), sizeof(rx_sensor_data));
 8000986:	220a      	movs	r2, #10
 8000988:	4926      	ldr	r1, [pc, #152]	; (8000a24 <main+0x144>)
 800098a:	4823      	ldr	r0, [pc, #140]	; (8000a18 <main+0x138>)
 800098c:	f002 f925 	bl	8002bda <HAL_UARTEx_ReceiveToIdle_IT>

    /* USER CODE BEGIN 3 */

#if MY_ID == 0
	  static uint32_t timer = 0;
	  if(HAL_GetTick() - timer > 20000)
 8000990:	f000 fc44 	bl	800121c <HAL_GetTick>
 8000994:	4602      	mov	r2, r0
 8000996:	4b24      	ldr	r3, [pc, #144]	; (8000a28 <main+0x148>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	1ad3      	subs	r3, r2, r3
 800099c:	f644 6220 	movw	r2, #20000	; 0x4e20
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d91a      	bls.n	80009da <main+0xfa>
	  {
		  uint8_t temp_cmd[] = {GET_STATUS};
 80009a4:	2380      	movs	r3, #128	; 0x80
 80009a6:	713b      	strb	r3, [r7, #4]
		  Push_Command_To_Ring_Buffer(1, 1, 7, 1, sizeof(temp_cmd), temp_cmd);
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	9301      	str	r3, [sp, #4]
 80009ac:	2301      	movs	r3, #1
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	2301      	movs	r3, #1
 80009b2:	2207      	movs	r2, #7
 80009b4:	2101      	movs	r1, #1
 80009b6:	2001      	movs	r0, #1
 80009b8:	f7ff fd56 	bl	8000468 <Push_Command_To_Ring_Buffer>
		  Push_Command_To_Ring_Buffer(2, 1, 7, 1, sizeof(temp_cmd), temp_cmd);
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	9301      	str	r3, [sp, #4]
 80009c0:	2301      	movs	r3, #1
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	2301      	movs	r3, #1
 80009c6:	2207      	movs	r2, #7
 80009c8:	2101      	movs	r1, #1
 80009ca:	2002      	movs	r0, #2
 80009cc:	f7ff fd4c 	bl	8000468 <Push_Command_To_Ring_Buffer>
//		  Push_Command_To_Ring_Buffer(3, 1, 7, 1, sizeof(temp_cmd), temp_cmd);
//		  Push_Command_To_Ring_Buffer(4, 1, 7, 1, sizeof(temp_cmd), temp_cmd);
//		  SENSOR_state = Slave_1;
		  timer = HAL_GetTick();
 80009d0:	f000 fc24 	bl	800121c <HAL_GetTick>
 80009d4:	4603      	mov	r3, r0
 80009d6:	4a14      	ldr	r2, [pc, #80]	; (8000a28 <main+0x148>)
 80009d8:	6013      	str	r3, [r2, #0]
		  timer1 = HAL_GetTick();
	  }
#endif
//	  BUTTON_Handle(&btn);

	  COMMAND_LINE_Handle();
 80009da:	f002 fea5 	bl	8003728 <COMMAND_LINE_Handle>

	  FRAME_SYNC_Handle();
 80009de:	f003 fba5 	bl	800412c <FRAME_SYNC_Handle>

	  Command_Sending_Handle();
 80009e2:	f7ff fddd 	bl	80005a0 <Command_Sending_Handle>

	  Sensor_Handle(&SENSOR_state);
 80009e6:	4811      	ldr	r0, [pc, #68]	; (8000a2c <main+0x14c>)
 80009e8:	f004 f8c8 	bl	8004b7c <Sensor_Handle>
  {
 80009ec:	e7d0      	b.n	8000990 <main+0xb0>
 80009ee:	bf00      	nop
 80009f0:	19de5080 	.word	0x19de5080
 80009f4:	00000000 	.word	0x00000000
 80009f8:	20000c08 	.word	0x20000c08
 80009fc:	40010800 	.word	0x40010800
 8000a00:	2000008c 	.word	0x2000008c
 8000a04:	20000c28 	.word	0x20000c28
 8000a08:	20000e40 	.word	0x20000e40
 8000a0c:	200000e4 	.word	0x200000e4
 8000a10:	2000016c 	.word	0x2000016c
 8000a14:	20000be4 	.word	0x20000be4
 8000a18:	20000128 	.word	0x20000128
 8000a1c:	20000bf0 	.word	0x20000bf0
 8000a20:	20000bfc 	.word	0x20000bfc
 8000a24:	20000f44 	.word	0x20000f44
 8000a28:	20000f50 	.word	0x20000f50
 8000a2c:	20000f4e 	.word	0x20000f4e

08000a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b090      	sub	sp, #64	; 0x40
 8000a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a36:	f107 0318 	add.w	r3, r7, #24
 8000a3a:	2228      	movs	r2, #40	; 0x28
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f004 f994 	bl	8004d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a52:	2301      	movs	r3, #1
 8000a54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a60:	2301      	movs	r3, #1
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a64:	2302      	movs	r3, #2
 8000a66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a6e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a74:	f107 0318 	add.w	r3, r7, #24
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f000 ff6f 	bl	800195c <HAL_RCC_OscConfig>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a84:	f000 f940 	bl	8000d08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a88:	230f      	movs	r3, #15
 8000a8a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f001 f9dc 	bl	8001e60 <HAL_RCC_ClockConfig>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000aae:	f000 f92b 	bl	8000d08 <Error_Handler>
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	3740      	adds	r7, #64	; 0x40
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ac0:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ac2:	4a18      	ldr	r2, [pc, #96]	; (8000b24 <MX_SPI1_Init+0x68>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ac6:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ac8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000acc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000af0:	2210      	movs	r2, #16
 8000af2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000b08:	220a      	movs	r2, #10
 8000b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000b0e:	f001 fb3f 	bl	8002190 <HAL_SPI_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b18:	f000 f8f6 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	2000008c 	.word	0x2000008c
 8000b24:	40013000 	.word	0x40013000

08000b28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_USART1_UART_Init+0x4c>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <MX_USART1_UART_Init+0x50>)
 8000b30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <MX_USART1_UART_Init+0x4c>)
 8000b34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_USART1_UART_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <MX_USART1_UART_Init+0x4c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <MX_USART1_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_USART1_UART_Init+0x4c>)
 8000b4e:	220c      	movs	r2, #12
 8000b50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <MX_USART1_UART_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_USART1_UART_Init+0x4c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b5e:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_USART1_UART_Init+0x4c>)
 8000b60:	f001 ff2c 	bl	80029bc <HAL_UART_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b6a:	f000 f8cd 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200000e4 	.word	0x200000e4
 8000b78:	40013800 	.word	0x40013800

08000b7c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_USART3_UART_Init+0x4c>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <MX_USART3_UART_Init+0x50>)
 8000b84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <MX_USART3_UART_Init+0x4c>)
 8000b88:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_USART3_UART_Init+0x4c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_USART3_UART_Init+0x4c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_USART3_UART_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_USART3_UART_Init+0x4c>)
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <MX_USART3_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_USART3_UART_Init+0x4c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_USART3_UART_Init+0x4c>)
 8000bb4:	f001 ff02 	bl	80029bc <HAL_UART_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000bbe:	f000 f8a3 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000128 	.word	0x20000128
 8000bcc:	40004800 	.word	0x40004800

08000bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd6:	f107 0310 	add.w	r3, r7, #16
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be4:	4b44      	ldr	r3, [pc, #272]	; (8000cf8 <MX_GPIO_Init+0x128>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	4a43      	ldr	r2, [pc, #268]	; (8000cf8 <MX_GPIO_Init+0x128>)
 8000bea:	f043 0310 	orr.w	r3, r3, #16
 8000bee:	6193      	str	r3, [r2, #24]
 8000bf0:	4b41      	ldr	r3, [pc, #260]	; (8000cf8 <MX_GPIO_Init+0x128>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f003 0310 	and.w	r3, r3, #16
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfc:	4b3e      	ldr	r3, [pc, #248]	; (8000cf8 <MX_GPIO_Init+0x128>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	4a3d      	ldr	r2, [pc, #244]	; (8000cf8 <MX_GPIO_Init+0x128>)
 8000c02:	f043 0320 	orr.w	r3, r3, #32
 8000c06:	6193      	str	r3, [r2, #24]
 8000c08:	4b3b      	ldr	r3, [pc, #236]	; (8000cf8 <MX_GPIO_Init+0x128>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	f003 0320 	and.w	r3, r3, #32
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c14:	4b38      	ldr	r3, [pc, #224]	; (8000cf8 <MX_GPIO_Init+0x128>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	4a37      	ldr	r2, [pc, #220]	; (8000cf8 <MX_GPIO_Init+0x128>)
 8000c1a:	f043 0304 	orr.w	r3, r3, #4
 8000c1e:	6193      	str	r3, [r2, #24]
 8000c20:	4b35      	ldr	r3, [pc, #212]	; (8000cf8 <MX_GPIO_Init+0x128>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	f003 0304 	and.w	r3, r3, #4
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2c:	4b32      	ldr	r3, [pc, #200]	; (8000cf8 <MX_GPIO_Init+0x128>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a31      	ldr	r2, [pc, #196]	; (8000cf8 <MX_GPIO_Init+0x128>)
 8000c32:	f043 0308 	orr.w	r3, r3, #8
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b2f      	ldr	r3, [pc, #188]	; (8000cf8 <MX_GPIO_Init+0x128>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f003 0308 	and.w	r3, r3, #8
 8000c40:	603b      	str	r3, [r7, #0]
 8000c42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c4a:	482c      	ldr	r0, [pc, #176]	; (8000cfc <MX_GPIO_Init+0x12c>)
 8000c4c:	f000 fe6d 	bl	800192a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|NSS_Pin|ISOLATE_VALVE_Pin, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	f248 0118 	movw	r1, #32792	; 0x8018
 8000c56:	482a      	ldr	r0, [pc, #168]	; (8000d00 <MX_GPIO_Init+0x130>)
 8000c58:	f000 fe67 	bl	800192a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY_OPEN_Pin|RELAY_CLOSE_Pin, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2118      	movs	r1, #24
 8000c60:	4828      	ldr	r0, [pc, #160]	; (8000d04 <MX_GPIO_Init+0x134>)
 8000c62:	f000 fe62 	bl	800192a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2302      	movs	r3, #2
 8000c76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	481f      	ldr	r0, [pc, #124]	; (8000cfc <MX_GPIO_Init+0x12c>)
 8000c80:	f000 fcb8 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : D0_Pin */
  GPIO_InitStruct.Pin = D0_Pin;
 8000c84:	2304      	movs	r3, #4
 8000c86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(D0_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 0310 	add.w	r3, r7, #16
 8000c94:	4619      	mov	r1, r3
 8000c96:	481a      	ldr	r0, [pc, #104]	; (8000d00 <MX_GPIO_Init+0x130>)
 8000c98:	f000 fcac 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin NSS_Pin ISOLATE_VALVE_Pin */
  GPIO_InitStruct.Pin = RST_Pin|NSS_Pin|ISOLATE_VALVE_Pin;
 8000c9c:	f248 0318 	movw	r3, #32792	; 0x8018
 8000ca0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2302      	movs	r3, #2
 8000cac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	f107 0310 	add.w	r3, r7, #16
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4812      	ldr	r0, [pc, #72]	; (8000d00 <MX_GPIO_Init+0x130>)
 8000cb6:	f000 fc9d 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_OPEN_Pin RELAY_CLOSE_Pin */
  GPIO_InitStruct.Pin = RELAY_OPEN_Pin|RELAY_CLOSE_Pin;
 8000cba:	2318      	movs	r3, #24
 8000cbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cca:	f107 0310 	add.w	r3, r7, #16
 8000cce:	4619      	mov	r1, r3
 8000cd0:	480c      	ldr	r0, [pc, #48]	; (8000d04 <MX_GPIO_Init+0x134>)
 8000cd2:	f000 fc8f 	bl	80015f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIGNAL_OPEN_Pin SIGNAL_CLOSE_Pin */
  GPIO_InitStruct.Pin = SIGNAL_OPEN_Pin|SIGNAL_CLOSE_Pin;
 8000cd6:	2360      	movs	r3, #96	; 0x60
 8000cd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce2:	f107 0310 	add.w	r3, r7, #16
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4806      	ldr	r0, [pc, #24]	; (8000d04 <MX_GPIO_Init+0x134>)
 8000cea:	f000 fc83 	bl	80015f4 <HAL_GPIO_Init>

}
 8000cee:	bf00      	nop
 8000cf0:	3720      	adds	r7, #32
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40011000 	.word	0x40011000
 8000d00:	40010800 	.word	0x40010800
 8000d04:	40010c00 	.word	0x40010c00

08000d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d0c:	b672      	cpsid	i
}
 8000d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <Error_Handler+0x8>
	...

08000d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_MspInit+0x40>)
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <HAL_MspInit+0x40>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6193      	str	r3, [r2, #24]
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_MspInit+0x40>)
 8000d28:	699b      	ldr	r3, [r3, #24]
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_MspInit+0x40>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <HAL_MspInit+0x40>)
 8000d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	61d3      	str	r3, [r2, #28]
 8000d3e:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <HAL_MspInit+0x40>)
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	40021000 	.word	0x40021000

08000d58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0310 	add.w	r3, r7, #16
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a1b      	ldr	r2, [pc, #108]	; (8000de0 <HAL_SPI_MspInit+0x88>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d12f      	bne.n	8000dd8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d78:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <HAL_SPI_MspInit+0x8c>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	4a19      	ldr	r2, [pc, #100]	; (8000de4 <HAL_SPI_MspInit+0x8c>)
 8000d7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d82:	6193      	str	r3, [r2, #24]
 8000d84:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <HAL_SPI_MspInit+0x8c>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <HAL_SPI_MspInit+0x8c>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	4a13      	ldr	r2, [pc, #76]	; (8000de4 <HAL_SPI_MspInit+0x8c>)
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	6193      	str	r3, [r2, #24]
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <HAL_SPI_MspInit+0x8c>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	f003 0304 	and.w	r3, r3, #4
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000da8:	23a0      	movs	r3, #160	; 0xa0
 8000daa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000db0:	2303      	movs	r3, #3
 8000db2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	4619      	mov	r1, r3
 8000dba:	480b      	ldr	r0, [pc, #44]	; (8000de8 <HAL_SPI_MspInit+0x90>)
 8000dbc:	f000 fc1a 	bl	80015f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dc0:	2340      	movs	r3, #64	; 0x40
 8000dc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <HAL_SPI_MspInit+0x90>)
 8000dd4:	f000 fc0e 	bl	80015f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dd8:	bf00      	nop
 8000dda:	3720      	adds	r7, #32
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40013000 	.word	0x40013000
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40010800 	.word	0x40010800

08000dec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	; 0x28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0318 	add.w	r3, r7, #24
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a40      	ldr	r2, [pc, #256]	; (8000f08 <HAL_UART_MspInit+0x11c>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d13a      	bne.n	8000e82 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e0c:	4b3f      	ldr	r3, [pc, #252]	; (8000f0c <HAL_UART_MspInit+0x120>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	4a3e      	ldr	r2, [pc, #248]	; (8000f0c <HAL_UART_MspInit+0x120>)
 8000e12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e16:	6193      	str	r3, [r2, #24]
 8000e18:	4b3c      	ldr	r3, [pc, #240]	; (8000f0c <HAL_UART_MspInit+0x120>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e20:	617b      	str	r3, [r7, #20]
 8000e22:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e24:	4b39      	ldr	r3, [pc, #228]	; (8000f0c <HAL_UART_MspInit+0x120>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a38      	ldr	r2, [pc, #224]	; (8000f0c <HAL_UART_MspInit+0x120>)
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b36      	ldr	r3, [pc, #216]	; (8000f0c <HAL_UART_MspInit+0x120>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f003 0304 	and.w	r3, r3, #4
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 0318 	add.w	r3, r7, #24
 8000e4e:	4619      	mov	r1, r3
 8000e50:	482f      	ldr	r0, [pc, #188]	; (8000f10 <HAL_UART_MspInit+0x124>)
 8000e52:	f000 fbcf 	bl	80015f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	f107 0318 	add.w	r3, r7, #24
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4829      	ldr	r0, [pc, #164]	; (8000f10 <HAL_UART_MspInit+0x124>)
 8000e6c:	f000 fbc2 	bl	80015f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2100      	movs	r1, #0
 8000e74:	2025      	movs	r0, #37	; 0x25
 8000e76:	f000 fad6 	bl	8001426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e7a:	2025      	movs	r0, #37	; 0x25
 8000e7c:	f000 faef 	bl	800145e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e80:	e03e      	b.n	8000f00 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART3)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a23      	ldr	r2, [pc, #140]	; (8000f14 <HAL_UART_MspInit+0x128>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d139      	bne.n	8000f00 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e8c:	4b1f      	ldr	r3, [pc, #124]	; (8000f0c <HAL_UART_MspInit+0x120>)
 8000e8e:	69db      	ldr	r3, [r3, #28]
 8000e90:	4a1e      	ldr	r2, [pc, #120]	; (8000f0c <HAL_UART_MspInit+0x120>)
 8000e92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e96:	61d3      	str	r3, [r2, #28]
 8000e98:	4b1c      	ldr	r3, [pc, #112]	; (8000f0c <HAL_UART_MspInit+0x120>)
 8000e9a:	69db      	ldr	r3, [r3, #28]
 8000e9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea4:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <HAL_UART_MspInit+0x120>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	4a18      	ldr	r2, [pc, #96]	; (8000f0c <HAL_UART_MspInit+0x120>)
 8000eaa:	f043 0308 	orr.w	r3, r3, #8
 8000eae:	6193      	str	r3, [r2, #24]
 8000eb0:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <HAL_UART_MspInit+0x120>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	f003 0308 	and.w	r3, r3, #8
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eca:	f107 0318 	add.w	r3, r7, #24
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4811      	ldr	r0, [pc, #68]	; (8000f18 <HAL_UART_MspInit+0x12c>)
 8000ed2:	f000 fb8f 	bl	80015f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ed6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee4:	f107 0318 	add.w	r3, r7, #24
 8000ee8:	4619      	mov	r1, r3
 8000eea:	480b      	ldr	r0, [pc, #44]	; (8000f18 <HAL_UART_MspInit+0x12c>)
 8000eec:	f000 fb82 	bl	80015f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	2027      	movs	r0, #39	; 0x27
 8000ef6:	f000 fa96 	bl	8001426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000efa:	2027      	movs	r0, #39	; 0x27
 8000efc:	f000 faaf 	bl	800145e <HAL_NVIC_EnableIRQ>
}
 8000f00:	bf00      	nop
 8000f02:	3728      	adds	r7, #40	; 0x28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40013800 	.word	0x40013800
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40010800 	.word	0x40010800
 8000f14:	40004800 	.word	0x40004800
 8000f18:	40010c00 	.word	0x40010c00

08000f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <NMI_Handler+0x4>

08000f22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <HardFault_Handler+0x4>

08000f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <MemManage_Handler+0x4>

08000f2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <BusFault_Handler+0x4>

08000f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <UsageFault_Handler+0x4>

08000f3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr

08000f46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr

08000f52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr

08000f5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f62:	f000 f949 	bl	80011f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <USART1_IRQHandler+0x10>)
 8000f72:	f001 fe81 	bl	8002c78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200000e4 	.word	0x200000e4

08000f80 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <USART3_IRQHandler+0x10>)
 8000f86:	f001 fe77 	bl	8002c78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000128 	.word	0x20000128

08000f94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
	return 1;
 8000f98:	2301      	movs	r3, #1
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr

08000fa2 <_kill>:

int _kill(int pid, int sig)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
 8000faa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000fac:	f003 fea6 	bl	8004cfc <__errno>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2216      	movs	r2, #22
 8000fb4:	601a      	str	r2, [r3, #0]
	return -1;
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <_exit>:

void _exit (int status)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000fca:	f04f 31ff 	mov.w	r1, #4294967295
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ffe7 	bl	8000fa2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000fd4:	e7fe      	b.n	8000fd4 <_exit+0x12>

08000fd6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b086      	sub	sp, #24
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	60f8      	str	r0, [r7, #12]
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	e00a      	b.n	8000ffe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fe8:	f3af 8000 	nop.w
 8000fec:	4601      	mov	r1, r0
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	1c5a      	adds	r2, r3, #1
 8000ff2:	60ba      	str	r2, [r7, #8]
 8000ff4:	b2ca      	uxtb	r2, r1
 8000ff6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	429a      	cmp	r2, r3
 8001004:	dbf0      	blt.n	8000fe8 <_read+0x12>
	}

return len;
 8001006:	687b      	ldr	r3, [r7, #4]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	e009      	b.n	8001036 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	1c5a      	adds	r2, r3, #1
 8001026:	60ba      	str	r2, [r7, #8]
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	4618      	mov	r0, r3
 800102c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	3301      	adds	r3, #1
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	429a      	cmp	r2, r3
 800103c:	dbf1      	blt.n	8001022 <_write+0x12>
	}
	return len;
 800103e:	687b      	ldr	r3, [r7, #4]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <_close>:

int _close(int file)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	return -1;
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr

0800105e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800106e:	605a      	str	r2, [r3, #4]
	return 0;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <_isatty>:

int _isatty(int file)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	return 1;
 8001084:	2301      	movs	r3, #1
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
	return 0;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr

080010a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b0:	4a14      	ldr	r2, [pc, #80]	; (8001104 <_sbrk+0x5c>)
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <_sbrk+0x60>)
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010bc:	4b13      	ldr	r3, [pc, #76]	; (800110c <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d102      	bne.n	80010ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <_sbrk+0x64>)
 80010c6:	4a12      	ldr	r2, [pc, #72]	; (8001110 <_sbrk+0x68>)
 80010c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <_sbrk+0x64>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d207      	bcs.n	80010e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d8:	f003 fe10 	bl	8004cfc <__errno>
 80010dc:	4603      	mov	r3, r0
 80010de:	220c      	movs	r2, #12
 80010e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
 80010e6:	e009      	b.n	80010fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <_sbrk+0x64>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ee:	4b07      	ldr	r3, [pc, #28]	; (800110c <_sbrk+0x64>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	4a05      	ldr	r2, [pc, #20]	; (800110c <_sbrk+0x64>)
 80010f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010fa:	68fb      	ldr	r3, [r7, #12]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20005000 	.word	0x20005000
 8001108:	00000400 	.word	0x00000400
 800110c:	20000f54 	.word	0x20000f54
 8001110:	20002328 	.word	0x20002328

08001114 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001120:	480c      	ldr	r0, [pc, #48]	; (8001154 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001122:	490d      	ldr	r1, [pc, #52]	; (8001158 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001124:	4a0d      	ldr	r2, [pc, #52]	; (800115c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001128:	e002      	b.n	8001130 <LoopCopyDataInit>

0800112a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800112c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112e:	3304      	adds	r3, #4

08001130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001134:	d3f9      	bcc.n	800112a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001136:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001138:	4c0a      	ldr	r4, [pc, #40]	; (8001164 <LoopFillZerobss+0x22>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800113c:	e001      	b.n	8001142 <LoopFillZerobss>

0800113e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001140:	3204      	adds	r2, #4

08001142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001144:	d3fb      	bcc.n	800113e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001146:	f7ff ffe5 	bl	8001114 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800114a:	f003 fddd 	bl	8004d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800114e:	f7ff fbc7 	bl	80008e0 <main>
  bx lr
 8001152:	4770      	bx	lr
  ldr r0, =_sdata
 8001154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001158:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800115c:	08006484 	.word	0x08006484
  ldr r2, =_sbss
 8001160:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001164:	20002328 	.word	0x20002328

08001168 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <ADC1_2_IRQHandler>
	...

0800116c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <HAL_Init+0x28>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a07      	ldr	r2, [pc, #28]	; (8001194 <HAL_Init+0x28>)
 8001176:	f043 0310 	orr.w	r3, r3, #16
 800117a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117c:	2003      	movs	r0, #3
 800117e:	f000 f947 	bl	8001410 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001182:	200f      	movs	r0, #15
 8001184:	f000 f808 	bl	8001198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001188:	f7ff fdc4 	bl	8000d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40022000 	.word	0x40022000

08001198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_InitTick+0x54>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_InitTick+0x58>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
 80011aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 f95f 	bl	800147a <HAL_SYSTICK_Config>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00e      	b.n	80011e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b0f      	cmp	r3, #15
 80011ca:	d80a      	bhi.n	80011e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011cc:	2200      	movs	r2, #0
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f000 f927 	bl	8001426 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d8:	4a06      	ldr	r2, [pc, #24]	; (80011f4 <HAL_InitTick+0x5c>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	e000      	b.n	80011e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000000 	.word	0x20000000
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000004 	.word	0x20000004

080011f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <HAL_IncTick+0x1c>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b05      	ldr	r3, [pc, #20]	; (8001218 <HAL_IncTick+0x20>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	4a03      	ldr	r2, [pc, #12]	; (8001218 <HAL_IncTick+0x20>)
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	20000008 	.word	0x20000008
 8001218:	20000f58 	.word	0x20000f58

0800121c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return uwTick;
 8001220:	4b02      	ldr	r3, [pc, #8]	; (800122c <HAL_GetTick+0x10>)
 8001222:	681b      	ldr	r3, [r3, #0]
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	20000f58 	.word	0x20000f58

08001230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001238:	f7ff fff0 	bl	800121c <HAL_GetTick>
 800123c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001248:	d005      	beq.n	8001256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800124a:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <HAL_Delay+0x44>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	461a      	mov	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4413      	add	r3, r2
 8001254:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001256:	bf00      	nop
 8001258:	f7ff ffe0 	bl	800121c <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	429a      	cmp	r2, r3
 8001266:	d8f7      	bhi.n	8001258 <HAL_Delay+0x28>
  {
  }
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000008 	.word	0x20000008

08001278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001294:	4013      	ands	r3, r2
 8001296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012aa:	4a04      	ldr	r2, [pc, #16]	; (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	60d3      	str	r3, [r2, #12]
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <__NVIC_GetPriorityGrouping+0x18>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	f003 0307 	and.w	r3, r3, #7
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	db0b      	blt.n	8001306 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	f003 021f 	and.w	r2, r3, #31
 80012f4:	4906      	ldr	r1, [pc, #24]	; (8001310 <__NVIC_EnableIRQ+0x34>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	095b      	lsrs	r3, r3, #5
 80012fc:	2001      	movs	r0, #1
 80012fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	e000e100 	.word	0xe000e100

08001314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	6039      	str	r1, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	2b00      	cmp	r3, #0
 8001326:	db0a      	blt.n	800133e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	b2da      	uxtb	r2, r3
 800132c:	490c      	ldr	r1, [pc, #48]	; (8001360 <__NVIC_SetPriority+0x4c>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	0112      	lsls	r2, r2, #4
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	440b      	add	r3, r1
 8001338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800133c:	e00a      	b.n	8001354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4908      	ldr	r1, [pc, #32]	; (8001364 <__NVIC_SetPriority+0x50>)
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	3b04      	subs	r3, #4
 800134c:	0112      	lsls	r2, r2, #4
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	440b      	add	r3, r1
 8001352:	761a      	strb	r2, [r3, #24]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000e100 	.word	0xe000e100
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f1c3 0307 	rsb	r3, r3, #7
 8001382:	2b04      	cmp	r3, #4
 8001384:	bf28      	it	cs
 8001386:	2304      	movcs	r3, #4
 8001388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3304      	adds	r3, #4
 800138e:	2b06      	cmp	r3, #6
 8001390:	d902      	bls.n	8001398 <NVIC_EncodePriority+0x30>
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3b03      	subs	r3, #3
 8001396:	e000      	b.n	800139a <NVIC_EncodePriority+0x32>
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	f04f 32ff 	mov.w	r2, #4294967295
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43da      	mvns	r2, r3
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	401a      	ands	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b0:	f04f 31ff 	mov.w	r1, #4294967295
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	43d9      	mvns	r1, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	4313      	orrs	r3, r2
         );
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3724      	adds	r7, #36	; 0x24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013dc:	d301      	bcc.n	80013e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013de:	2301      	movs	r3, #1
 80013e0:	e00f      	b.n	8001402 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e2:	4a0a      	ldr	r2, [pc, #40]	; (800140c <SysTick_Config+0x40>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ea:	210f      	movs	r1, #15
 80013ec:	f04f 30ff 	mov.w	r0, #4294967295
 80013f0:	f7ff ff90 	bl	8001314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <SysTick_Config+0x40>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fa:	4b04      	ldr	r3, [pc, #16]	; (800140c <SysTick_Config+0x40>)
 80013fc:	2207      	movs	r2, #7
 80013fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	e000e010 	.word	0xe000e010

08001410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff ff2d 	bl	8001278 <__NVIC_SetPriorityGrouping>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001426:	b580      	push	{r7, lr}
 8001428:	b086      	sub	sp, #24
 800142a:	af00      	add	r7, sp, #0
 800142c:	4603      	mov	r3, r0
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
 8001432:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001438:	f7ff ff42 	bl	80012c0 <__NVIC_GetPriorityGrouping>
 800143c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	68b9      	ldr	r1, [r7, #8]
 8001442:	6978      	ldr	r0, [r7, #20]
 8001444:	f7ff ff90 	bl	8001368 <NVIC_EncodePriority>
 8001448:	4602      	mov	r2, r0
 800144a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ff5f 	bl	8001314 <__NVIC_SetPriority>
}
 8001456:	bf00      	nop
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	4603      	mov	r3, r0
 8001466:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff35 	bl	80012dc <__NVIC_EnableIRQ>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff ffa2 	bl	80013cc <SysTick_Config>
 8001488:	4603      	mov	r3, r0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001492:	b480      	push	{r7}
 8001494:	b085      	sub	sp, #20
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800149a:	2300      	movs	r3, #0
 800149c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d008      	beq.n	80014ba <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2204      	movs	r2, #4
 80014ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e020      	b.n	80014fc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 020e 	bic.w	r2, r2, #14
 80014c8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 0201 	bic.w	r2, r2, #1
 80014d8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e2:	2101      	movs	r1, #1
 80014e4:	fa01 f202 	lsl.w	r2, r1, r2
 80014e8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
	...

08001508 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800151a:	2b02      	cmp	r3, #2
 800151c:	d005      	beq.n	800152a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2204      	movs	r2, #4
 8001522:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	73fb      	strb	r3, [r7, #15]
 8001528:	e051      	b.n	80015ce <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 020e 	bic.w	r2, r2, #14
 8001538:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0201 	bic.w	r2, r2, #1
 8001548:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a22      	ldr	r2, [pc, #136]	; (80015d8 <HAL_DMA_Abort_IT+0xd0>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d029      	beq.n	80015a8 <HAL_DMA_Abort_IT+0xa0>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a20      	ldr	r2, [pc, #128]	; (80015dc <HAL_DMA_Abort_IT+0xd4>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d022      	beq.n	80015a4 <HAL_DMA_Abort_IT+0x9c>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a1f      	ldr	r2, [pc, #124]	; (80015e0 <HAL_DMA_Abort_IT+0xd8>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d01a      	beq.n	800159e <HAL_DMA_Abort_IT+0x96>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a1d      	ldr	r2, [pc, #116]	; (80015e4 <HAL_DMA_Abort_IT+0xdc>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d012      	beq.n	8001598 <HAL_DMA_Abort_IT+0x90>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a1c      	ldr	r2, [pc, #112]	; (80015e8 <HAL_DMA_Abort_IT+0xe0>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d00a      	beq.n	8001592 <HAL_DMA_Abort_IT+0x8a>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a1a      	ldr	r2, [pc, #104]	; (80015ec <HAL_DMA_Abort_IT+0xe4>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d102      	bne.n	800158c <HAL_DMA_Abort_IT+0x84>
 8001586:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800158a:	e00e      	b.n	80015aa <HAL_DMA_Abort_IT+0xa2>
 800158c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001590:	e00b      	b.n	80015aa <HAL_DMA_Abort_IT+0xa2>
 8001592:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001596:	e008      	b.n	80015aa <HAL_DMA_Abort_IT+0xa2>
 8001598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159c:	e005      	b.n	80015aa <HAL_DMA_Abort_IT+0xa2>
 800159e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a2:	e002      	b.n	80015aa <HAL_DMA_Abort_IT+0xa2>
 80015a4:	2310      	movs	r3, #16
 80015a6:	e000      	b.n	80015aa <HAL_DMA_Abort_IT+0xa2>
 80015a8:	2301      	movs	r3, #1
 80015aa:	4a11      	ldr	r2, [pc, #68]	; (80015f0 <HAL_DMA_Abort_IT+0xe8>)
 80015ac:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2201      	movs	r2, #1
 80015b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	4798      	blx	r3
    } 
  }
  return status;
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40020008 	.word	0x40020008
 80015dc:	4002001c 	.word	0x4002001c
 80015e0:	40020030 	.word	0x40020030
 80015e4:	40020044 	.word	0x40020044
 80015e8:	40020058 	.word	0x40020058
 80015ec:	4002006c 	.word	0x4002006c
 80015f0:	40020000 	.word	0x40020000

080015f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b08b      	sub	sp, #44	; 0x2c
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015fe:	2300      	movs	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001606:	e169      	b.n	80018dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001608:	2201      	movs	r2, #1
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	69fa      	ldr	r2, [r7, #28]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	429a      	cmp	r2, r3
 8001622:	f040 8158 	bne.w	80018d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	4a9a      	ldr	r2, [pc, #616]	; (8001894 <HAL_GPIO_Init+0x2a0>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d05e      	beq.n	80016ee <HAL_GPIO_Init+0xfa>
 8001630:	4a98      	ldr	r2, [pc, #608]	; (8001894 <HAL_GPIO_Init+0x2a0>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d875      	bhi.n	8001722 <HAL_GPIO_Init+0x12e>
 8001636:	4a98      	ldr	r2, [pc, #608]	; (8001898 <HAL_GPIO_Init+0x2a4>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d058      	beq.n	80016ee <HAL_GPIO_Init+0xfa>
 800163c:	4a96      	ldr	r2, [pc, #600]	; (8001898 <HAL_GPIO_Init+0x2a4>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d86f      	bhi.n	8001722 <HAL_GPIO_Init+0x12e>
 8001642:	4a96      	ldr	r2, [pc, #600]	; (800189c <HAL_GPIO_Init+0x2a8>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d052      	beq.n	80016ee <HAL_GPIO_Init+0xfa>
 8001648:	4a94      	ldr	r2, [pc, #592]	; (800189c <HAL_GPIO_Init+0x2a8>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d869      	bhi.n	8001722 <HAL_GPIO_Init+0x12e>
 800164e:	4a94      	ldr	r2, [pc, #592]	; (80018a0 <HAL_GPIO_Init+0x2ac>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d04c      	beq.n	80016ee <HAL_GPIO_Init+0xfa>
 8001654:	4a92      	ldr	r2, [pc, #584]	; (80018a0 <HAL_GPIO_Init+0x2ac>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d863      	bhi.n	8001722 <HAL_GPIO_Init+0x12e>
 800165a:	4a92      	ldr	r2, [pc, #584]	; (80018a4 <HAL_GPIO_Init+0x2b0>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d046      	beq.n	80016ee <HAL_GPIO_Init+0xfa>
 8001660:	4a90      	ldr	r2, [pc, #576]	; (80018a4 <HAL_GPIO_Init+0x2b0>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d85d      	bhi.n	8001722 <HAL_GPIO_Init+0x12e>
 8001666:	2b12      	cmp	r3, #18
 8001668:	d82a      	bhi.n	80016c0 <HAL_GPIO_Init+0xcc>
 800166a:	2b12      	cmp	r3, #18
 800166c:	d859      	bhi.n	8001722 <HAL_GPIO_Init+0x12e>
 800166e:	a201      	add	r2, pc, #4	; (adr r2, 8001674 <HAL_GPIO_Init+0x80>)
 8001670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001674:	080016ef 	.word	0x080016ef
 8001678:	080016c9 	.word	0x080016c9
 800167c:	080016db 	.word	0x080016db
 8001680:	0800171d 	.word	0x0800171d
 8001684:	08001723 	.word	0x08001723
 8001688:	08001723 	.word	0x08001723
 800168c:	08001723 	.word	0x08001723
 8001690:	08001723 	.word	0x08001723
 8001694:	08001723 	.word	0x08001723
 8001698:	08001723 	.word	0x08001723
 800169c:	08001723 	.word	0x08001723
 80016a0:	08001723 	.word	0x08001723
 80016a4:	08001723 	.word	0x08001723
 80016a8:	08001723 	.word	0x08001723
 80016ac:	08001723 	.word	0x08001723
 80016b0:	08001723 	.word	0x08001723
 80016b4:	08001723 	.word	0x08001723
 80016b8:	080016d1 	.word	0x080016d1
 80016bc:	080016e5 	.word	0x080016e5
 80016c0:	4a79      	ldr	r2, [pc, #484]	; (80018a8 <HAL_GPIO_Init+0x2b4>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d013      	beq.n	80016ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016c6:	e02c      	b.n	8001722 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	623b      	str	r3, [r7, #32]
          break;
 80016ce:	e029      	b.n	8001724 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	3304      	adds	r3, #4
 80016d6:	623b      	str	r3, [r7, #32]
          break;
 80016d8:	e024      	b.n	8001724 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	3308      	adds	r3, #8
 80016e0:	623b      	str	r3, [r7, #32]
          break;
 80016e2:	e01f      	b.n	8001724 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	330c      	adds	r3, #12
 80016ea:	623b      	str	r3, [r7, #32]
          break;
 80016ec:	e01a      	b.n	8001724 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d102      	bne.n	80016fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016f6:	2304      	movs	r3, #4
 80016f8:	623b      	str	r3, [r7, #32]
          break;
 80016fa:	e013      	b.n	8001724 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d105      	bne.n	8001710 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001704:	2308      	movs	r3, #8
 8001706:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69fa      	ldr	r2, [r7, #28]
 800170c:	611a      	str	r2, [r3, #16]
          break;
 800170e:	e009      	b.n	8001724 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001710:	2308      	movs	r3, #8
 8001712:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69fa      	ldr	r2, [r7, #28]
 8001718:	615a      	str	r2, [r3, #20]
          break;
 800171a:	e003      	b.n	8001724 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800171c:	2300      	movs	r3, #0
 800171e:	623b      	str	r3, [r7, #32]
          break;
 8001720:	e000      	b.n	8001724 <HAL_GPIO_Init+0x130>
          break;
 8001722:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	2bff      	cmp	r3, #255	; 0xff
 8001728:	d801      	bhi.n	800172e <HAL_GPIO_Init+0x13a>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	e001      	b.n	8001732 <HAL_GPIO_Init+0x13e>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3304      	adds	r3, #4
 8001732:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	2bff      	cmp	r3, #255	; 0xff
 8001738:	d802      	bhi.n	8001740 <HAL_GPIO_Init+0x14c>
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	e002      	b.n	8001746 <HAL_GPIO_Init+0x152>
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	3b08      	subs	r3, #8
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	210f      	movs	r1, #15
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	fa01 f303 	lsl.w	r3, r1, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	401a      	ands	r2, r3
 8001758:	6a39      	ldr	r1, [r7, #32]
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	fa01 f303 	lsl.w	r3, r1, r3
 8001760:	431a      	orrs	r2, r3
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 80b1 	beq.w	80018d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001774:	4b4d      	ldr	r3, [pc, #308]	; (80018ac <HAL_GPIO_Init+0x2b8>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	4a4c      	ldr	r2, [pc, #304]	; (80018ac <HAL_GPIO_Init+0x2b8>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6193      	str	r3, [r2, #24]
 8001780:	4b4a      	ldr	r3, [pc, #296]	; (80018ac <HAL_GPIO_Init+0x2b8>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800178c:	4a48      	ldr	r2, [pc, #288]	; (80018b0 <HAL_GPIO_Init+0x2bc>)
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	089b      	lsrs	r3, r3, #2
 8001792:	3302      	adds	r3, #2
 8001794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001798:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	220f      	movs	r2, #15
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	4013      	ands	r3, r2
 80017ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a40      	ldr	r2, [pc, #256]	; (80018b4 <HAL_GPIO_Init+0x2c0>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d013      	beq.n	80017e0 <HAL_GPIO_Init+0x1ec>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a3f      	ldr	r2, [pc, #252]	; (80018b8 <HAL_GPIO_Init+0x2c4>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d00d      	beq.n	80017dc <HAL_GPIO_Init+0x1e8>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a3e      	ldr	r2, [pc, #248]	; (80018bc <HAL_GPIO_Init+0x2c8>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d007      	beq.n	80017d8 <HAL_GPIO_Init+0x1e4>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a3d      	ldr	r2, [pc, #244]	; (80018c0 <HAL_GPIO_Init+0x2cc>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d101      	bne.n	80017d4 <HAL_GPIO_Init+0x1e0>
 80017d0:	2303      	movs	r3, #3
 80017d2:	e006      	b.n	80017e2 <HAL_GPIO_Init+0x1ee>
 80017d4:	2304      	movs	r3, #4
 80017d6:	e004      	b.n	80017e2 <HAL_GPIO_Init+0x1ee>
 80017d8:	2302      	movs	r3, #2
 80017da:	e002      	b.n	80017e2 <HAL_GPIO_Init+0x1ee>
 80017dc:	2301      	movs	r3, #1
 80017de:	e000      	b.n	80017e2 <HAL_GPIO_Init+0x1ee>
 80017e0:	2300      	movs	r3, #0
 80017e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017e4:	f002 0203 	and.w	r2, r2, #3
 80017e8:	0092      	lsls	r2, r2, #2
 80017ea:	4093      	lsls	r3, r2
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017f2:	492f      	ldr	r1, [pc, #188]	; (80018b0 <HAL_GPIO_Init+0x2bc>)
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	089b      	lsrs	r3, r3, #2
 80017f8:	3302      	adds	r3, #2
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d006      	beq.n	800181a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800180c:	4b2d      	ldr	r3, [pc, #180]	; (80018c4 <HAL_GPIO_Init+0x2d0>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	492c      	ldr	r1, [pc, #176]	; (80018c4 <HAL_GPIO_Init+0x2d0>)
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	4313      	orrs	r3, r2
 8001816:	600b      	str	r3, [r1, #0]
 8001818:	e006      	b.n	8001828 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800181a:	4b2a      	ldr	r3, [pc, #168]	; (80018c4 <HAL_GPIO_Init+0x2d0>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	43db      	mvns	r3, r3
 8001822:	4928      	ldr	r1, [pc, #160]	; (80018c4 <HAL_GPIO_Init+0x2d0>)
 8001824:	4013      	ands	r3, r2
 8001826:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d006      	beq.n	8001842 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001834:	4b23      	ldr	r3, [pc, #140]	; (80018c4 <HAL_GPIO_Init+0x2d0>)
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	4922      	ldr	r1, [pc, #136]	; (80018c4 <HAL_GPIO_Init+0x2d0>)
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
 8001840:	e006      	b.n	8001850 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001842:	4b20      	ldr	r3, [pc, #128]	; (80018c4 <HAL_GPIO_Init+0x2d0>)
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	43db      	mvns	r3, r3
 800184a:	491e      	ldr	r1, [pc, #120]	; (80018c4 <HAL_GPIO_Init+0x2d0>)
 800184c:	4013      	ands	r3, r2
 800184e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d006      	beq.n	800186a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800185c:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <HAL_GPIO_Init+0x2d0>)
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	4918      	ldr	r1, [pc, #96]	; (80018c4 <HAL_GPIO_Init+0x2d0>)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	4313      	orrs	r3, r2
 8001866:	608b      	str	r3, [r1, #8]
 8001868:	e006      	b.n	8001878 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800186a:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <HAL_GPIO_Init+0x2d0>)
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	43db      	mvns	r3, r3
 8001872:	4914      	ldr	r1, [pc, #80]	; (80018c4 <HAL_GPIO_Init+0x2d0>)
 8001874:	4013      	ands	r3, r2
 8001876:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d021      	beq.n	80018c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <HAL_GPIO_Init+0x2d0>)
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	490e      	ldr	r1, [pc, #56]	; (80018c4 <HAL_GPIO_Init+0x2d0>)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	4313      	orrs	r3, r2
 800188e:	60cb      	str	r3, [r1, #12]
 8001890:	e021      	b.n	80018d6 <HAL_GPIO_Init+0x2e2>
 8001892:	bf00      	nop
 8001894:	10320000 	.word	0x10320000
 8001898:	10310000 	.word	0x10310000
 800189c:	10220000 	.word	0x10220000
 80018a0:	10210000 	.word	0x10210000
 80018a4:	10120000 	.word	0x10120000
 80018a8:	10110000 	.word	0x10110000
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40010000 	.word	0x40010000
 80018b4:	40010800 	.word	0x40010800
 80018b8:	40010c00 	.word	0x40010c00
 80018bc:	40011000 	.word	0x40011000
 80018c0:	40011400 	.word	0x40011400
 80018c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_GPIO_Init+0x304>)
 80018ca:	68da      	ldr	r2, [r3, #12]
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	43db      	mvns	r3, r3
 80018d0:	4909      	ldr	r1, [pc, #36]	; (80018f8 <HAL_GPIO_Init+0x304>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	3301      	adds	r3, #1
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	fa22 f303 	lsr.w	r3, r2, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f47f ae8e 	bne.w	8001608 <HAL_GPIO_Init+0x14>
  }
}
 80018ec:	bf00      	nop
 80018ee:	bf00      	nop
 80018f0:	372c      	adds	r7, #44	; 0x2c
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr
 80018f8:	40010400 	.word	0x40010400

080018fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	887b      	ldrh	r3, [r7, #2]
 800190e:	4013      	ands	r3, r2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d002      	beq.n	800191a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001914:	2301      	movs	r3, #1
 8001916:	73fb      	strb	r3, [r7, #15]
 8001918:	e001      	b.n	800191e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800191a:	2300      	movs	r3, #0
 800191c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800191e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr

0800192a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	460b      	mov	r3, r1
 8001934:	807b      	strh	r3, [r7, #2]
 8001936:	4613      	mov	r3, r2
 8001938:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800193a:	787b      	ldrb	r3, [r7, #1]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001940:	887a      	ldrh	r2, [r7, #2]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001946:	e003      	b.n	8001950 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001948:	887b      	ldrh	r3, [r7, #2]
 800194a:	041a      	lsls	r2, r3, #16
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	611a      	str	r2, [r3, #16]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr
	...

0800195c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e272      	b.n	8001e54 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 8087 	beq.w	8001a8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800197c:	4b92      	ldr	r3, [pc, #584]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	2b04      	cmp	r3, #4
 8001986:	d00c      	beq.n	80019a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001988:	4b8f      	ldr	r3, [pc, #572]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 030c 	and.w	r3, r3, #12
 8001990:	2b08      	cmp	r3, #8
 8001992:	d112      	bne.n	80019ba <HAL_RCC_OscConfig+0x5e>
 8001994:	4b8c      	ldr	r3, [pc, #560]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800199c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a0:	d10b      	bne.n	80019ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a2:	4b89      	ldr	r3, [pc, #548]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d06c      	beq.n	8001a88 <HAL_RCC_OscConfig+0x12c>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d168      	bne.n	8001a88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e24c      	b.n	8001e54 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c2:	d106      	bne.n	80019d2 <HAL_RCC_OscConfig+0x76>
 80019c4:	4b80      	ldr	r3, [pc, #512]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a7f      	ldr	r2, [pc, #508]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 80019ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	e02e      	b.n	8001a30 <HAL_RCC_OscConfig+0xd4>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10c      	bne.n	80019f4 <HAL_RCC_OscConfig+0x98>
 80019da:	4b7b      	ldr	r3, [pc, #492]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a7a      	ldr	r2, [pc, #488]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 80019e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	4b78      	ldr	r3, [pc, #480]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a77      	ldr	r2, [pc, #476]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	e01d      	b.n	8001a30 <HAL_RCC_OscConfig+0xd4>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0xbc>
 80019fe:	4b72      	ldr	r3, [pc, #456]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a71      	ldr	r2, [pc, #452]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	4b6f      	ldr	r3, [pc, #444]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a6e      	ldr	r2, [pc, #440]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e00b      	b.n	8001a30 <HAL_RCC_OscConfig+0xd4>
 8001a18:	4b6b      	ldr	r3, [pc, #428]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a6a      	ldr	r2, [pc, #424]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	4b68      	ldr	r3, [pc, #416]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a67      	ldr	r2, [pc, #412]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d013      	beq.n	8001a60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a38:	f7ff fbf0 	bl	800121c <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a40:	f7ff fbec 	bl	800121c <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b64      	cmp	r3, #100	; 0x64
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e200      	b.n	8001e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a52:	4b5d      	ldr	r3, [pc, #372]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0xe4>
 8001a5e:	e014      	b.n	8001a8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7ff fbdc 	bl	800121c <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a68:	f7ff fbd8 	bl	800121c <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b64      	cmp	r3, #100	; 0x64
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e1ec      	b.n	8001e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a7a:	4b53      	ldr	r3, [pc, #332]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0x10c>
 8001a86:	e000      	b.n	8001a8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d063      	beq.n	8001b5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a96:	4b4c      	ldr	r3, [pc, #304]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00b      	beq.n	8001aba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001aa2:	4b49      	ldr	r3, [pc, #292]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d11c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x18c>
 8001aae:	4b46      	ldr	r3, [pc, #280]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d116      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aba:	4b43      	ldr	r3, [pc, #268]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d005      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x176>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d001      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e1c0      	b.n	8001e54 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad2:	4b3d      	ldr	r3, [pc, #244]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	4939      	ldr	r1, [pc, #228]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae6:	e03a      	b.n	8001b5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d020      	beq.n	8001b32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af0:	4b36      	ldr	r3, [pc, #216]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af6:	f7ff fb91 	bl	800121c <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001afe:	f7ff fb8d 	bl	800121c <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e1a1      	b.n	8001e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b10:	4b2d      	ldr	r3, [pc, #180]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f0      	beq.n	8001afe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1c:	4b2a      	ldr	r3, [pc, #168]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4927      	ldr	r1, [pc, #156]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	600b      	str	r3, [r1, #0]
 8001b30:	e015      	b.n	8001b5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b32:	4b26      	ldr	r3, [pc, #152]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b38:	f7ff fb70 	bl	800121c <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b40:	f7ff fb6c 	bl	800121c <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e180      	b.n	8001e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b52:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f0      	bne.n	8001b40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d03a      	beq.n	8001be0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d019      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b72:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b78:	f7ff fb50 	bl	800121c <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b80:	f7ff fb4c 	bl	800121c <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e160      	b.n	8001e54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b92:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f0      	beq.n	8001b80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b9e:	2001      	movs	r0, #1
 8001ba0:	f000 fad8 	bl	8002154 <RCC_Delay>
 8001ba4:	e01c      	b.n	8001be0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bac:	f7ff fb36 	bl	800121c <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb2:	e00f      	b.n	8001bd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fb32 	bl	800121c <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d908      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e146      	b.n	8001e54 <HAL_RCC_OscConfig+0x4f8>
 8001bc6:	bf00      	nop
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	42420000 	.word	0x42420000
 8001bd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd4:	4b92      	ldr	r3, [pc, #584]	; (8001e20 <HAL_RCC_OscConfig+0x4c4>)
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1e9      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 80a6 	beq.w	8001d3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bf2:	4b8b      	ldr	r3, [pc, #556]	; (8001e20 <HAL_RCC_OscConfig+0x4c4>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10d      	bne.n	8001c1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	4b88      	ldr	r3, [pc, #544]	; (8001e20 <HAL_RCC_OscConfig+0x4c4>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	4a87      	ldr	r2, [pc, #540]	; (8001e20 <HAL_RCC_OscConfig+0x4c4>)
 8001c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c08:	61d3      	str	r3, [r2, #28]
 8001c0a:	4b85      	ldr	r3, [pc, #532]	; (8001e20 <HAL_RCC_OscConfig+0x4c4>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c12:	60bb      	str	r3, [r7, #8]
 8001c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c16:	2301      	movs	r3, #1
 8001c18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1a:	4b82      	ldr	r3, [pc, #520]	; (8001e24 <HAL_RCC_OscConfig+0x4c8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d118      	bne.n	8001c58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c26:	4b7f      	ldr	r3, [pc, #508]	; (8001e24 <HAL_RCC_OscConfig+0x4c8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a7e      	ldr	r2, [pc, #504]	; (8001e24 <HAL_RCC_OscConfig+0x4c8>)
 8001c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c32:	f7ff faf3 	bl	800121c <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c3a:	f7ff faef 	bl	800121c <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b64      	cmp	r3, #100	; 0x64
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e103      	b.n	8001e54 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4c:	4b75      	ldr	r3, [pc, #468]	; (8001e24 <HAL_RCC_OscConfig+0x4c8>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0f0      	beq.n	8001c3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d106      	bne.n	8001c6e <HAL_RCC_OscConfig+0x312>
 8001c60:	4b6f      	ldr	r3, [pc, #444]	; (8001e20 <HAL_RCC_OscConfig+0x4c4>)
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	4a6e      	ldr	r2, [pc, #440]	; (8001e20 <HAL_RCC_OscConfig+0x4c4>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6213      	str	r3, [r2, #32]
 8001c6c:	e02d      	b.n	8001cca <HAL_RCC_OscConfig+0x36e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10c      	bne.n	8001c90 <HAL_RCC_OscConfig+0x334>
 8001c76:	4b6a      	ldr	r3, [pc, #424]	; (8001e20 <HAL_RCC_OscConfig+0x4c4>)
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	4a69      	ldr	r2, [pc, #420]	; (8001e20 <HAL_RCC_OscConfig+0x4c4>)
 8001c7c:	f023 0301 	bic.w	r3, r3, #1
 8001c80:	6213      	str	r3, [r2, #32]
 8001c82:	4b67      	ldr	r3, [pc, #412]	; (8001e20 <HAL_RCC_OscConfig+0x4c4>)
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	4a66      	ldr	r2, [pc, #408]	; (8001e20 <HAL_RCC_OscConfig+0x4c4>)
 8001c88:	f023 0304 	bic.w	r3, r3, #4
 8001c8c:	6213      	str	r3, [r2, #32]
 8001c8e:	e01c      	b.n	8001cca <HAL_RCC_OscConfig+0x36e>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	2b05      	cmp	r3, #5
 8001c96:	d10c      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x356>
 8001c98:	4b61      	ldr	r3, [pc, #388]	; (8001e20 <HAL_RCC_OscConfig+0x4c4>)
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	4a60      	ldr	r2, [pc, #384]	; (8001e20 <HAL_RCC_OscConfig+0x4c4>)
 8001c9e:	f043 0304 	orr.w	r3, r3, #4
 8001ca2:	6213      	str	r3, [r2, #32]
 8001ca4:	4b5e      	ldr	r3, [pc, #376]	; (8001e20 <HAL_RCC_OscConfig+0x4c4>)
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	4a5d      	ldr	r2, [pc, #372]	; (8001e20 <HAL_RCC_OscConfig+0x4c4>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6213      	str	r3, [r2, #32]
 8001cb0:	e00b      	b.n	8001cca <HAL_RCC_OscConfig+0x36e>
 8001cb2:	4b5b      	ldr	r3, [pc, #364]	; (8001e20 <HAL_RCC_OscConfig+0x4c4>)
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	4a5a      	ldr	r2, [pc, #360]	; (8001e20 <HAL_RCC_OscConfig+0x4c4>)
 8001cb8:	f023 0301 	bic.w	r3, r3, #1
 8001cbc:	6213      	str	r3, [r2, #32]
 8001cbe:	4b58      	ldr	r3, [pc, #352]	; (8001e20 <HAL_RCC_OscConfig+0x4c4>)
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	4a57      	ldr	r2, [pc, #348]	; (8001e20 <HAL_RCC_OscConfig+0x4c4>)
 8001cc4:	f023 0304 	bic.w	r3, r3, #4
 8001cc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d015      	beq.n	8001cfe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd2:	f7ff faa3 	bl	800121c <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd8:	e00a      	b.n	8001cf0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cda:	f7ff fa9f 	bl	800121c <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e0b1      	b.n	8001e54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf0:	4b4b      	ldr	r3, [pc, #300]	; (8001e20 <HAL_RCC_OscConfig+0x4c4>)
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0ee      	beq.n	8001cda <HAL_RCC_OscConfig+0x37e>
 8001cfc:	e014      	b.n	8001d28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfe:	f7ff fa8d 	bl	800121c <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d04:	e00a      	b.n	8001d1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d06:	f7ff fa89 	bl	800121c <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e09b      	b.n	8001e54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d1c:	4b40      	ldr	r3, [pc, #256]	; (8001e20 <HAL_RCC_OscConfig+0x4c4>)
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1ee      	bne.n	8001d06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d28:	7dfb      	ldrb	r3, [r7, #23]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d105      	bne.n	8001d3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2e:	4b3c      	ldr	r3, [pc, #240]	; (8001e20 <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	4a3b      	ldr	r2, [pc, #236]	; (8001e20 <HAL_RCC_OscConfig+0x4c4>)
 8001d34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 8087 	beq.w	8001e52 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d44:	4b36      	ldr	r3, [pc, #216]	; (8001e20 <HAL_RCC_OscConfig+0x4c4>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 030c 	and.w	r3, r3, #12
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d061      	beq.n	8001e14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d146      	bne.n	8001de6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d58:	4b33      	ldr	r3, [pc, #204]	; (8001e28 <HAL_RCC_OscConfig+0x4cc>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5e:	f7ff fa5d 	bl	800121c <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d66:	f7ff fa59 	bl	800121c <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e06d      	b.n	8001e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d78:	4b29      	ldr	r3, [pc, #164]	; (8001e20 <HAL_RCC_OscConfig+0x4c4>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1f0      	bne.n	8001d66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d8c:	d108      	bne.n	8001da0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d8e:	4b24      	ldr	r3, [pc, #144]	; (8001e20 <HAL_RCC_OscConfig+0x4c4>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	4921      	ldr	r1, [pc, #132]	; (8001e20 <HAL_RCC_OscConfig+0x4c4>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001da0:	4b1f      	ldr	r3, [pc, #124]	; (8001e20 <HAL_RCC_OscConfig+0x4c4>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a19      	ldr	r1, [r3, #32]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	430b      	orrs	r3, r1
 8001db2:	491b      	ldr	r1, [pc, #108]	; (8001e20 <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001db8:	4b1b      	ldr	r3, [pc, #108]	; (8001e28 <HAL_RCC_OscConfig+0x4cc>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbe:	f7ff fa2d 	bl	800121c <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc6:	f7ff fa29 	bl	800121c <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e03d      	b.n	8001e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dd8:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <HAL_RCC_OscConfig+0x4c4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x46a>
 8001de4:	e035      	b.n	8001e52 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <HAL_RCC_OscConfig+0x4cc>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dec:	f7ff fa16 	bl	800121c <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df4:	f7ff fa12 	bl	800121c <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e026      	b.n	8001e54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_RCC_OscConfig+0x4c4>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f0      	bne.n	8001df4 <HAL_RCC_OscConfig+0x498>
 8001e12:	e01e      	b.n	8001e52 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d107      	bne.n	8001e2c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e019      	b.n	8001e54 <HAL_RCC_OscConfig+0x4f8>
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40007000 	.word	0x40007000
 8001e28:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <HAL_RCC_OscConfig+0x500>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d106      	bne.n	8001e4e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d001      	beq.n	8001e52 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40021000 	.word	0x40021000

08001e60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e0d0      	b.n	8002016 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e74:	4b6a      	ldr	r3, [pc, #424]	; (8002020 <HAL_RCC_ClockConfig+0x1c0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d910      	bls.n	8001ea4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e82:	4b67      	ldr	r3, [pc, #412]	; (8002020 <HAL_RCC_ClockConfig+0x1c0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 0207 	bic.w	r2, r3, #7
 8001e8a:	4965      	ldr	r1, [pc, #404]	; (8002020 <HAL_RCC_ClockConfig+0x1c0>)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e92:	4b63      	ldr	r3, [pc, #396]	; (8002020 <HAL_RCC_ClockConfig+0x1c0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0b8      	b.n	8002016 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d020      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ebc:	4b59      	ldr	r3, [pc, #356]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	4a58      	ldr	r2, [pc, #352]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ec6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0308 	and.w	r3, r3, #8
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ed4:	4b53      	ldr	r3, [pc, #332]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	4a52      	ldr	r2, [pc, #328]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001eda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ede:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee0:	4b50      	ldr	r3, [pc, #320]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	494d      	ldr	r1, [pc, #308]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d040      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d107      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f06:	4b47      	ldr	r3, [pc, #284]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d115      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e07f      	b.n	8002016 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d107      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1e:	4b41      	ldr	r3, [pc, #260]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d109      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e073      	b.n	8002016 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2e:	4b3d      	ldr	r3, [pc, #244]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e06b      	b.n	8002016 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f3e:	4b39      	ldr	r3, [pc, #228]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f023 0203 	bic.w	r2, r3, #3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	4936      	ldr	r1, [pc, #216]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f50:	f7ff f964 	bl	800121c <HAL_GetTick>
 8001f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f56:	e00a      	b.n	8001f6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f58:	f7ff f960 	bl	800121c <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e053      	b.n	8002016 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6e:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 020c 	and.w	r2, r3, #12
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d1eb      	bne.n	8001f58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f80:	4b27      	ldr	r3, [pc, #156]	; (8002020 <HAL_RCC_ClockConfig+0x1c0>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d210      	bcs.n	8001fb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8e:	4b24      	ldr	r3, [pc, #144]	; (8002020 <HAL_RCC_ClockConfig+0x1c0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 0207 	bic.w	r2, r3, #7
 8001f96:	4922      	ldr	r1, [pc, #136]	; (8002020 <HAL_RCC_ClockConfig+0x1c0>)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9e:	4b20      	ldr	r3, [pc, #128]	; (8002020 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e032      	b.n	8002016 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d008      	beq.n	8001fce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fbc:	4b19      	ldr	r3, [pc, #100]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	4916      	ldr	r1, [pc, #88]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d009      	beq.n	8001fee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fda:	4b12      	ldr	r3, [pc, #72]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	490e      	ldr	r1, [pc, #56]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fee:	f000 f821 	bl	8002034 <HAL_RCC_GetSysClockFreq>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	091b      	lsrs	r3, r3, #4
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	490a      	ldr	r1, [pc, #40]	; (8002028 <HAL_RCC_ClockConfig+0x1c8>)
 8002000:	5ccb      	ldrb	r3, [r1, r3]
 8002002:	fa22 f303 	lsr.w	r3, r2, r3
 8002006:	4a09      	ldr	r2, [pc, #36]	; (800202c <HAL_RCC_ClockConfig+0x1cc>)
 8002008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <HAL_RCC_ClockConfig+0x1d0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff f8c2 	bl	8001198 <HAL_InitTick>

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40022000 	.word	0x40022000
 8002024:	40021000 	.word	0x40021000
 8002028:	080062f4 	.word	0x080062f4
 800202c:	20000000 	.word	0x20000000
 8002030:	20000004 	.word	0x20000004

08002034 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002034:	b490      	push	{r4, r7}
 8002036:	b08a      	sub	sp, #40	; 0x28
 8002038:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800203a:	4b29      	ldr	r3, [pc, #164]	; (80020e0 <HAL_RCC_GetSysClockFreq+0xac>)
 800203c:	1d3c      	adds	r4, r7, #4
 800203e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002040:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002044:	f240 2301 	movw	r3, #513	; 0x201
 8002048:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
 800204e:	2300      	movs	r3, #0
 8002050:	61bb      	str	r3, [r7, #24]
 8002052:	2300      	movs	r3, #0
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800205a:	2300      	movs	r3, #0
 800205c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800205e:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	2b04      	cmp	r3, #4
 800206c:	d002      	beq.n	8002074 <HAL_RCC_GetSysClockFreq+0x40>
 800206e:	2b08      	cmp	r3, #8
 8002070:	d003      	beq.n	800207a <HAL_RCC_GetSysClockFreq+0x46>
 8002072:	e02b      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002074:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002076:	623b      	str	r3, [r7, #32]
      break;
 8002078:	e02b      	b.n	80020d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	0c9b      	lsrs	r3, r3, #18
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	3328      	adds	r3, #40	; 0x28
 8002084:	443b      	add	r3, r7
 8002086:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800208a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d012      	beq.n	80020bc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002096:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	0c5b      	lsrs	r3, r3, #17
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	3328      	adds	r3, #40	; 0x28
 80020a2:	443b      	add	r3, r7
 80020a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	4a0e      	ldr	r2, [pc, #56]	; (80020e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020ae:	fb03 f202 	mul.w	r2, r3, r2
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ba:	e004      	b.n	80020c6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	4a0b      	ldr	r2, [pc, #44]	; (80020ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80020c0:	fb02 f303 	mul.w	r3, r2, r3
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	623b      	str	r3, [r7, #32]
      break;
 80020ca:	e002      	b.n	80020d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020ce:	623b      	str	r3, [r7, #32]
      break;
 80020d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020d2:	6a3b      	ldr	r3, [r7, #32]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3728      	adds	r7, #40	; 0x28
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc90      	pop	{r4, r7}
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	080062c8 	.word	0x080062c8
 80020e4:	40021000 	.word	0x40021000
 80020e8:	007a1200 	.word	0x007a1200
 80020ec:	003d0900 	.word	0x003d0900

080020f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020f4:	4b02      	ldr	r3, [pc, #8]	; (8002100 <HAL_RCC_GetHCLKFreq+0x10>)
 80020f6:	681b      	ldr	r3, [r3, #0]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr
 8002100:	20000000 	.word	0x20000000

08002104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002108:	f7ff fff2 	bl	80020f0 <HAL_RCC_GetHCLKFreq>
 800210c:	4602      	mov	r2, r0
 800210e:	4b05      	ldr	r3, [pc, #20]	; (8002124 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	0a1b      	lsrs	r3, r3, #8
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	4903      	ldr	r1, [pc, #12]	; (8002128 <HAL_RCC_GetPCLK1Freq+0x24>)
 800211a:	5ccb      	ldrb	r3, [r1, r3]
 800211c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002120:	4618      	mov	r0, r3
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40021000 	.word	0x40021000
 8002128:	08006304 	.word	0x08006304

0800212c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002130:	f7ff ffde 	bl	80020f0 <HAL_RCC_GetHCLKFreq>
 8002134:	4602      	mov	r2, r0
 8002136:	4b05      	ldr	r3, [pc, #20]	; (800214c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	0adb      	lsrs	r3, r3, #11
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	4903      	ldr	r1, [pc, #12]	; (8002150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002142:	5ccb      	ldrb	r3, [r1, r3]
 8002144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002148:	4618      	mov	r0, r3
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40021000 	.word	0x40021000
 8002150:	08006304 	.word	0x08006304

08002154 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800215c:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <RCC_Delay+0x34>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0a      	ldr	r2, [pc, #40]	; (800218c <RCC_Delay+0x38>)
 8002162:	fba2 2303 	umull	r2, r3, r2, r3
 8002166:	0a5b      	lsrs	r3, r3, #9
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	fb02 f303 	mul.w	r3, r2, r3
 800216e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002170:	bf00      	nop
  }
  while (Delay --);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1e5a      	subs	r2, r3, #1
 8002176:	60fa      	str	r2, [r7, #12]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1f9      	bne.n	8002170 <RCC_Delay+0x1c>
}
 800217c:	bf00      	nop
 800217e:	bf00      	nop
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	20000000 	.word	0x20000000
 800218c:	10624dd3 	.word	0x10624dd3

08002190 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e076      	b.n	8002290 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d108      	bne.n	80021bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021b2:	d009      	beq.n	80021c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	61da      	str	r2, [r3, #28]
 80021ba:	e005      	b.n	80021c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d106      	bne.n	80021e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7fe fdb8 	bl	8000d58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2202      	movs	r2, #2
 80021ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002210:	431a      	orrs	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	431a      	orrs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800224c:	ea42 0103 	orr.w	r1, r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002254:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	430a      	orrs	r2, r1
 800225e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	0c1a      	lsrs	r2, r3, #16
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f002 0204 	and.w	r2, r2, #4
 800226e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	69da      	ldr	r2, [r3, #28]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800227e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	603b      	str	r3, [r7, #0]
 80022a4:	4613      	mov	r3, r2
 80022a6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022a8:	2300      	movs	r3, #0
 80022aa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_SPI_Transmit+0x22>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e126      	b.n	8002508 <HAL_SPI_Transmit+0x270>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022c2:	f7fe ffab 	bl	800121c <HAL_GetTick>
 80022c6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80022c8:	88fb      	ldrh	r3, [r7, #6]
 80022ca:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d002      	beq.n	80022de <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80022d8:	2302      	movs	r3, #2
 80022da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80022dc:	e10b      	b.n	80024f6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d002      	beq.n	80022ea <HAL_SPI_Transmit+0x52>
 80022e4:	88fb      	ldrh	r3, [r7, #6]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d102      	bne.n	80022f0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80022ee:	e102      	b.n	80024f6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2203      	movs	r2, #3
 80022f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	88fa      	ldrh	r2, [r7, #6]
 8002308:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	88fa      	ldrh	r2, [r7, #6]
 800230e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002336:	d10f      	bne.n	8002358 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002346:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002356:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002362:	2b40      	cmp	r3, #64	; 0x40
 8002364:	d007      	beq.n	8002376 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002374:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800237e:	d14b      	bne.n	8002418 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d002      	beq.n	800238e <HAL_SPI_Transmit+0xf6>
 8002388:	8afb      	ldrh	r3, [r7, #22]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d13e      	bne.n	800240c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	881a      	ldrh	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	1c9a      	adds	r2, r3, #2
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80023b2:	e02b      	b.n	800240c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d112      	bne.n	80023e8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	881a      	ldrh	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	1c9a      	adds	r2, r3, #2
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023dc:	b29b      	uxth	r3, r3
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	86da      	strh	r2, [r3, #54]	; 0x36
 80023e6:	e011      	b.n	800240c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023e8:	f7fe ff18 	bl	800121c <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d803      	bhi.n	8002400 <HAL_SPI_Transmit+0x168>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fe:	d102      	bne.n	8002406 <HAL_SPI_Transmit+0x16e>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d102      	bne.n	800240c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	77fb      	strb	r3, [r7, #31]
          goto error;
 800240a:	e074      	b.n	80024f6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002410:	b29b      	uxth	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1ce      	bne.n	80023b4 <HAL_SPI_Transmit+0x11c>
 8002416:	e04c      	b.n	80024b2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d002      	beq.n	8002426 <HAL_SPI_Transmit+0x18e>
 8002420:	8afb      	ldrh	r3, [r7, #22]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d140      	bne.n	80024a8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	330c      	adds	r3, #12
 8002430:	7812      	ldrb	r2, [r2, #0]
 8002432:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002442:	b29b      	uxth	r3, r3
 8002444:	3b01      	subs	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800244c:	e02c      	b.n	80024a8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b02      	cmp	r3, #2
 800245a:	d113      	bne.n	8002484 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	330c      	adds	r3, #12
 8002466:	7812      	ldrb	r2, [r2, #0]
 8002468:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002478:	b29b      	uxth	r3, r3
 800247a:	3b01      	subs	r3, #1
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	86da      	strh	r2, [r3, #54]	; 0x36
 8002482:	e011      	b.n	80024a8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002484:	f7fe feca 	bl	800121c <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d803      	bhi.n	800249c <HAL_SPI_Transmit+0x204>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800249a:	d102      	bne.n	80024a2 <HAL_SPI_Transmit+0x20a>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d102      	bne.n	80024a8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80024a6:	e026      	b.n	80024f6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1cd      	bne.n	800244e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	6839      	ldr	r1, [r7, #0]
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 fa62 	bl	8002980 <SPI_EndRxTxTransaction>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d002      	beq.n	80024c8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2220      	movs	r2, #32
 80024c6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10a      	bne.n	80024e6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024d0:	2300      	movs	r3, #0
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	613b      	str	r3, [r7, #16]
 80024e4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	77fb      	strb	r3, [r7, #31]
 80024f2:	e000      	b.n	80024f6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80024f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002506:	7ffb      	ldrb	r3, [r7, #31]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3720      	adds	r7, #32
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08c      	sub	sp, #48	; 0x30
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
 800251c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800251e:	2301      	movs	r3, #1
 8002520:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800252e:	2b01      	cmp	r3, #1
 8002530:	d101      	bne.n	8002536 <HAL_SPI_TransmitReceive+0x26>
 8002532:	2302      	movs	r3, #2
 8002534:	e18a      	b.n	800284c <HAL_SPI_TransmitReceive+0x33c>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800253e:	f7fe fe6d 	bl	800121c <HAL_GetTick>
 8002542:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800254a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002554:	887b      	ldrh	r3, [r7, #2]
 8002556:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002558:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800255c:	2b01      	cmp	r3, #1
 800255e:	d00f      	beq.n	8002580 <HAL_SPI_TransmitReceive+0x70>
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002566:	d107      	bne.n	8002578 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d103      	bne.n	8002578 <HAL_SPI_TransmitReceive+0x68>
 8002570:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002574:	2b04      	cmp	r3, #4
 8002576:	d003      	beq.n	8002580 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002578:	2302      	movs	r3, #2
 800257a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800257e:	e15b      	b.n	8002838 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d005      	beq.n	8002592 <HAL_SPI_TransmitReceive+0x82>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d002      	beq.n	8002592 <HAL_SPI_TransmitReceive+0x82>
 800258c:	887b      	ldrh	r3, [r7, #2]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d103      	bne.n	800259a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002598:	e14e      	b.n	8002838 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d003      	beq.n	80025ae <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2205      	movs	r2, #5
 80025aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	887a      	ldrh	r2, [r7, #2]
 80025be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	887a      	ldrh	r2, [r7, #2]
 80025c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	887a      	ldrh	r2, [r7, #2]
 80025d0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	887a      	ldrh	r2, [r7, #2]
 80025d6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ee:	2b40      	cmp	r3, #64	; 0x40
 80025f0:	d007      	beq.n	8002602 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002600:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800260a:	d178      	bne.n	80026fe <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <HAL_SPI_TransmitReceive+0x10a>
 8002614:	8b7b      	ldrh	r3, [r7, #26]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d166      	bne.n	80026e8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	881a      	ldrh	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	1c9a      	adds	r2, r3, #2
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002634:	b29b      	uxth	r3, r3
 8002636:	3b01      	subs	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800263e:	e053      	b.n	80026e8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b02      	cmp	r3, #2
 800264c:	d11b      	bne.n	8002686 <HAL_SPI_TransmitReceive+0x176>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002652:	b29b      	uxth	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d016      	beq.n	8002686 <HAL_SPI_TransmitReceive+0x176>
 8002658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265a:	2b01      	cmp	r3, #1
 800265c:	d113      	bne.n	8002686 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	881a      	ldrh	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	1c9a      	adds	r2, r3, #2
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002678:	b29b      	uxth	r3, r3
 800267a:	3b01      	subs	r3, #1
 800267c:	b29a      	uxth	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b01      	cmp	r3, #1
 8002692:	d119      	bne.n	80026c8 <HAL_SPI_TransmitReceive+0x1b8>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d014      	beq.n	80026c8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68da      	ldr	r2, [r3, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a8:	b292      	uxth	r2, r2
 80026aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b0:	1c9a      	adds	r2, r3, #2
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	3b01      	subs	r3, #1
 80026be:	b29a      	uxth	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026c4:	2301      	movs	r3, #1
 80026c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80026c8:	f7fe fda8 	bl	800121c <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d807      	bhi.n	80026e8 <HAL_SPI_TransmitReceive+0x1d8>
 80026d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026de:	d003      	beq.n	80026e8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80026e6:	e0a7      	b.n	8002838 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1a6      	bne.n	8002640 <HAL_SPI_TransmitReceive+0x130>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1a1      	bne.n	8002640 <HAL_SPI_TransmitReceive+0x130>
 80026fc:	e07c      	b.n	80027f8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <HAL_SPI_TransmitReceive+0x1fc>
 8002706:	8b7b      	ldrh	r3, [r7, #26]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d16b      	bne.n	80027e4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	330c      	adds	r3, #12
 8002716:	7812      	ldrb	r2, [r2, #0]
 8002718:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	1c5a      	adds	r2, r3, #1
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002728:	b29b      	uxth	r3, r3
 800272a:	3b01      	subs	r3, #1
 800272c:	b29a      	uxth	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002732:	e057      	b.n	80027e4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b02      	cmp	r3, #2
 8002740:	d11c      	bne.n	800277c <HAL_SPI_TransmitReceive+0x26c>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002746:	b29b      	uxth	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d017      	beq.n	800277c <HAL_SPI_TransmitReceive+0x26c>
 800274c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274e:	2b01      	cmp	r3, #1
 8002750:	d114      	bne.n	800277c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	330c      	adds	r3, #12
 800275c:	7812      	ldrb	r2, [r2, #0]
 800275e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002764:	1c5a      	adds	r2, r3, #1
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800276e:	b29b      	uxth	r3, r3
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b01      	cmp	r3, #1
 8002788:	d119      	bne.n	80027be <HAL_SPI_TransmitReceive+0x2ae>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800278e:	b29b      	uxth	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	d014      	beq.n	80027be <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a6:	1c5a      	adds	r2, r3, #1
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027ba:	2301      	movs	r3, #1
 80027bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80027be:	f7fe fd2d 	bl	800121c <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d803      	bhi.n	80027d6 <HAL_SPI_TransmitReceive+0x2c6>
 80027ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d4:	d102      	bne.n	80027dc <HAL_SPI_TransmitReceive+0x2cc>
 80027d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d103      	bne.n	80027e4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80027e2:	e029      	b.n	8002838 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1a2      	bne.n	8002734 <HAL_SPI_TransmitReceive+0x224>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d19d      	bne.n	8002734 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 f8bf 	bl	8002980 <SPI_EndRxTxTransaction>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d006      	beq.n	8002816 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2220      	movs	r2, #32
 8002812:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002814:	e010      	b.n	8002838 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10b      	bne.n	8002836 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	e000      	b.n	8002838 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002836:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002848:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800284c:	4618      	mov	r0, r3
 800284e:	3730      	adds	r7, #48	; 0x30
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002862:	b2db      	uxtb	r3, r3
}
 8002864:	4618      	mov	r0, r3
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr
	...

08002870 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	603b      	str	r3, [r7, #0]
 800287c:	4613      	mov	r3, r2
 800287e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002880:	f7fe fccc 	bl	800121c <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002888:	1a9b      	subs	r3, r3, r2
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	4413      	add	r3, r2
 800288e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002890:	f7fe fcc4 	bl	800121c <HAL_GetTick>
 8002894:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002896:	4b39      	ldr	r3, [pc, #228]	; (800297c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	015b      	lsls	r3, r3, #5
 800289c:	0d1b      	lsrs	r3, r3, #20
 800289e:	69fa      	ldr	r2, [r7, #28]
 80028a0:	fb02 f303 	mul.w	r3, r2, r3
 80028a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028a6:	e054      	b.n	8002952 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ae:	d050      	beq.n	8002952 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028b0:	f7fe fcb4 	bl	800121c <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	69fa      	ldr	r2, [r7, #28]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d902      	bls.n	80028c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d13d      	bne.n	8002942 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028de:	d111      	bne.n	8002904 <SPI_WaitFlagStateUntilTimeout+0x94>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028e8:	d004      	beq.n	80028f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f2:	d107      	bne.n	8002904 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002902:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800290c:	d10f      	bne.n	800292e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800292c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e017      	b.n	8002972 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002948:	2300      	movs	r3, #0
 800294a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	3b01      	subs	r3, #1
 8002950:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	4013      	ands	r3, r2
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	429a      	cmp	r2, r3
 8002960:	bf0c      	ite	eq
 8002962:	2301      	moveq	r3, #1
 8002964:	2300      	movne	r3, #0
 8002966:	b2db      	uxtb	r3, r3
 8002968:	461a      	mov	r2, r3
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	429a      	cmp	r2, r3
 800296e:	d19b      	bne.n	80028a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3720      	adds	r7, #32
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000000 	.word	0x20000000

08002980 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af02      	add	r7, sp, #8
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2200      	movs	r2, #0
 8002994:	2180      	movs	r1, #128	; 0x80
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f7ff ff6a 	bl	8002870 <SPI_WaitFlagStateUntilTimeout>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d007      	beq.n	80029b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a6:	f043 0220 	orr.w	r2, r3, #32
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e000      	b.n	80029b4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e03f      	b.n	8002a4e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7fe fa02 	bl	8000dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2224      	movs	r2, #36	; 0x24
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68da      	ldr	r2, [r3, #12]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 fcc9 	bl	8003398 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695a      	ldr	r2, [r3, #20]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b08a      	sub	sp, #40	; 0x28
 8002a5a:	af02      	add	r7, sp, #8
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	603b      	str	r3, [r7, #0]
 8002a62:	4613      	mov	r3, r2
 8002a64:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b20      	cmp	r3, #32
 8002a74:	d17c      	bne.n	8002b70 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d002      	beq.n	8002a82 <HAL_UART_Transmit+0x2c>
 8002a7c:	88fb      	ldrh	r3, [r7, #6]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e075      	b.n	8002b72 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d101      	bne.n	8002a94 <HAL_UART_Transmit+0x3e>
 8002a90:	2302      	movs	r3, #2
 8002a92:	e06e      	b.n	8002b72 <HAL_UART_Transmit+0x11c>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2221      	movs	r2, #33	; 0x21
 8002aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002aaa:	f7fe fbb7 	bl	800121c <HAL_GetTick>
 8002aae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	88fa      	ldrh	r2, [r7, #6]
 8002ab4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	88fa      	ldrh	r2, [r7, #6]
 8002aba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ac4:	d108      	bne.n	8002ad8 <HAL_UART_Transmit+0x82>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d104      	bne.n	8002ad8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	61bb      	str	r3, [r7, #24]
 8002ad6:	e003      	b.n	8002ae0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002adc:	2300      	movs	r3, #0
 8002ade:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ae8:	e02a      	b.n	8002b40 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	2200      	movs	r2, #0
 8002af2:	2180      	movs	r1, #128	; 0x80
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 fa7b 	bl	8002ff0 <UART_WaitOnFlagUntilTimeout>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e036      	b.n	8002b72 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10b      	bne.n	8002b22 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	3302      	adds	r3, #2
 8002b1e:	61bb      	str	r3, [r7, #24]
 8002b20:	e007      	b.n	8002b32 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	781a      	ldrb	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1cf      	bne.n	8002aea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2200      	movs	r2, #0
 8002b52:	2140      	movs	r1, #64	; 0x40
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 fa4b 	bl	8002ff0 <UART_WaitOnFlagUntilTimeout>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e006      	b.n	8002b72 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2220      	movs	r2, #32
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	e000      	b.n	8002b72 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b70:	2302      	movs	r3, #2
  }
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3720      	adds	r7, #32
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b084      	sub	sp, #16
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	60f8      	str	r0, [r7, #12]
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	4613      	mov	r3, r2
 8002b86:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b20      	cmp	r3, #32
 8002b92:	d11d      	bne.n	8002bd0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <HAL_UART_Receive_IT+0x26>
 8002b9a:	88fb      	ldrh	r3, [r7, #6]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e016      	b.n	8002bd2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_UART_Receive_IT+0x38>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e00f      	b.n	8002bd2 <HAL_UART_Receive_IT+0x58>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002bc0:	88fb      	ldrh	r3, [r7, #6]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 fa5c 	bl	8003084 <UART_Start_Receive_IT>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	e000      	b.n	8002bd2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002bd0:	2302      	movs	r3, #2
  }
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b086      	sub	sp, #24
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	4613      	mov	r3, r2
 8002be6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	d13c      	bne.n	8002c6e <HAL_UARTEx_ReceiveToIdle_IT+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d002      	beq.n	8002c00 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e035      	b.n	8002c70 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
    }

    __HAL_LOCK(huart);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d101      	bne.n	8002c12 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e02e      	b.n	8002c70 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8002c20:	88fb      	ldrh	r3, [r7, #6]
 8002c22:	461a      	mov	r2, r3
 8002c24:	68b9      	ldr	r1, [r7, #8]
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 fa2c 	bl	8003084 <UART_Start_Receive_IT>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002c30:	7dfb      	ldrb	r3, [r7, #23]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d119      	bne.n	8002c6a <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d113      	bne.n	8002c66 <HAL_UARTEx_ReceiveToIdle_IT+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c3e:	2300      	movs	r3, #0
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68da      	ldr	r2, [r3, #12]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0210 	orr.w	r2, r2, #16
 8002c62:	60da      	str	r2, [r3, #12]
 8002c64:	e001      	b.n	8002c6a <HAL_UARTEx_ReceiveToIdle_IT+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8002c6a:	7dfb      	ldrb	r3, [r7, #23]
 8002c6c:	e000      	b.n	8002c70 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  }
  else
  {
    return HAL_BUSY;
 8002c6e:	2302      	movs	r3, #2
  }
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08a      	sub	sp, #40	; 0x28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10d      	bne.n	8002cca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	f003 0320 	and.w	r3, r3, #32
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_UART_IRQHandler+0x52>
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	f003 0320 	and.w	r3, r3, #32
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 fabe 	bl	8003244 <UART_Receive_IT>
      return;
 8002cc8:	e17b      	b.n	8002fc2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 80b1 	beq.w	8002e34 <HAL_UART_IRQHandler+0x1bc>
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d105      	bne.n	8002ce8 <HAL_UART_IRQHandler+0x70>
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 80a6 	beq.w	8002e34 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00a      	beq.n	8002d08 <HAL_UART_IRQHandler+0x90>
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	f043 0201 	orr.w	r2, r3, #1
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <HAL_UART_IRQHandler+0xb0>
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	f043 0202 	orr.w	r2, r3, #2
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <HAL_UART_IRQHandler+0xd0>
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	f043 0204 	orr.w	r2, r3, #4
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00f      	beq.n	8002d72 <HAL_UART_IRQHandler+0xfa>
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	f003 0320 	and.w	r3, r3, #32
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d104      	bne.n	8002d66 <HAL_UART_IRQHandler+0xee>
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d005      	beq.n	8002d72 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	f043 0208 	orr.w	r2, r3, #8
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 811e 	beq.w	8002fb8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	f003 0320 	and.w	r3, r3, #32
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d007      	beq.n	8002d96 <HAL_UART_IRQHandler+0x11e>
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	f003 0320 	and.w	r3, r3, #32
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 fa57 	bl	8003244 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf14      	ite	ne
 8002da4:	2301      	movne	r3, #1
 8002da6:	2300      	moveq	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d102      	bne.n	8002dbe <HAL_UART_IRQHandler+0x146>
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d031      	beq.n	8002e22 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f999 	bl	80030f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d023      	beq.n	8002e1a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	695a      	ldr	r2, [r3, #20]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002de0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d013      	beq.n	8002e12 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dee:	4a76      	ldr	r2, [pc, #472]	; (8002fc8 <HAL_UART_IRQHandler+0x350>)
 8002df0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe fb86 	bl	8001508 <HAL_DMA_Abort_IT>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d016      	beq.n	8002e30 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e10:	e00e      	b.n	8002e30 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f8e3 	bl	8002fde <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e18:	e00a      	b.n	8002e30 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f8df 	bl	8002fde <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e20:	e006      	b.n	8002e30 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f8db 	bl	8002fde <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002e2e:	e0c3      	b.n	8002fb8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e30:	bf00      	nop
    return;
 8002e32:	e0c1      	b.n	8002fb8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	f040 80a1 	bne.w	8002f80 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	f003 0310 	and.w	r3, r3, #16
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 809b 	beq.w	8002f80 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	f003 0310 	and.w	r3, r3, #16
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 8095 	beq.w	8002f80 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d04e      	beq.n	8002f18 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002e84:	8a3b      	ldrh	r3, [r7, #16]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 8098 	beq.w	8002fbc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e90:	8a3a      	ldrh	r2, [r7, #16]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	f080 8092 	bcs.w	8002fbc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	8a3a      	ldrh	r2, [r7, #16]
 8002e9c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	2b20      	cmp	r3, #32
 8002ea6:	d02b      	beq.n	8002f00 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eb6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695a      	ldr	r2, [r3, #20]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0201 	bic.w	r2, r2, #1
 8002ec6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695a      	ldr	r2, [r3, #20]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ed6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2220      	movs	r2, #32
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0210 	bic.w	r2, r2, #16
 8002ef4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fe fac9 	bl	8001492 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	4619      	mov	r1, r3
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7fd fc8b 	bl	800082c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002f16:	e051      	b.n	8002fbc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d047      	beq.n	8002fc0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002f30:	8a7b      	ldrh	r3, [r7, #18]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d044      	beq.n	8002fc0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f44:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695a      	ldr	r2, [r3, #20]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 0201 	bic.w	r2, r2, #1
 8002f54:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0210 	bic.w	r2, r2, #16
 8002f72:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f74:	8a7b      	ldrh	r3, [r7, #18]
 8002f76:	4619      	mov	r1, r3
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7fd fc57 	bl	800082c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002f7e:	e01f      	b.n	8002fc0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d008      	beq.n	8002f9c <HAL_UART_IRQHandler+0x324>
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f8ee 	bl	8003176 <UART_Transmit_IT>
    return;
 8002f9a:	e012      	b.n	8002fc2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00d      	beq.n	8002fc2 <HAL_UART_IRQHandler+0x34a>
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d008      	beq.n	8002fc2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f92f 	bl	8003214 <UART_EndTransmit_IT>
    return;
 8002fb6:	e004      	b.n	8002fc2 <HAL_UART_IRQHandler+0x34a>
    return;
 8002fb8:	bf00      	nop
 8002fba:	e002      	b.n	8002fc2 <HAL_UART_IRQHandler+0x34a>
      return;
 8002fbc:	bf00      	nop
 8002fbe:	e000      	b.n	8002fc2 <HAL_UART_IRQHandler+0x34a>
      return;
 8002fc0:	bf00      	nop
  }
}
 8002fc2:	3728      	adds	r7, #40	; 0x28
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	0800314f 	.word	0x0800314f

08002fcc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bc80      	pop	{r7}
 8002fdc:	4770      	bx	lr

08002fde <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr

08002ff0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003000:	e02c      	b.n	800305c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003008:	d028      	beq.n	800305c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d007      	beq.n	8003020 <UART_WaitOnFlagUntilTimeout+0x30>
 8003010:	f7fe f904 	bl	800121c <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	429a      	cmp	r2, r3
 800301e:	d21d      	bcs.n	800305c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800302e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695a      	ldr	r2, [r3, #20]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0201 	bic.w	r2, r2, #1
 800303e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e00f      	b.n	800307c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	4013      	ands	r3, r2
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	429a      	cmp	r2, r3
 800306a:	bf0c      	ite	eq
 800306c:	2301      	moveq	r3, #1
 800306e:	2300      	movne	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	461a      	mov	r2, r3
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	429a      	cmp	r2, r3
 8003078:	d0c3      	beq.n	8003002 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	4613      	mov	r3, r2
 8003090:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	88fa      	ldrh	r2, [r7, #6]
 800309c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	88fa      	ldrh	r2, [r7, #6]
 80030a2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2222      	movs	r2, #34	; 0x22
 80030ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030c8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695a      	ldr	r2, [r3, #20]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f042 0201 	orr.w	r2, r2, #1
 80030d8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f042 0220 	orr.w	r2, r2, #32
 80030e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bc80      	pop	{r7}
 80030f4:	4770      	bx	lr

080030f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800310c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695a      	ldr	r2, [r3, #20]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0201 	bic.w	r2, r2, #1
 800311c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	2b01      	cmp	r3, #1
 8003124:	d107      	bne.n	8003136 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0210 	bic.w	r2, r2, #16
 8003134:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr

0800314e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b084      	sub	sp, #16
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f7ff ff38 	bl	8002fde <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800316e:	bf00      	nop
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003176:	b480      	push	{r7}
 8003178:	b085      	sub	sp, #20
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b21      	cmp	r3, #33	; 0x21
 8003188:	d13e      	bne.n	8003208 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003192:	d114      	bne.n	80031be <UART_Transmit_IT+0x48>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d110      	bne.n	80031be <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	461a      	mov	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	1c9a      	adds	r2, r3, #2
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	621a      	str	r2, [r3, #32]
 80031bc:	e008      	b.n	80031d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	1c59      	adds	r1, r3, #1
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6211      	str	r1, [r2, #32]
 80031c8:	781a      	ldrb	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b29b      	uxth	r3, r3
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	4619      	mov	r1, r3
 80031de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10f      	bne.n	8003204 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003202:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	e000      	b.n	800320a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003208:	2302      	movs	r3, #2
  }
}
 800320a:	4618      	mov	r0, r3
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800322a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff fec9 	bl	8002fcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b22      	cmp	r3, #34	; 0x22
 8003256:	f040 8099 	bne.w	800338c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003262:	d117      	bne.n	8003294 <UART_Receive_IT+0x50>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d113      	bne.n	8003294 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003274:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	b29b      	uxth	r3, r3
 800327e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003282:	b29a      	uxth	r2, r3
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328c:	1c9a      	adds	r2, r3, #2
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	629a      	str	r2, [r3, #40]	; 0x28
 8003292:	e026      	b.n	80032e2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800329a:	2300      	movs	r3, #0
 800329c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a6:	d007      	beq.n	80032b8 <UART_Receive_IT+0x74>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10a      	bne.n	80032c6 <UART_Receive_IT+0x82>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d106      	bne.n	80032c6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	701a      	strb	r2, [r3, #0]
 80032c4:	e008      	b.n	80032d8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	3b01      	subs	r3, #1
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	4619      	mov	r1, r3
 80032f0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d148      	bne.n	8003388 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0220 	bic.w	r2, r2, #32
 8003304:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003314:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695a      	ldr	r2, [r3, #20]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0201 	bic.w	r2, r2, #1
 8003324:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	2b01      	cmp	r3, #1
 8003334:	d123      	bne.n	800337e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0210 	bic.w	r2, r2, #16
 800334a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0310 	and.w	r3, r3, #16
 8003356:	2b10      	cmp	r3, #16
 8003358:	d10a      	bne.n	8003370 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800335a:	2300      	movs	r3, #0
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003374:	4619      	mov	r1, r3
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fd fa58 	bl	800082c <HAL_UARTEx_RxEventCallback>
 800337c:	e002      	b.n	8003384 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7fd f9e2 	bl	8000748 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003384:	2300      	movs	r3, #0
 8003386:	e002      	b.n	800338e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003388:	2300      	movs	r3, #0
 800338a:	e000      	b.n	800338e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800338c:	2302      	movs	r3, #2
  }
}
 800338e:	4618      	mov	r0, r3
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80033d2:	f023 030c 	bic.w	r3, r3, #12
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6812      	ldr	r2, [r2, #0]
 80033da:	68b9      	ldr	r1, [r7, #8]
 80033dc:	430b      	orrs	r3, r1
 80033de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a2c      	ldr	r2, [pc, #176]	; (80034ac <UART_SetConfig+0x114>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d103      	bne.n	8003408 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003400:	f7fe fe94 	bl	800212c <HAL_RCC_GetPCLK2Freq>
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	e002      	b.n	800340e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003408:	f7fe fe7c 	bl	8002104 <HAL_RCC_GetPCLK1Freq>
 800340c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	4613      	mov	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	009a      	lsls	r2, r3, #2
 8003418:	441a      	add	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	fbb2 f3f3 	udiv	r3, r2, r3
 8003424:	4a22      	ldr	r2, [pc, #136]	; (80034b0 <UART_SetConfig+0x118>)
 8003426:	fba2 2303 	umull	r2, r3, r2, r3
 800342a:	095b      	lsrs	r3, r3, #5
 800342c:	0119      	lsls	r1, r3, #4
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	009a      	lsls	r2, r3, #2
 8003438:	441a      	add	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	fbb2 f2f3 	udiv	r2, r2, r3
 8003444:	4b1a      	ldr	r3, [pc, #104]	; (80034b0 <UART_SetConfig+0x118>)
 8003446:	fba3 0302 	umull	r0, r3, r3, r2
 800344a:	095b      	lsrs	r3, r3, #5
 800344c:	2064      	movs	r0, #100	; 0x64
 800344e:	fb00 f303 	mul.w	r3, r0, r3
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	3332      	adds	r3, #50	; 0x32
 8003458:	4a15      	ldr	r2, [pc, #84]	; (80034b0 <UART_SetConfig+0x118>)
 800345a:	fba2 2303 	umull	r2, r3, r2, r3
 800345e:	095b      	lsrs	r3, r3, #5
 8003460:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003464:	4419      	add	r1, r3
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	4613      	mov	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	009a      	lsls	r2, r3, #2
 8003470:	441a      	add	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	fbb2 f2f3 	udiv	r2, r2, r3
 800347c:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <UART_SetConfig+0x118>)
 800347e:	fba3 0302 	umull	r0, r3, r3, r2
 8003482:	095b      	lsrs	r3, r3, #5
 8003484:	2064      	movs	r0, #100	; 0x64
 8003486:	fb00 f303 	mul.w	r3, r0, r3
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	3332      	adds	r3, #50	; 0x32
 8003490:	4a07      	ldr	r2, [pc, #28]	; (80034b0 <UART_SetConfig+0x118>)
 8003492:	fba2 2303 	umull	r2, r3, r2, r3
 8003496:	095b      	lsrs	r3, r3, #5
 8003498:	f003 020f 	and.w	r2, r3, #15
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	440a      	add	r2, r1
 80034a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80034a4:	bf00      	nop
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40013800 	.word	0x40013800
 80034b0:	51eb851f 	.word	0x51eb851f

080034b4 <crc_modbus>:
 * The function crc_modbus() calculates the 16 bits Modbus CRC in one pass for
 * a byte string of which the beginning has been passed to the function. The
 * number of bytes to check is also a parameter.
 */

uint16_t crc_modbus( const unsigned char *input_str, size_t num_bytes ) {
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
	uint16_t tmp;
	uint16_t short_c;
	const unsigned char *ptr;
	size_t a;

	if ( ! crc_tab16_init ) init_crc16_tab();
 80034be:	4b1a      	ldr	r3, [pc, #104]	; (8003528 <crc_modbus+0x74>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	f083 0301 	eor.w	r3, r3, #1
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <crc_modbus+0x1c>
 80034cc:	f000 f830 	bl	8003530 <init_crc16_tab>

	crc = CRC_START_MODBUS;
 80034d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034d4:	82fb      	strh	r3, [r7, #22]
	ptr = input_str;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	613b      	str	r3, [r7, #16]

	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d01d      	beq.n	800351c <crc_modbus+0x68>
 80034e0:	2300      	movs	r3, #0
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	e016      	b.n	8003514 <crc_modbus+0x60>

		short_c = 0x00ff & (uint16_t) *ptr;
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	817b      	strh	r3, [r7, #10]
		tmp     =  crc       ^ short_c;
 80034ec:	8afa      	ldrh	r2, [r7, #22]
 80034ee:	897b      	ldrh	r3, [r7, #10]
 80034f0:	4053      	eors	r3, r2
 80034f2:	813b      	strh	r3, [r7, #8]
		crc     = (crc >> 8) ^ crc_tab16[ tmp & 0xff ];
 80034f4:	8afb      	ldrh	r3, [r7, #22]
 80034f6:	0a1b      	lsrs	r3, r3, #8
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	893b      	ldrh	r3, [r7, #8]
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	490b      	ldr	r1, [pc, #44]	; (800352c <crc_modbus+0x78>)
 8003500:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003504:	4053      	eors	r3, r2
 8003506:	82fb      	strh	r3, [r7, #22]

		ptr++;
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	3301      	adds	r3, #1
 800350c:	613b      	str	r3, [r7, #16]
	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	3301      	adds	r3, #1
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	429a      	cmp	r2, r3
 800351a:	d3e4      	bcc.n	80034e6 <crc_modbus+0x32>
	}

	return crc;
 800351c:	8afb      	ldrh	r3, [r7, #22]

}  /* crc_modbus */
 800351e:	4618      	mov	r0, r3
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20000f5c 	.word	0x20000f5c
 800352c:	20000f60 	.word	0x20000f60

08003530 <init_crc16_tab>:
 * that can be used directly in the XOR arithmetic in the algorithm. This
 * lookup table is calculated by the init_crc16_tab() routine, the first time
 * the CRC function is called.
 */

static void init_crc16_tab( void ) {
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
	uint16_t i;
	uint16_t j;
	uint16_t crc;
	uint16_t c;

	for (i=0; i<256; i++) {
 8003536:	2300      	movs	r3, #0
 8003538:	80fb      	strh	r3, [r7, #6]
 800353a:	e029      	b.n	8003590 <init_crc16_tab+0x60>

		crc = 0;
 800353c:	2300      	movs	r3, #0
 800353e:	807b      	strh	r3, [r7, #2]
		c   = i;
 8003540:	88fb      	ldrh	r3, [r7, #6]
 8003542:	803b      	strh	r3, [r7, #0]

		for (j=0; j<8; j++) {
 8003544:	2300      	movs	r3, #0
 8003546:	80bb      	strh	r3, [r7, #4]
 8003548:	e017      	b.n	800357a <init_crc16_tab+0x4a>

			if ( (crc ^ c) & 0x0001 ) crc = ( crc >> 1 ) ^ CRC_POLY_16;
 800354a:	887a      	ldrh	r2, [r7, #2]
 800354c:	883b      	ldrh	r3, [r7, #0]
 800354e:	4053      	eors	r3, r2
 8003550:	b29b      	uxth	r3, r3
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d006      	beq.n	8003568 <init_crc16_tab+0x38>
 800355a:	887b      	ldrh	r3, [r7, #2]
 800355c:	085b      	lsrs	r3, r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	4b11      	ldr	r3, [pc, #68]	; (80035a8 <init_crc16_tab+0x78>)
 8003562:	4053      	eors	r3, r2
 8003564:	807b      	strh	r3, [r7, #2]
 8003566:	e002      	b.n	800356e <init_crc16_tab+0x3e>
			else                      crc =   crc >> 1;
 8003568:	887b      	ldrh	r3, [r7, #2]
 800356a:	085b      	lsrs	r3, r3, #1
 800356c:	807b      	strh	r3, [r7, #2]

			c = c >> 1;
 800356e:	883b      	ldrh	r3, [r7, #0]
 8003570:	085b      	lsrs	r3, r3, #1
 8003572:	803b      	strh	r3, [r7, #0]
		for (j=0; j<8; j++) {
 8003574:	88bb      	ldrh	r3, [r7, #4]
 8003576:	3301      	adds	r3, #1
 8003578:	80bb      	strh	r3, [r7, #4]
 800357a:	88bb      	ldrh	r3, [r7, #4]
 800357c:	2b07      	cmp	r3, #7
 800357e:	d9e4      	bls.n	800354a <init_crc16_tab+0x1a>
		}

		crc_tab16[i] = crc;
 8003580:	88fb      	ldrh	r3, [r7, #6]
 8003582:	490a      	ldr	r1, [pc, #40]	; (80035ac <init_crc16_tab+0x7c>)
 8003584:	887a      	ldrh	r2, [r7, #2]
 8003586:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=0; i<256; i++) {
 800358a:	88fb      	ldrh	r3, [r7, #6]
 800358c:	3301      	adds	r3, #1
 800358e:	80fb      	strh	r3, [r7, #6]
 8003590:	88fb      	ldrh	r3, [r7, #6]
 8003592:	2bff      	cmp	r3, #255	; 0xff
 8003594:	d9d2      	bls.n	800353c <init_crc16_tab+0xc>
	}

	crc_tab16_init = true;
 8003596:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <init_crc16_tab+0x80>)
 8003598:	2201      	movs	r2, #1
 800359a:	701a      	strb	r2, [r3, #0]

}  /* init_crc16_tab */
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bc80      	pop	{r7}
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	ffffa001 	.word	0xffffa001
 80035ac:	20000f60 	.word	0x20000f60
 80035b0:	20000f5c 	.word	0x20000f5c

080035b4 <update_crc_32>:
 *
 * The function update_crc_32() calculates a new CRC-32 value based on the
 * previous value of the CRC and the next byte of the data to be checked.
 */

uint32_t update_crc_32( uint32_t crc, unsigned char c ) {
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	460b      	mov	r3, r1
 80035be:	70fb      	strb	r3, [r7, #3]

	uint32_t tmp;
	uint32_t long_c;

	long_c = 0x000000ffL & (uint32_t) c;
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	60fb      	str	r3, [r7, #12]

	if ( ! crc_tab32_init ) init_crc32_tab();
 80035c4:	4b0d      	ldr	r3, [pc, #52]	; (80035fc <update_crc_32+0x48>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	f083 0301 	eor.w	r3, r3, #1
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <update_crc_32+0x22>
 80035d2:	f000 f817 	bl	8003604 <init_crc32_tab>

	tmp = crc ^ long_c;
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4053      	eors	r3, r2
 80035dc:	60bb      	str	r3, [r7, #8]
	crc = (crc >> 8) ^ crc_tab32[ tmp & 0xff ];
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	0a1a      	lsrs	r2, r3, #8
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	4906      	ldr	r1, [pc, #24]	; (8003600 <update_crc_32+0x4c>)
 80035e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035ec:	4053      	eors	r3, r2
 80035ee:	607b      	str	r3, [r7, #4]

	return crc & 0xffffffffL;
 80035f0:	687b      	ldr	r3, [r7, #4]

}  /* update_crc_32 */
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20001160 	.word	0x20001160
 8003600:	20001164 	.word	0x20001164

08003604 <init_crc32_tab>:
 * For optimal speed, the CRC32 calculation uses a table with pre-calculated
 * bit patterns which are used in the XOR operations in the program. This table
 * is generated once, the first time the CRC update routine is called.
 */

static void init_crc32_tab( void ) {
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0

	uint32_t i;
	uint32_t j;
	uint32_t crc;

	for (i=0; i<256; i++) {
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	e020      	b.n	8003652 <init_crc32_tab+0x4e>

		crc = i;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	607b      	str	r3, [r7, #4]

		for (j=0; j<8; j++) {
 8003614:	2300      	movs	r3, #0
 8003616:	60bb      	str	r3, [r7, #8]
 8003618:	e010      	b.n	800363c <init_crc32_tab+0x38>

			if ( crc & 0x00000001L ) crc = ( crc >> 1 ) ^ CRC_POLY_32;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <init_crc32_tab+0x2c>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	085a      	lsrs	r2, r3, #1
 8003628:	4b0f      	ldr	r3, [pc, #60]	; (8003668 <init_crc32_tab+0x64>)
 800362a:	4053      	eors	r3, r2
 800362c:	607b      	str	r3, [r7, #4]
 800362e:	e002      	b.n	8003636 <init_crc32_tab+0x32>
			else                     crc =   crc >> 1;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	085b      	lsrs	r3, r3, #1
 8003634:	607b      	str	r3, [r7, #4]
		for (j=0; j<8; j++) {
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	3301      	adds	r3, #1
 800363a:	60bb      	str	r3, [r7, #8]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2b07      	cmp	r3, #7
 8003640:	d9eb      	bls.n	800361a <init_crc32_tab+0x16>
		}

		crc_tab32[i] = crc;
 8003642:	490a      	ldr	r1, [pc, #40]	; (800366c <init_crc32_tab+0x68>)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i=0; i<256; i++) {
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	3301      	adds	r3, #1
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2bff      	cmp	r3, #255	; 0xff
 8003656:	d9db      	bls.n	8003610 <init_crc32_tab+0xc>
	}

	crc_tab32_init = true;
 8003658:	4b05      	ldr	r3, [pc, #20]	; (8003670 <init_crc32_tab+0x6c>)
 800365a:	2201      	movs	r2, #1
 800365c:	701a      	strb	r2, [r3, #0]

}  /* init_crc32_tab */
 800365e:	bf00      	nop
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr
 8003668:	edb88320 	.word	0xedb88320
 800366c:	20001164 	.word	0x20001164
 8003670:	20001160 	.word	0x20001160

08003674 <str2hex>:
uint8_t cl_buf[255];
uint8_t cl_pointer = 0;
uint8_t cl_flag = 0;

static uint8_t str2hex(char *str)
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
	uint8_t result = 0;
 800367c:	2300      	movs	r3, #0
 800367e:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < 2; i++)
 8003680:	2300      	movs	r3, #0
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	e047      	b.n	8003716 <str2hex+0xa2>
	{
		uint8_t temp_data;
		if(str[i] >= '0' && str[i] <= '9')
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	4413      	add	r3, r2
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b2f      	cmp	r3, #47	; 0x2f
 8003690:	d90c      	bls.n	80036ac <str2hex+0x38>
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	4413      	add	r3, r2
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	2b39      	cmp	r3, #57	; 0x39
 800369c:	d806      	bhi.n	80036ac <str2hex+0x38>
		{
			temp_data = str[i] - '0';
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	4413      	add	r3, r2
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	3b30      	subs	r3, #48	; 0x30
 80036a8:	73fb      	strb	r3, [r7, #15]
 80036aa:	e024      	b.n	80036f6 <str2hex+0x82>
		}
		else if(str[i] >= 'A' && str[i] <= 'F')
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	4413      	add	r3, r2
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b40      	cmp	r3, #64	; 0x40
 80036b6:	d90c      	bls.n	80036d2 <str2hex+0x5e>
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	4413      	add	r3, r2
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b46      	cmp	r3, #70	; 0x46
 80036c2:	d806      	bhi.n	80036d2 <str2hex+0x5e>
		{
			temp_data = str[i] - 55;
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	4413      	add	r3, r2
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	3b37      	subs	r3, #55	; 0x37
 80036ce:	73fb      	strb	r3, [r7, #15]
 80036d0:	e011      	b.n	80036f6 <str2hex+0x82>
		}
		else if(str[i] >= 'a' && str[i] <= 'f')
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	4413      	add	r3, r2
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b60      	cmp	r3, #96	; 0x60
 80036dc:	d90b      	bls.n	80036f6 <str2hex+0x82>
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	4413      	add	r3, r2
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b66      	cmp	r3, #102	; 0x66
 80036e8:	d805      	bhi.n	80036f6 <str2hex+0x82>
		{
			temp_data = str[i] - 87;
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	4413      	add	r3, r2
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	3b57      	subs	r3, #87	; 0x57
 80036f4:	73fb      	strb	r3, [r7, #15]
		}
		result |= temp_data << ((1 - i) * 4);
 80036f6:	7bfa      	ldrb	r2, [r7, #15]
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f1c3 0301 	rsb	r3, r3, #1
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	b25a      	sxtb	r2, r3
 8003706:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800370a:	4313      	orrs	r3, r2
 800370c:	b25b      	sxtb	r3, r3
 800370e:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < 2; i++)
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	3301      	adds	r3, #1
 8003714:	613b      	str	r3, [r7, #16]
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	2b01      	cmp	r3, #1
 800371a:	ddb4      	ble.n	8003686 <str2hex+0x12>
	}
	return result;
 800371c:	7dfb      	ldrb	r3, [r7, #23]
}
 800371e:	4618      	mov	r0, r3
 8003720:	371c      	adds	r7, #28
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr

08003728 <COMMAND_LINE_Handle>:
void COMMAND_LINE_Init()
{

}

void COMMAND_LINE_Handle(){
 8003728:	b580      	push	{r7, lr}
 800372a:	b094      	sub	sp, #80	; 0x50
 800372c:	af02      	add	r7, sp, #8
	if(cl_flag)
 800372e:	4b6e      	ldr	r3, [pc, #440]	; (80038e8 <COMMAND_LINE_Handle+0x1c0>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 80d3 	beq.w	80038de <COMMAND_LINE_Handle+0x1b6>
	{
		char *arg_list[10];
		uint8_t arg_num = 0;
 8003738:	2300      	movs	r3, #0
 800373a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

		char *temp_token = strtok((char *)cl_buf, " ");
 800373e:	496b      	ldr	r1, [pc, #428]	; (80038ec <COMMAND_LINE_Handle+0x1c4>)
 8003740:	486b      	ldr	r0, [pc, #428]	; (80038f0 <COMMAND_LINE_Handle+0x1c8>)
 8003742:	f001 fb61 	bl	8004e08 <strtok>
 8003746:	6438      	str	r0, [r7, #64]	; 0x40
		while(temp_token != NULL)
 8003748:	e00f      	b.n	800376a <COMMAND_LINE_Handle+0x42>
		{
			arg_list[arg_num++] = temp_token;
 800374a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800374e:	1c5a      	adds	r2, r3, #1
 8003750:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	3348      	adds	r3, #72	; 0x48
 8003758:	443b      	add	r3, r7
 800375a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800375c:	f843 2c48 	str.w	r2, [r3, #-72]
			temp_token = strtok(NULL, " ");
 8003760:	4962      	ldr	r1, [pc, #392]	; (80038ec <COMMAND_LINE_Handle+0x1c4>)
 8003762:	2000      	movs	r0, #0
 8003764:	f001 fb50 	bl	8004e08 <strtok>
 8003768:	6438      	str	r0, [r7, #64]	; 0x40
		while(temp_token != NULL)
 800376a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1ec      	bne.n	800374a <COMMAND_LINE_Handle+0x22>
		}

		if(strstr(arg_list[0], "STATUS") != NULL)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	4960      	ldr	r1, [pc, #384]	; (80038f4 <COMMAND_LINE_Handle+0x1cc>)
 8003774:	4618      	mov	r0, r3
 8003776:	f001 fb30 	bl	8004dda <strstr>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d032      	beq.n	80037e6 <COMMAND_LINE_Handle+0xbe>
		{
			tx_frame_len = arg_num - 1;
 8003780:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003784:	3b01      	subs	r3, #1
 8003786:	b2da      	uxtb	r2, r3
 8003788:	4b5b      	ldr	r3, [pc, #364]	; (80038f8 <COMMAND_LINE_Handle+0x1d0>)
 800378a:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < arg_num - 1; i++)
 800378c:	2300      	movs	r3, #0
 800378e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003790:	e013      	b.n	80037ba <COMMAND_LINE_Handle+0x92>
			{
				tx_frame_data[i] = str2hex(arg_list[i + 1]);
 8003792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003794:	3301      	adds	r3, #1
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	3348      	adds	r3, #72	; 0x48
 800379a:	443b      	add	r3, r7
 800379c:	f853 3c48 	ldr.w	r3, [r3, #-72]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff ff67 	bl	8003674 <str2hex>
 80037a6:	4603      	mov	r3, r0
 80037a8:	4619      	mov	r1, r3
 80037aa:	4a54      	ldr	r2, [pc, #336]	; (80038fc <COMMAND_LINE_Handle+0x1d4>)
 80037ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ae:	4413      	add	r3, r2
 80037b0:	460a      	mov	r2, r1
 80037b2:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < arg_num - 1; i++)
 80037b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037b6:	3301      	adds	r3, #1
 80037b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037be:	3b01      	subs	r3, #1
 80037c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037c2:	429a      	cmp	r2, r3
 80037c4:	dbe5      	blt.n	8003792 <COMMAND_LINE_Handle+0x6a>
			}
			uint8_t temp_str[] = {GET_STATUS};
 80037c6:	2380      	movs	r3, #128	; 0x80
 80037c8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			Push_Command_To_Ring_Buffer(tx_frame_data[0], 1, 7, 1, sizeof(temp_str), temp_str);
 80037cc:	4b4b      	ldr	r3, [pc, #300]	; (80038fc <COMMAND_LINE_Handle+0x1d4>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037d6:	9301      	str	r3, [sp, #4]
 80037d8:	2301      	movs	r3, #1
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	2301      	movs	r3, #1
 80037de:	2207      	movs	r2, #7
 80037e0:	2101      	movs	r1, #1
 80037e2:	f7fc fe41 	bl	8000468 <Push_Command_To_Ring_Buffer>
//			HAL_UART_Transmit(&huart1, temp_str, 3, 100);
		}
		if(strstr(arg_list[0], "OPEN") != NULL)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	4945      	ldr	r1, [pc, #276]	; (8003900 <COMMAND_LINE_Handle+0x1d8>)
 80037ea:	4618      	mov	r0, r3
 80037ec:	f001 faf5 	bl	8004dda <strstr>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d032      	beq.n	800385c <COMMAND_LINE_Handle+0x134>
		{
			tx_frame_len = arg_num - 1;
 80037f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	4b3e      	ldr	r3, [pc, #248]	; (80038f8 <COMMAND_LINE_Handle+0x1d0>)
 8003800:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < arg_num - 1; i++)
 8003802:	2300      	movs	r3, #0
 8003804:	63bb      	str	r3, [r7, #56]	; 0x38
 8003806:	e013      	b.n	8003830 <COMMAND_LINE_Handle+0x108>
			{
				tx_frame_data[i] = str2hex(arg_list[i + 1]);
 8003808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380a:	3301      	adds	r3, #1
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	3348      	adds	r3, #72	; 0x48
 8003810:	443b      	add	r3, r7
 8003812:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff ff2c 	bl	8003674 <str2hex>
 800381c:	4603      	mov	r3, r0
 800381e:	4619      	mov	r1, r3
 8003820:	4a36      	ldr	r2, [pc, #216]	; (80038fc <COMMAND_LINE_Handle+0x1d4>)
 8003822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003824:	4413      	add	r3, r2
 8003826:	460a      	mov	r2, r1
 8003828:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < arg_num - 1; i++)
 800382a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800382c:	3301      	adds	r3, #1
 800382e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003830:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003834:	3b01      	subs	r3, #1
 8003836:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003838:	429a      	cmp	r2, r3
 800383a:	dbe5      	blt.n	8003808 <COMMAND_LINE_Handle+0xe0>
			}
			uint8_t temp_str[] = {ON_VALVE};
 800383c:	2382      	movs	r3, #130	; 0x82
 800383e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			Push_Command_To_Ring_Buffer(tx_frame_data[0], 1, 7, 1, sizeof(temp_str), temp_str);
 8003842:	4b2e      	ldr	r3, [pc, #184]	; (80038fc <COMMAND_LINE_Handle+0x1d4>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800384c:	9301      	str	r3, [sp, #4]
 800384e:	2301      	movs	r3, #1
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	2301      	movs	r3, #1
 8003854:	2207      	movs	r2, #7
 8003856:	2101      	movs	r1, #1
 8003858:	f7fc fe06 	bl	8000468 <Push_Command_To_Ring_Buffer>
		//			HAL_UART_Transmit(&huart1, temp_str, 3, 100);
		}
		if(strstr(arg_list[0], "CLOSE") != NULL)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	4929      	ldr	r1, [pc, #164]	; (8003904 <COMMAND_LINE_Handle+0x1dc>)
 8003860:	4618      	mov	r0, r3
 8003862:	f001 faba 	bl	8004dda <strstr>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d032      	beq.n	80038d2 <COMMAND_LINE_Handle+0x1aa>
		{
			tx_frame_len = arg_num - 1;
 800386c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003870:	3b01      	subs	r3, #1
 8003872:	b2da      	uxtb	r2, r3
 8003874:	4b20      	ldr	r3, [pc, #128]	; (80038f8 <COMMAND_LINE_Handle+0x1d0>)
 8003876:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < arg_num - 1; i++)
 8003878:	2300      	movs	r3, #0
 800387a:	637b      	str	r3, [r7, #52]	; 0x34
 800387c:	e013      	b.n	80038a6 <COMMAND_LINE_Handle+0x17e>
			{
				tx_frame_data[i] = str2hex(arg_list[i + 1]);
 800387e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003880:	3301      	adds	r3, #1
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	3348      	adds	r3, #72	; 0x48
 8003886:	443b      	add	r3, r7
 8003888:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff fef1 	bl	8003674 <str2hex>
 8003892:	4603      	mov	r3, r0
 8003894:	4619      	mov	r1, r3
 8003896:	4a19      	ldr	r2, [pc, #100]	; (80038fc <COMMAND_LINE_Handle+0x1d4>)
 8003898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389a:	4413      	add	r3, r2
 800389c:	460a      	mov	r2, r1
 800389e:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < arg_num - 1; i++)
 80038a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a2:	3301      	adds	r3, #1
 80038a4:	637b      	str	r3, [r7, #52]	; 0x34
 80038a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80038aa:	3b01      	subs	r3, #1
 80038ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038ae:	429a      	cmp	r2, r3
 80038b0:	dbe5      	blt.n	800387e <COMMAND_LINE_Handle+0x156>
			}
			uint8_t temp_str[] = {OFF_VALVE};
 80038b2:	2383      	movs	r3, #131	; 0x83
 80038b4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			Push_Command_To_Ring_Buffer(tx_frame_data[0], 1, 7, 1, sizeof(temp_str), temp_str);
 80038b8:	4b10      	ldr	r3, [pc, #64]	; (80038fc <COMMAND_LINE_Handle+0x1d4>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038c2:	9301      	str	r3, [sp, #4]
 80038c4:	2301      	movs	r3, #1
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	2301      	movs	r3, #1
 80038ca:	2207      	movs	r2, #7
 80038cc:	2101      	movs	r1, #1
 80038ce:	f7fc fdcb 	bl	8000468 <Push_Command_To_Ring_Buffer>
				//			HAL_UART_Transmit(&huart1, temp_str, 3, 100);
		}
		cl_pointer = 0;
 80038d2:	4b0d      	ldr	r3, [pc, #52]	; (8003908 <COMMAND_LINE_Handle+0x1e0>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
		cl_flag = 0;
 80038d8:	4b03      	ldr	r3, [pc, #12]	; (80038e8 <COMMAND_LINE_Handle+0x1c0>)
 80038da:	2200      	movs	r2, #0
 80038dc:	701a      	strb	r2, [r3, #0]
	}
}
 80038de:	bf00      	nop
 80038e0:	3748      	adds	r7, #72	; 0x48
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	20001664 	.word	0x20001664
 80038ec:	080062d8 	.word	0x080062d8
 80038f0:	20001564 	.word	0x20001564
 80038f4:	080062dc 	.word	0x080062dc
 80038f8:	20000f43 	.word	0x20000f43
 80038fc:	20000e44 	.word	0x20000e44
 8003900:	080062e4 	.word	0x080062e4
 8003904:	080062ec 	.word	0x080062ec
 8003908:	20001663 	.word	0x20001663

0800390c <COMMAND_LINE_Receive>:

void COMMAND_LINE_Receive(uint8_t rx_data)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	71fb      	strb	r3, [r7, #7]
	if(rx_data != '\n')
 8003916:	79fb      	ldrb	r3, [r7, #7]
 8003918:	2b0a      	cmp	r3, #10
 800391a:	d00a      	beq.n	8003932 <COMMAND_LINE_Receive+0x26>
	{
		cl_buf[cl_pointer++] = rx_data;
 800391c:	4b0c      	ldr	r3, [pc, #48]	; (8003950 <COMMAND_LINE_Receive+0x44>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	b2d1      	uxtb	r1, r2
 8003924:	4a0a      	ldr	r2, [pc, #40]	; (8003950 <COMMAND_LINE_Receive+0x44>)
 8003926:	7011      	strb	r1, [r2, #0]
 8003928:	4619      	mov	r1, r3
 800392a:	4a0a      	ldr	r2, [pc, #40]	; (8003954 <COMMAND_LINE_Receive+0x48>)
 800392c:	79fb      	ldrb	r3, [r7, #7]
 800392e:	5453      	strb	r3, [r2, r1]
	else
	{
		cl_buf[cl_pointer] = '\0';
		cl_flag = 1;
	}
}
 8003930:	e008      	b.n	8003944 <COMMAND_LINE_Receive+0x38>
		cl_buf[cl_pointer] = '\0';
 8003932:	4b07      	ldr	r3, [pc, #28]	; (8003950 <COMMAND_LINE_Receive+0x44>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	461a      	mov	r2, r3
 8003938:	4b06      	ldr	r3, [pc, #24]	; (8003954 <COMMAND_LINE_Receive+0x48>)
 800393a:	2100      	movs	r1, #0
 800393c:	5499      	strb	r1, [r3, r2]
		cl_flag = 1;
 800393e:	4b06      	ldr	r3, [pc, #24]	; (8003958 <COMMAND_LINE_Receive+0x4c>)
 8003940:	2201      	movs	r2, #1
 8003942:	701a      	strb	r2, [r3, #0]
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	20001663 	.word	0x20001663
 8003954:	20001564 	.word	0x20001564
 8003958:	20001664 	.word	0x20001664

0800395c <Rx_Reset>:
{
	HAL_UART_Transmit(&FRAME_SYNC_huart, &tx_data, 1, 100);
}

static void Rx_Reset()
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
	FS_Data.rx_checksum = 0xFFFFFFFF;
 8003960:	4b0c      	ldr	r3, [pc, #48]	; (8003994 <Rx_Reset+0x38>)
 8003962:	f04f 32ff 	mov.w	r2, #4294967295
 8003966:	f8c3 2a80 	str.w	r2, [r3, #2688]	; 0xa80
	FS_Data.rx_state = SEARCHING_STX;
 800396a:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <Rx_Reset+0x38>)
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2a84 	strb.w	r2, [r3, #2692]	; 0xa84
	FS_Data.rx_num_crc_byte = 0;
 8003972:	4b08      	ldr	r3, [pc, #32]	; (8003994 <Rx_Reset+0x38>)
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2b94 	strb.w	r2, [r3, #2964]	; 0xb94
	FS_Data.rx_packet.crc32 = 0;
 800397a:	4b06      	ldr	r3, [pc, #24]	; (8003994 <Rx_Reset+0x38>)
 800397c:	2200      	movs	r2, #0
 800397e:	f8c3 2b8c 	str.w	r2, [r3, #2956]	; 0xb8c
	FS_Data.rx_pointer = 0;
 8003982:	4b04      	ldr	r3, [pc, #16]	; (8003994 <Rx_Reset+0x38>)
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2a85 	strb.w	r2, [r3, #2693]	; 0xa85
}
 800398a:	bf00      	nop
 800398c:	46bd      	mov	sp, r7
 800398e:	bc80      	pop	{r7}
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	20001668 	.word	0x20001668

08003998 <CRC_Update>:

static void CRC_Update(uint32_t *crc, uint8_t data)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	70fb      	strb	r3, [r7, #3]
	*crc = update_crc_32(*crc, data);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	78fa      	ldrb	r2, [r7, #3]
 80039aa:	4611      	mov	r1, r2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff fe01 	bl	80035b4 <update_crc_32>
 80039b2:	4602      	mov	r2, r0
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	601a      	str	r2, [r3, #0]
}
 80039b8:	bf00      	nop
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <validate_packet>:

static void validate_packet()
{
 80039c0:	b590      	push	{r4, r7, lr}
 80039c2:	b0c3      	sub	sp, #268	; 0x10c
 80039c4:	af40      	add	r7, sp, #256	; 0x100
	if(FS_Data.rx_packet.temp_des_id != FS_Data.my_id) return;
 80039c6:	4b86      	ldr	r3, [pc, #536]	; (8003be0 <validate_packet+0x220>)
 80039c8:	f893 2a89 	ldrb.w	r2, [r3, #2697]	; 0xa89
 80039cc:	4b84      	ldr	r3, [pc, #528]	; (8003be0 <validate_packet+0x220>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	f040 8101 	bne.w	8003bd8 <validate_packet+0x218>
	uint8_t temp_data = 0;
 80039d6:	2300      	movs	r3, #0
 80039d8:	71fb      	strb	r3, [r7, #7]
	FS_Data.rx_checksum = ~FS_Data.rx_checksum;
 80039da:	4b81      	ldr	r3, [pc, #516]	; (8003be0 <validate_packet+0x220>)
 80039dc:	f8d3 3a80 	ldr.w	r3, [r3, #2688]	; 0xa80
 80039e0:	43db      	mvns	r3, r3
 80039e2:	4a7f      	ldr	r2, [pc, #508]	; (8003be0 <validate_packet+0x220>)
 80039e4:	f8c2 3a80 	str.w	r3, [r2, #2688]	; 0xa80
	if(FS_Data.rx_packet.crc32 != FS_Data.rx_checksum)
 80039e8:	4b7d      	ldr	r3, [pc, #500]	; (8003be0 <validate_packet+0x220>)
 80039ea:	f8d3 2b8c 	ldr.w	r2, [r3, #2956]	; 0xb8c
 80039ee:	4b7c      	ldr	r3, [pc, #496]	; (8003be0 <validate_packet+0x220>)
 80039f0:	f8d3 3a80 	ldr.w	r3, [r3, #2688]	; 0xa80
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d019      	beq.n	8003a2c <validate_packet+0x6c>
	{
		temp_data = NACK;
 80039f8:	23fe      	movs	r3, #254	; 0xfe
 80039fa:	71fb      	strb	r3, [r7, #7]
		FRAME_SYNC_Send_Frame(FS_Data.rx_packet.src_id, FS_Data.rx_packet.src_id, 1, &temp_data, 1, 0);
 80039fc:	4b78      	ldr	r3, [pc, #480]	; (8003be0 <validate_packet+0x220>)
 80039fe:	f893 0a8a 	ldrb.w	r0, [r3, #2698]	; 0xa8a
 8003a02:	4b77      	ldr	r3, [pc, #476]	; (8003be0 <validate_packet+0x220>)
 8003a04:	f893 1a8a 	ldrb.w	r1, [r3, #2698]	; 0xa8a
 8003a08:	1dfb      	adds	r3, r7, #7
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	9201      	str	r2, [sp, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	9200      	str	r2, [sp, #0]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f000 f8ea 	bl	8003bec <FRAME_SYNC_Send_Frame>
		FRAME_SYNC_RxFailCallback(FS_Data.rx_packet.buffer, FS_Data.rx_packet.length);
 8003a18:	4b71      	ldr	r3, [pc, #452]	; (8003be0 <validate_packet+0x220>)
 8003a1a:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4870      	ldr	r0, [pc, #448]	; (8003be4 <validate_packet+0x224>)
 8003a22:	f7fc fe65 	bl	80006f0 <FRAME_SYNC_RxFailCallback>
		Rx_Reset();
 8003a26:	f7ff ff99 	bl	800395c <Rx_Reset>
		return;
 8003a2a:	e0d6      	b.n	8003bda <validate_packet+0x21a>
	}

	switch(FS_Data.rx_packet.buffer[0])
 8003a2c:	4b6c      	ldr	r3, [pc, #432]	; (8003be0 <validate_packet+0x220>)
 8003a2e:	f893 3a8d 	ldrb.w	r3, [r3, #2701]	; 0xa8d
 8003a32:	2bfe      	cmp	r3, #254	; 0xfe
 8003a34:	d013      	beq.n	8003a5e <validate_packet+0x9e>
 8003a36:	2bff      	cmp	r3, #255	; 0xff
 8003a38:	d132      	bne.n	8003aa0 <validate_packet+0xe0>
	{
		case ACK:	// Received ACK
			if(FS_Data.device_state == FRAME_SYNC_WAITING_ACK)
 8003a3a:	4b69      	ldr	r3, [pc, #420]	; (8003be0 <validate_packet+0x220>)
 8003a3c:	785b      	ldrb	r3, [r3, #1]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	f040 80c2 	bne.w	8003bc8 <validate_packet+0x208>
			{
				FS_Data.device_state = FRAME_SYNC_READY_TO_TRANSMIT;
 8003a44:	4b66      	ldr	r3, [pc, #408]	; (8003be0 <validate_packet+0x220>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	705a      	strb	r2, [r3, #1]
				if(FS_Data.stored_packet.is_requiring_reply == 1)
 8003a4a:	4b65      	ldr	r3, [pc, #404]	; (8003be0 <validate_packet+0x220>)
 8003a4c:	f893 3ca8 	ldrb.w	r3, [r3, #3240]	; 0xca8
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	f040 80b9 	bne.w	8003bc8 <validate_packet+0x208>
				{
					FS_Data.device_state = FRAME_SYNC_WAITING_REPLY;
 8003a56:	4b62      	ldr	r3, [pc, #392]	; (8003be0 <validate_packet+0x220>)
 8003a58:	2202      	movs	r2, #2
 8003a5a:	705a      	strb	r2, [r3, #1]
				}
			}
			break;
 8003a5c:	e0b4      	b.n	8003bc8 <validate_packet+0x208>
		case NACK:	// Received NACK
			// Re-transmit
			if(FS_Data.device_state == FRAME_SYNC_WAITING_ACK)
 8003a5e:	4b60      	ldr	r3, [pc, #384]	; (8003be0 <validate_packet+0x220>)
 8003a60:	785b      	ldrb	r3, [r3, #1]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	f040 80b2 	bne.w	8003bcc <validate_packet+0x20c>
			{
				FS_Data.device_state = FRAME_SYNC_READY_TO_TRANSMIT;
 8003a68:	4b5d      	ldr	r3, [pc, #372]	; (8003be0 <validate_packet+0x220>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	705a      	strb	r2, [r3, #1]
				FRAME_SYNC_Send_Frame(FS_Data.stored_packet.final_des_id, FS_Data.stored_packet.temp_des_id, FS_Data.stored_packet.time_to_live - 1,
 8003a6e:	4b5c      	ldr	r3, [pc, #368]	; (8003be0 <validate_packet+0x220>)
 8003a70:	f893 0ba0 	ldrb.w	r0, [r3, #2976]	; 0xba0
 8003a74:	4b5a      	ldr	r3, [pc, #360]	; (8003be0 <validate_packet+0x220>)
 8003a76:	f893 1ba1 	ldrb.w	r1, [r3, #2977]	; 0xba1
 8003a7a:	4b59      	ldr	r3, [pc, #356]	; (8003be0 <validate_packet+0x220>)
 8003a7c:	f993 3ba3 	ldrsb.w	r3, [r3, #2979]	; 0xba3
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b2dc      	uxtb	r4, r3
 8003a86:	4b56      	ldr	r3, [pc, #344]	; (8003be0 <validate_packet+0x220>)
 8003a88:	f893 3ba4 	ldrb.w	r3, [r3, #2980]	; 0xba4
 8003a8c:	4a54      	ldr	r2, [pc, #336]	; (8003be0 <validate_packet+0x220>)
 8003a8e:	f892 2ca8 	ldrb.w	r2, [r2, #3240]	; 0xca8
 8003a92:	9201      	str	r2, [sp, #4]
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	4b54      	ldr	r3, [pc, #336]	; (8003be8 <validate_packet+0x228>)
 8003a98:	4622      	mov	r2, r4
 8003a9a:	f000 f8a7 	bl	8003bec <FRAME_SYNC_Send_Frame>
						FS_Data.stored_packet.buffer, FS_Data.stored_packet.length, FS_Data.stored_packet.is_requiring_reply);
			}
			break;
 8003a9e:	e095      	b.n	8003bcc <validate_packet+0x20c>
		default:	// Received normal data
			if(FS_Data.rx_packet.temp_des_id == FS_Data.my_id)
 8003aa0:	4b4f      	ldr	r3, [pc, #316]	; (8003be0 <validate_packet+0x220>)
 8003aa2:	f893 2a89 	ldrb.w	r2, [r3, #2697]	; 0xa89
 8003aa6:	4b4e      	ldr	r3, [pc, #312]	; (8003be0 <validate_packet+0x220>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	f040 8090 	bne.w	8003bd0 <validate_packet+0x210>
			{
				if(FS_Data.device_state == FRAME_SYNC_WAITING_REPLY)
 8003ab0:	4b4b      	ldr	r3, [pc, #300]	; (8003be0 <validate_packet+0x220>)
 8003ab2:	785b      	ldrb	r3, [r3, #1]
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d122      	bne.n	8003afe <validate_packet+0x13e>
				{
					FS_Data.device_state = FRAME_SYNC_READY_TO_TRANSMIT;
 8003ab8:	4b49      	ldr	r3, [pc, #292]	; (8003be0 <validate_packet+0x220>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	705a      	strb	r2, [r3, #1]
					temp_data = ACK;
 8003abe:	23ff      	movs	r3, #255	; 0xff
 8003ac0:	71fb      	strb	r3, [r7, #7]
					FRAME_SYNC_Send_Frame(FS_Data.rx_packet.src_id, FS_Data.rx_packet.src_id, 1, &temp_data, 1, 0);
 8003ac2:	4b47      	ldr	r3, [pc, #284]	; (8003be0 <validate_packet+0x220>)
 8003ac4:	f893 0a8a 	ldrb.w	r0, [r3, #2698]	; 0xa8a
 8003ac8:	4b45      	ldr	r3, [pc, #276]	; (8003be0 <validate_packet+0x220>)
 8003aca:	f893 1a8a 	ldrb.w	r1, [r3, #2698]	; 0xa8a
 8003ace:	1dfb      	adds	r3, r7, #7
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	9201      	str	r2, [sp, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	9200      	str	r2, [sp, #0]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f000 f887 	bl	8003bec <FRAME_SYNC_Send_Frame>
					FRAME_SYNC_RxCpltCallback(FS_Data.rx_packet);
 8003ade:	4c40      	ldr	r4, [pc, #256]	; (8003be0 <validate_packet+0x220>)
 8003ae0:	4668      	mov	r0, sp
 8003ae2:	f604 2398 	addw	r3, r4, #2712	; 0xa98
 8003ae6:	22fc      	movs	r2, #252	; 0xfc
 8003ae8:	4619      	mov	r1, r3
 8003aea:	f001 f931 	bl	8004d50 <memcpy>
 8003aee:	f604 2388 	addw	r3, r4, #2696	; 0xa88
 8003af2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003af4:	f7fc fd94 	bl	8000620 <FRAME_SYNC_RxCpltCallback>
					Rx_Reset();
 8003af8:	f7ff ff30 	bl	800395c <Rx_Reset>
					return;
 8003afc:	e06d      	b.n	8003bda <validate_packet+0x21a>
				}

				FS_Data.device_state = FRAME_SYNC_READY_TO_TRANSMIT;
 8003afe:	4b38      	ldr	r3, [pc, #224]	; (8003be0 <validate_packet+0x220>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	705a      	strb	r2, [r3, #1]
				temp_data = ACK;
 8003b04:	23ff      	movs	r3, #255	; 0xff
 8003b06:	71fb      	strb	r3, [r7, #7]
				FRAME_SYNC_Send_Frame(FS_Data.rx_packet.src_id, FS_Data.rx_packet.src_id, 1, &temp_data, 1, 0);
 8003b08:	4b35      	ldr	r3, [pc, #212]	; (8003be0 <validate_packet+0x220>)
 8003b0a:	f893 0a8a 	ldrb.w	r0, [r3, #2698]	; 0xa8a
 8003b0e:	4b34      	ldr	r3, [pc, #208]	; (8003be0 <validate_packet+0x220>)
 8003b10:	f893 1a8a 	ldrb.w	r1, [r3, #2698]	; 0xa8a
 8003b14:	1dfb      	adds	r3, r7, #7
 8003b16:	2200      	movs	r2, #0
 8003b18:	9201      	str	r2, [sp, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	9200      	str	r2, [sp, #0]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f000 f864 	bl	8003bec <FRAME_SYNC_Send_Frame>

				if(FS_Data.rx_packet.final_des_id > FS_Data.my_id)
 8003b24:	4b2e      	ldr	r3, [pc, #184]	; (8003be0 <validate_packet+0x220>)
 8003b26:	f893 2a88 	ldrb.w	r2, [r3, #2696]	; 0xa88
 8003b2a:	4b2d      	ldr	r3, [pc, #180]	; (8003be0 <validate_packet+0x220>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d91a      	bls.n	8003b68 <validate_packet+0x1a8>
				{
					FRAME_SYNC_Send_Frame(FS_Data.rx_packet.final_des_id, FS_Data.rx_packet.temp_des_id + 1, FS_Data.rx_packet.time_to_live - 1,
 8003b32:	4b2b      	ldr	r3, [pc, #172]	; (8003be0 <validate_packet+0x220>)
 8003b34:	f893 0a88 	ldrb.w	r0, [r3, #2696]	; 0xa88
 8003b38:	4b29      	ldr	r3, [pc, #164]	; (8003be0 <validate_packet+0x220>)
 8003b3a:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8003b3e:	3301      	adds	r3, #1
 8003b40:	b2d9      	uxtb	r1, r3
 8003b42:	4b27      	ldr	r3, [pc, #156]	; (8003be0 <validate_packet+0x220>)
 8003b44:	f993 3a8b 	ldrsb.w	r3, [r3, #2699]	; 0xa8b
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b2dc      	uxtb	r4, r3
 8003b4e:	4b24      	ldr	r3, [pc, #144]	; (8003be0 <validate_packet+0x220>)
 8003b50:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8003b54:	4a22      	ldr	r2, [pc, #136]	; (8003be0 <validate_packet+0x220>)
 8003b56:	f892 2ca8 	ldrb.w	r2, [r2, #3240]	; 0xca8
 8003b5a:	9201      	str	r2, [sp, #4]
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	4b21      	ldr	r3, [pc, #132]	; (8003be4 <validate_packet+0x224>)
 8003b60:	4622      	mov	r2, r4
 8003b62:	f000 f843 	bl	8003bec <FRAME_SYNC_Send_Frame>
				{
					FRAME_SYNC_RxCpltCallback(FS_Data.rx_packet);
				}
			}

			break;
 8003b66:	e033      	b.n	8003bd0 <validate_packet+0x210>
				else if(FS_Data.rx_packet.final_des_id < FS_Data.my_id)
 8003b68:	4b1d      	ldr	r3, [pc, #116]	; (8003be0 <validate_packet+0x220>)
 8003b6a:	f893 2a88 	ldrb.w	r2, [r3, #2696]	; 0xa88
 8003b6e:	4b1c      	ldr	r3, [pc, #112]	; (8003be0 <validate_packet+0x220>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d21a      	bcs.n	8003bac <validate_packet+0x1ec>
					FRAME_SYNC_Send_Frame(FS_Data.rx_packet.final_des_id, FS_Data.rx_packet.temp_des_id - 1, FS_Data.rx_packet.time_to_live - 1,
 8003b76:	4b1a      	ldr	r3, [pc, #104]	; (8003be0 <validate_packet+0x220>)
 8003b78:	f893 0a88 	ldrb.w	r0, [r3, #2696]	; 0xa88
 8003b7c:	4b18      	ldr	r3, [pc, #96]	; (8003be0 <validate_packet+0x220>)
 8003b7e:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8003b82:	3b01      	subs	r3, #1
 8003b84:	b2d9      	uxtb	r1, r3
 8003b86:	4b16      	ldr	r3, [pc, #88]	; (8003be0 <validate_packet+0x220>)
 8003b88:	f993 3a8b 	ldrsb.w	r3, [r3, #2699]	; 0xa8b
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	b2dc      	uxtb	r4, r3
 8003b92:	4b13      	ldr	r3, [pc, #76]	; (8003be0 <validate_packet+0x220>)
 8003b94:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8003b98:	4a11      	ldr	r2, [pc, #68]	; (8003be0 <validate_packet+0x220>)
 8003b9a:	f892 2ca8 	ldrb.w	r2, [r2, #3240]	; 0xca8
 8003b9e:	9201      	str	r2, [sp, #4]
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	4b10      	ldr	r3, [pc, #64]	; (8003be4 <validate_packet+0x224>)
 8003ba4:	4622      	mov	r2, r4
 8003ba6:	f000 f821 	bl	8003bec <FRAME_SYNC_Send_Frame>
			break;
 8003baa:	e011      	b.n	8003bd0 <validate_packet+0x210>
					FRAME_SYNC_RxCpltCallback(FS_Data.rx_packet);
 8003bac:	4c0c      	ldr	r4, [pc, #48]	; (8003be0 <validate_packet+0x220>)
 8003bae:	4668      	mov	r0, sp
 8003bb0:	f604 2398 	addw	r3, r4, #2712	; 0xa98
 8003bb4:	22fc      	movs	r2, #252	; 0xfc
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	f001 f8ca 	bl	8004d50 <memcpy>
 8003bbc:	f604 2388 	addw	r3, r4, #2696	; 0xa88
 8003bc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bc2:	f7fc fd2d 	bl	8000620 <FRAME_SYNC_RxCpltCallback>
			break;
 8003bc6:	e003      	b.n	8003bd0 <validate_packet+0x210>
			break;
 8003bc8:	bf00      	nop
 8003bca:	e002      	b.n	8003bd2 <validate_packet+0x212>
			break;
 8003bcc:	bf00      	nop
 8003bce:	e000      	b.n	8003bd2 <validate_packet+0x212>
			break;
 8003bd0:	bf00      	nop
	}
	Rx_Reset();
 8003bd2:	f7ff fec3 	bl	800395c <Rx_Reset>
 8003bd6:	e000      	b.n	8003bda <validate_packet+0x21a>
	if(FS_Data.rx_packet.temp_des_id != FS_Data.my_id) return;
 8003bd8:	bf00      	nop
}
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd90      	pop	{r4, r7, pc}
 8003be0:	20001668 	.word	0x20001668
 8003be4:	200020f5 	.word	0x200020f5
 8003be8:	2000220d 	.word	0x2000220d

08003bec <FRAME_SYNC_Send_Frame>:
	FS_Data = *p_new_data;
}

// STX Final_Des Temp_Des TTL Len Data 4_byte_CRC EXT
void FRAME_SYNC_Send_Frame(uint8_t final_des_id, uint8_t temp_des_id, uint8_t time_to_live, uint8_t *tx_frame, uint8_t size, uint8_t is_requiring_reply)
{
 8003bec:	b590      	push	{r4, r7, lr}
 8003bee:	b0c7      	sub	sp, #284	; 0x11c
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	4604      	mov	r4, r0
 8003bf4:	4608      	mov	r0, r1
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003bfc:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003c06:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003c0a:	4622      	mov	r2, r4
 8003c0c:	701a      	strb	r2, [r3, #0]
 8003c0e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003c12:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 8003c16:	4602      	mov	r2, r0
 8003c18:	701a      	strb	r2, [r3, #0]
 8003c1a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003c1e:	f2a3 1313 	subw	r3, r3, #275	; 0x113
 8003c22:	460a      	mov	r2, r1
 8003c24:	701a      	strb	r2, [r3, #0]
	uint8_t temp_packet[MAX_LENGTH_DATA] = {STX};
 8003c26:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003c2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003c2e:	2202      	movs	r2, #2
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	3304      	adds	r3, #4
 8003c34:	22fb      	movs	r2, #251	; 0xfb
 8003c36:	2100      	movs	r1, #0
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f001 f897 	bl	8004d6c <memset>
	uint8_t packet_length = 1;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	if(FS_Data.device_state != FRAME_SYNC_READY_TO_TRANSMIT) return;
 8003c44:	4bc3      	ldr	r3, [pc, #780]	; (8003f54 <FRAME_SYNC_Send_Frame+0x368>)
 8003c46:	785b      	ldrb	r3, [r3, #1]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f040 817b 	bne.w	8003f44 <FRAME_SYNC_Send_Frame+0x358>
	if(time_to_live <= 0) return;
 8003c4e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003c52:	f2a3 1313 	subw	r3, r3, #275	; 0x113
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 8175 	beq.w	8003f48 <FRAME_SYNC_Send_Frame+0x35c>
	FS_Data.tx_checksum = 0xFFFFFFFF;
 8003c5e:	4bbd      	ldr	r3, [pc, #756]	; (8003f54 <FRAME_SYNC_Send_Frame+0x368>)
 8003c60:	f04f 32ff 	mov.w	r2, #4294967295
 8003c64:	605a      	str	r2, [r3, #4]

	// Transmit STX

	// Transmit final destination device id
	CRC_Update(&FS_Data.tx_checksum, final_des_id);
 8003c66:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003c6a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	4619      	mov	r1, r3
 8003c72:	48b9      	ldr	r0, [pc, #740]	; (8003f58 <FRAME_SYNC_Send_Frame+0x36c>)
 8003c74:	f7ff fe90 	bl	8003998 <CRC_Update>
	temp_packet[packet_length++] = final_des_id;
 8003c78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	f887 2117 	strb.w	r2, [r7, #279]	; 0x117
 8003c82:	4619      	mov	r1, r3
 8003c84:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003c88:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003c8c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003c90:	f2a2 1211 	subw	r2, r2, #273	; 0x111
 8003c94:	7812      	ldrb	r2, [r2, #0]
 8003c96:	545a      	strb	r2, [r3, r1]

	// Transmit temporary destination device id
	CRC_Update(&FS_Data.tx_checksum, temp_des_id);
 8003c98:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003c9c:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	48ac      	ldr	r0, [pc, #688]	; (8003f58 <FRAME_SYNC_Send_Frame+0x36c>)
 8003ca6:	f7ff fe77 	bl	8003998 <CRC_Update>
	temp_packet[packet_length++] = temp_des_id;
 8003caa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003cae:	1c5a      	adds	r2, r3, #1
 8003cb0:	f887 2117 	strb.w	r2, [r7, #279]	; 0x117
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003cba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003cbe:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003cc2:	f5a2 7289 	sub.w	r2, r2, #274	; 0x112
 8003cc6:	7812      	ldrb	r2, [r2, #0]
 8003cc8:	545a      	strb	r2, [r3, r1]

	// Transmit source device id
	CRC_Update(&FS_Data.tx_checksum, FS_Data.my_id);
 8003cca:	4ba2      	ldr	r3, [pc, #648]	; (8003f54 <FRAME_SYNC_Send_Frame+0x368>)
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	4619      	mov	r1, r3
 8003cd0:	48a1      	ldr	r0, [pc, #644]	; (8003f58 <FRAME_SYNC_Send_Frame+0x36c>)
 8003cd2:	f7ff fe61 	bl	8003998 <CRC_Update>
	temp_packet[packet_length++] = FS_Data.my_id;
 8003cd6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	f887 2117 	strb.w	r2, [r7, #279]	; 0x117
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	4b9c      	ldr	r3, [pc, #624]	; (8003f54 <FRAME_SYNC_Send_Frame+0x368>)
 8003ce4:	7819      	ldrb	r1, [r3, #0]
 8003ce6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003cea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003cee:	5499      	strb	r1, [r3, r2]

	// Transmit time to live
	CRC_Update(&FS_Data.tx_checksum, time_to_live);
 8003cf0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003cf4:	f2a3 1313 	subw	r3, r3, #275	; 0x113
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4896      	ldr	r0, [pc, #600]	; (8003f58 <FRAME_SYNC_Send_Frame+0x36c>)
 8003cfe:	f7ff fe4b 	bl	8003998 <CRC_Update>
	temp_packet[packet_length++] = time_to_live;
 8003d02:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	f887 2117 	strb.w	r2, [r7, #279]	; 0x117
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003d12:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003d16:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003d1a:	f2a2 1213 	subw	r2, r2, #275	; 0x113
 8003d1e:	7812      	ldrb	r2, [r2, #0]
 8003d20:	545a      	strb	r2, [r3, r1]

	// Transmit data length
	CRC_Update(&FS_Data.tx_checksum, size);
 8003d22:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003d26:	4619      	mov	r1, r3
 8003d28:	488b      	ldr	r0, [pc, #556]	; (8003f58 <FRAME_SYNC_Send_Frame+0x36c>)
 8003d2a:	f7ff fe35 	bl	8003998 <CRC_Update>
	temp_packet[packet_length++] = size;
 8003d2e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d32:	1c5a      	adds	r2, r3, #1
 8003d34:	f887 2117 	strb.w	r2, [r7, #279]	; 0x117
 8003d38:	4619      	mov	r1, r3
 8003d3a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003d3e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003d42:	f897 2128 	ldrb.w	r2, [r7, #296]	; 0x128
 8003d46:	545a      	strb	r2, [r3, r1]

	// Transmit data
	for(int i = 0; i < size; i++)
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003d4e:	e036      	b.n	8003dbe <FRAME_SYNC_Send_Frame+0x1d2>
	{
		CRC_Update(&FS_Data.tx_checksum, tx_frame[i]);
 8003d50:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003d54:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003d58:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8003d5c:	6812      	ldr	r2, [r2, #0]
 8003d5e:	4413      	add	r3, r2
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	4619      	mov	r1, r3
 8003d64:	487c      	ldr	r0, [pc, #496]	; (8003f58 <FRAME_SYNC_Send_Frame+0x36c>)
 8003d66:	f7ff fe17 	bl	8003998 <CRC_Update>
		FS_Data.stored_packet.buffer[i] = tx_frame[i];
 8003d6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003d6e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003d72:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8003d76:	6812      	ldr	r2, [r2, #0]
 8003d78:	4413      	add	r3, r2
 8003d7a:	7819      	ldrb	r1, [r3, #0]
 8003d7c:	4a75      	ldr	r2, [pc, #468]	; (8003f54 <FRAME_SYNC_Send_Frame+0x368>)
 8003d7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003d82:	4413      	add	r3, r2
 8003d84:	f603 33a5 	addw	r3, r3, #2981	; 0xba5
 8003d88:	460a      	mov	r2, r1
 8003d8a:	701a      	strb	r2, [r3, #0]
		temp_packet[packet_length++] = tx_frame[i];
 8003d8c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003d90:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003d94:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8003d98:	6812      	ldr	r2, [r2, #0]
 8003d9a:	441a      	add	r2, r3
 8003d9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003da0:	1c59      	adds	r1, r3, #1
 8003da2:	f887 1117 	strb.w	r1, [r7, #279]	; 0x117
 8003da6:	4619      	mov	r1, r3
 8003da8:	7812      	ldrb	r2, [r2, #0]
 8003daa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003dae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003db2:	545a      	strb	r2, [r3, r1]
	for(int i = 0; i < size; i++)
 8003db4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003db8:	3301      	adds	r3, #1
 8003dba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003dbe:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003dc2:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	dbc2      	blt.n	8003d50 <FRAME_SYNC_Send_Frame+0x164>
	}

	// Transmit crc
	FS_Data.tx_checksum = ~FS_Data.tx_checksum;
 8003dca:	4b62      	ldr	r3, [pc, #392]	; (8003f54 <FRAME_SYNC_Send_Frame+0x368>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	43db      	mvns	r3, r3
 8003dd0:	4a60      	ldr	r2, [pc, #384]	; (8003f54 <FRAME_SYNC_Send_Frame+0x368>)
 8003dd2:	6053      	str	r3, [r2, #4]
	temp_packet[packet_length++] = *((uint8_t *)&FS_Data.tx_checksum + 0);
 8003dd4:	4a60      	ldr	r2, [pc, #384]	; (8003f58 <FRAME_SYNC_Send_Frame+0x36c>)
 8003dd6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003dda:	1c59      	adds	r1, r3, #1
 8003ddc:	f887 1117 	strb.w	r1, [r7, #279]	; 0x117
 8003de0:	4619      	mov	r1, r3
 8003de2:	7812      	ldrb	r2, [r2, #0]
 8003de4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003de8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003dec:	545a      	strb	r2, [r3, r1]
	temp_packet[packet_length++] = *((uint8_t *)&FS_Data.tx_checksum + 1);
 8003dee:	4a5b      	ldr	r2, [pc, #364]	; (8003f5c <FRAME_SYNC_Send_Frame+0x370>)
 8003df0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003df4:	1c59      	adds	r1, r3, #1
 8003df6:	f887 1117 	strb.w	r1, [r7, #279]	; 0x117
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	7812      	ldrb	r2, [r2, #0]
 8003dfe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003e06:	545a      	strb	r2, [r3, r1]
	temp_packet[packet_length++] = *((uint8_t *)&FS_Data.tx_checksum + 2);
 8003e08:	4a55      	ldr	r2, [pc, #340]	; (8003f60 <FRAME_SYNC_Send_Frame+0x374>)
 8003e0a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e0e:	1c59      	adds	r1, r3, #1
 8003e10:	f887 1117 	strb.w	r1, [r7, #279]	; 0x117
 8003e14:	4619      	mov	r1, r3
 8003e16:	7812      	ldrb	r2, [r2, #0]
 8003e18:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e1c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003e20:	545a      	strb	r2, [r3, r1]
	temp_packet[packet_length++] = *((uint8_t *)&FS_Data.tx_checksum + 3);
 8003e22:	4a50      	ldr	r2, [pc, #320]	; (8003f64 <FRAME_SYNC_Send_Frame+0x378>)
 8003e24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e28:	1c59      	adds	r1, r3, #1
 8003e2a:	f887 1117 	strb.w	r1, [r7, #279]	; 0x117
 8003e2e:	4619      	mov	r1, r3
 8003e30:	7812      	ldrb	r2, [r2, #0]
 8003e32:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e36:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003e3a:	545a      	strb	r2, [r3, r1]

	// Transmit ETX
//	FRAME_SYNC_Byte_Transmit(ETX);
	temp_packet[packet_length++] = ETX;
 8003e3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e40:	1c5a      	adds	r2, r3, #1
 8003e42:	f887 2117 	strb.w	r2, [r7, #279]	; 0x117
 8003e46:	461a      	mov	r2, r3
 8003e48:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e4c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003e50:	2103      	movs	r1, #3
 8003e52:	5499      	strb	r1, [r3, r2]

	if(*tx_frame != ACK && *tx_frame != NACK)
 8003e54:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e58:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	2bff      	cmp	r3, #255	; 0xff
 8003e62:	d00a      	beq.n	8003e7a <FRAME_SYNC_Send_Frame+0x28e>
 8003e64:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e68:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	2bfe      	cmp	r3, #254	; 0xfe
 8003e72:	d002      	beq.n	8003e7a <FRAME_SYNC_Send_Frame+0x28e>
	{
		FS_Data.device_state = FRAME_SYNC_WAITING_ACK;
 8003e74:	4b37      	ldr	r3, [pc, #220]	; (8003f54 <FRAME_SYNC_Send_Frame+0x368>)
 8003e76:	2201      	movs	r2, #1
 8003e78:	705a      	strb	r2, [r3, #1]
	}

	FS_Data.stored_packet.final_des_id = final_des_id;
 8003e7a:	4a36      	ldr	r2, [pc, #216]	; (8003f54 <FRAME_SYNC_Send_Frame+0x368>)
 8003e7c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e80:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	f882 3ba0 	strb.w	r3, [r2, #2976]	; 0xba0
	FS_Data.stored_packet.temp_des_id = temp_des_id;
 8003e8a:	4a32      	ldr	r2, [pc, #200]	; (8003f54 <FRAME_SYNC_Send_Frame+0x368>)
 8003e8c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e90:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	f882 3ba1 	strb.w	r3, [r2, #2977]	; 0xba1
	FS_Data.stored_packet.src_id = FS_Data.my_id;
 8003e9a:	4b2e      	ldr	r3, [pc, #184]	; (8003f54 <FRAME_SYNC_Send_Frame+0x368>)
 8003e9c:	781a      	ldrb	r2, [r3, #0]
 8003e9e:	4b2d      	ldr	r3, [pc, #180]	; (8003f54 <FRAME_SYNC_Send_Frame+0x368>)
 8003ea0:	f883 2ba2 	strb.w	r2, [r3, #2978]	; 0xba2
	FS_Data.stored_packet.time_to_live = time_to_live;
 8003ea4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003ea8:	f2a3 1313 	subw	r3, r3, #275	; 0x113
 8003eac:	f993 2000 	ldrsb.w	r2, [r3]
 8003eb0:	4b28      	ldr	r3, [pc, #160]	; (8003f54 <FRAME_SYNC_Send_Frame+0x368>)
 8003eb2:	f883 2ba3 	strb.w	r2, [r3, #2979]	; 0xba3
	FS_Data.stored_packet.length = size;
 8003eb6:	4a27      	ldr	r2, [pc, #156]	; (8003f54 <FRAME_SYNC_Send_Frame+0x368>)
 8003eb8:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003ebc:	f882 3ba4 	strb.w	r3, [r2, #2980]	; 0xba4
	for(int i = 0; i < size; i++)
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003ec6:	e015      	b.n	8003ef4 <FRAME_SYNC_Send_Frame+0x308>
	{
		FS_Data.stored_packet.buffer[i] = tx_frame[i];
 8003ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ecc:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003ed0:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8003ed4:	6812      	ldr	r2, [r2, #0]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	7819      	ldrb	r1, [r3, #0]
 8003eda:	4a1e      	ldr	r2, [pc, #120]	; (8003f54 <FRAME_SYNC_Send_Frame+0x368>)
 8003edc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f603 33a5 	addw	r3, r3, #2981	; 0xba5
 8003ee6:	460a      	mov	r2, r1
 8003ee8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < size; i++)
 8003eea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eee:	3301      	adds	r3, #1
 8003ef0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003ef4:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8003ef8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003efc:	429a      	cmp	r2, r3
 8003efe:	dbe3      	blt.n	8003ec8 <FRAME_SYNC_Send_Frame+0x2dc>
	}
	FS_Data.stored_packet.crc32 = FS_Data.tx_checksum;
 8003f00:	4b14      	ldr	r3, [pc, #80]	; (8003f54 <FRAME_SYNC_Send_Frame+0x368>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	4a13      	ldr	r2, [pc, #76]	; (8003f54 <FRAME_SYNC_Send_Frame+0x368>)
 8003f06:	f8c2 3ca4 	str.w	r3, [r2, #3236]	; 0xca4
	if(FS_Data.my_id == 0)
 8003f0a:	4b12      	ldr	r3, [pc, #72]	; (8003f54 <FRAME_SYNC_Send_Frame+0x368>)
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d105      	bne.n	8003f1e <FRAME_SYNC_Send_Frame+0x332>
	{
		FS_Data.stored_packet.is_requiring_reply = is_requiring_reply;
 8003f12:	4a10      	ldr	r2, [pc, #64]	; (8003f54 <FRAME_SYNC_Send_Frame+0x368>)
 8003f14:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8003f18:	f882 3ca8 	strb.w	r3, [r2, #3240]	; 0xca8
 8003f1c:	e003      	b.n	8003f26 <FRAME_SYNC_Send_Frame+0x33a>
	}
	else
	{
		FS_Data.stored_packet.is_requiring_reply = 0;
 8003f1e:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <FRAME_SYNC_Send_Frame+0x368>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2ca8 	strb.w	r2, [r3, #3240]	; 0xca8
	}


	FS_Data.last_transmit_frame_timer = HAL_GetTick();
 8003f26:	f7fd f979 	bl	800121c <HAL_GetTick>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	4a09      	ldr	r2, [pc, #36]	; (8003f54 <FRAME_SYNC_Send_Frame+0x368>)
 8003f2e:	f8c2 3b9c 	str.w	r3, [r2, #2972]	; 0xb9c

	FRAME_SYNC_Packet_Transmit(temp_packet, packet_length);
 8003f32:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 8003f36:	f107 030c 	add.w	r3, r7, #12
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fc fc1f 	bl	8000780 <FRAME_SYNC_Packet_Transmit>
 8003f42:	e002      	b.n	8003f4a <FRAME_SYNC_Send_Frame+0x35e>
	if(FS_Data.device_state != FRAME_SYNC_READY_TO_TRANSMIT) return;
 8003f44:	bf00      	nop
 8003f46:	e000      	b.n	8003f4a <FRAME_SYNC_Send_Frame+0x35e>
	if(time_to_live <= 0) return;
 8003f48:	bf00      	nop
}
 8003f4a:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd90      	pop	{r4, r7, pc}
 8003f52:	bf00      	nop
 8003f54:	20001668 	.word	0x20001668
 8003f58:	2000166c 	.word	0x2000166c
 8003f5c:	2000166d 	.word	0x2000166d
 8003f60:	2000166e 	.word	0x2000166e
 8003f64:	2000166f 	.word	0x2000166f

08003f68 <FRAME_SYNC_Receive>:

void FRAME_SYNC_Receive(uint8_t rx_data)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	71fb      	strb	r3, [r7, #7]
	switch(FS_Data.rx_state)
 8003f72:	4b6b      	ldr	r3, [pc, #428]	; (8004120 <FRAME_SYNC_Receive+0x1b8>)
 8003f74:	f893 3a84 	ldrb.w	r3, [r3, #2692]	; 0xa84
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	f200 80c2 	bhi.w	8004102 <FRAME_SYNC_Receive+0x19a>
 8003f7e:	a201      	add	r2, pc, #4	; (adr r2, 8003f84 <FRAME_SYNC_Receive+0x1c>)
 8003f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f84:	08003fa9 	.word	0x08003fa9
 8003f88:	08003fc9 	.word	0x08003fc9
 8003f8c:	08003fe5 	.word	0x08003fe5
 8003f90:	0800400d 	.word	0x0800400d
 8003f94:	08004029 	.word	0x08004029
 8003f98:	08004047 	.word	0x08004047
 8003f9c:	08004063 	.word	0x08004063
 8003fa0:	080040a3 	.word	0x080040a3
 8003fa4:	080040e3 	.word	0x080040e3
	{
		case SEARCHING_STX:
			if(rx_data == STX)
 8003fa8:	79fb      	ldrb	r3, [r7, #7]
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d109      	bne.n	8003fc2 <FRAME_SYNC_Receive+0x5a>
			{
				FS_Data.rx_checksum = 0xFFFFFFFF;
 8003fae:	4b5c      	ldr	r3, [pc, #368]	; (8004120 <FRAME_SYNC_Receive+0x1b8>)
 8003fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb4:	f8c3 2a80 	str.w	r2, [r3, #2688]	; 0xa80
				FS_Data.rx_state = RECEIVING_FINAL_DES_ID;
 8003fb8:	4b59      	ldr	r3, [pc, #356]	; (8004120 <FRAME_SYNC_Receive+0x1b8>)
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2a84 	strb.w	r2, [r3, #2692]	; 0xa84
			else
			{
				Rx_Reset();
//				FRAME_SYNC_RxFailCallback(FS_Data.rx_packet.buffer, FS_Data.rx_packet.length);
			}
			break;
 8003fc0:	e0a4      	b.n	800410c <FRAME_SYNC_Receive+0x1a4>
				Rx_Reset();
 8003fc2:	f7ff fccb 	bl	800395c <Rx_Reset>
			break;
 8003fc6:	e0a1      	b.n	800410c <FRAME_SYNC_Receive+0x1a4>
		case RECEIVING_FINAL_DES_ID:
			CRC_Update(&FS_Data.rx_checksum, rx_data);
 8003fc8:	79fb      	ldrb	r3, [r7, #7]
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4855      	ldr	r0, [pc, #340]	; (8004124 <FRAME_SYNC_Receive+0x1bc>)
 8003fce:	f7ff fce3 	bl	8003998 <CRC_Update>
			FS_Data.rx_packet.final_des_id = rx_data;
 8003fd2:	4a53      	ldr	r2, [pc, #332]	; (8004120 <FRAME_SYNC_Receive+0x1b8>)
 8003fd4:	79fb      	ldrb	r3, [r7, #7]
 8003fd6:	f882 3a88 	strb.w	r3, [r2, #2696]	; 0xa88
			FS_Data.rx_state = RECEIVING_TEMP_DES_ID;
 8003fda:	4b51      	ldr	r3, [pc, #324]	; (8004120 <FRAME_SYNC_Receive+0x1b8>)
 8003fdc:	2202      	movs	r2, #2
 8003fde:	f883 2a84 	strb.w	r2, [r3, #2692]	; 0xa84
			break;
 8003fe2:	e093      	b.n	800410c <FRAME_SYNC_Receive+0x1a4>
		case RECEIVING_TEMP_DES_ID:
			if(rx_data != MY_ID)
 8003fe4:	79fb      	ldrb	r3, [r7, #7]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <FRAME_SYNC_Receive+0x88>
			{
				Rx_Reset();
 8003fea:	f7ff fcb7 	bl	800395c <Rx_Reset>
				return;
 8003fee:	e093      	b.n	8004118 <FRAME_SYNC_Receive+0x1b0>
			}
			CRC_Update(&FS_Data.rx_checksum, rx_data);
 8003ff0:	79fb      	ldrb	r3, [r7, #7]
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	484b      	ldr	r0, [pc, #300]	; (8004124 <FRAME_SYNC_Receive+0x1bc>)
 8003ff6:	f7ff fccf 	bl	8003998 <CRC_Update>
			FS_Data.rx_packet.temp_des_id = rx_data;
 8003ffa:	4a49      	ldr	r2, [pc, #292]	; (8004120 <FRAME_SYNC_Receive+0x1b8>)
 8003ffc:	79fb      	ldrb	r3, [r7, #7]
 8003ffe:	f882 3a89 	strb.w	r3, [r2, #2697]	; 0xa89
			FS_Data.rx_state = RECEIVING_SRC_ID;
 8004002:	4b47      	ldr	r3, [pc, #284]	; (8004120 <FRAME_SYNC_Receive+0x1b8>)
 8004004:	2203      	movs	r2, #3
 8004006:	f883 2a84 	strb.w	r2, [r3, #2692]	; 0xa84
			break;
 800400a:	e07f      	b.n	800410c <FRAME_SYNC_Receive+0x1a4>
		case RECEIVING_SRC_ID:
			CRC_Update(&FS_Data.rx_checksum, rx_data);
 800400c:	79fb      	ldrb	r3, [r7, #7]
 800400e:	4619      	mov	r1, r3
 8004010:	4844      	ldr	r0, [pc, #272]	; (8004124 <FRAME_SYNC_Receive+0x1bc>)
 8004012:	f7ff fcc1 	bl	8003998 <CRC_Update>
			FS_Data.rx_packet.src_id = rx_data;
 8004016:	4a42      	ldr	r2, [pc, #264]	; (8004120 <FRAME_SYNC_Receive+0x1b8>)
 8004018:	79fb      	ldrb	r3, [r7, #7]
 800401a:	f882 3a8a 	strb.w	r3, [r2, #2698]	; 0xa8a
			FS_Data.rx_state = RECEIVING_TIME_TO_LIVE;
 800401e:	4b40      	ldr	r3, [pc, #256]	; (8004120 <FRAME_SYNC_Receive+0x1b8>)
 8004020:	2204      	movs	r2, #4
 8004022:	f883 2a84 	strb.w	r2, [r3, #2692]	; 0xa84
			break;
 8004026:	e071      	b.n	800410c <FRAME_SYNC_Receive+0x1a4>
		case RECEIVING_TIME_TO_LIVE:
			CRC_Update(&FS_Data.rx_checksum, rx_data);
 8004028:	79fb      	ldrb	r3, [r7, #7]
 800402a:	4619      	mov	r1, r3
 800402c:	483d      	ldr	r0, [pc, #244]	; (8004124 <FRAME_SYNC_Receive+0x1bc>)
 800402e:	f7ff fcb3 	bl	8003998 <CRC_Update>
			FS_Data.rx_packet.time_to_live = rx_data;
 8004032:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8004036:	4b3a      	ldr	r3, [pc, #232]	; (8004120 <FRAME_SYNC_Receive+0x1b8>)
 8004038:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
			FS_Data.rx_state = RECEIVING_DATA_LEN;
 800403c:	4b38      	ldr	r3, [pc, #224]	; (8004120 <FRAME_SYNC_Receive+0x1b8>)
 800403e:	2205      	movs	r2, #5
 8004040:	f883 2a84 	strb.w	r2, [r3, #2692]	; 0xa84
			break;
 8004044:	e062      	b.n	800410c <FRAME_SYNC_Receive+0x1a4>
		case RECEIVING_DATA_LEN:
			CRC_Update(&FS_Data.rx_checksum, rx_data);
 8004046:	79fb      	ldrb	r3, [r7, #7]
 8004048:	4619      	mov	r1, r3
 800404a:	4836      	ldr	r0, [pc, #216]	; (8004124 <FRAME_SYNC_Receive+0x1bc>)
 800404c:	f7ff fca4 	bl	8003998 <CRC_Update>
			FS_Data.rx_packet.length = rx_data;
 8004050:	4a33      	ldr	r2, [pc, #204]	; (8004120 <FRAME_SYNC_Receive+0x1b8>)
 8004052:	79fb      	ldrb	r3, [r7, #7]
 8004054:	f882 3a8c 	strb.w	r3, [r2, #2700]	; 0xa8c
			FS_Data.rx_state = RECEIVING_DATA;
 8004058:	4b31      	ldr	r3, [pc, #196]	; (8004120 <FRAME_SYNC_Receive+0x1b8>)
 800405a:	2206      	movs	r2, #6
 800405c:	f883 2a84 	strb.w	r2, [r3, #2692]	; 0xa84
			break;
 8004060:	e054      	b.n	800410c <FRAME_SYNC_Receive+0x1a4>
		case RECEIVING_DATA:
			CRC_Update(&FS_Data.rx_checksum, rx_data);
 8004062:	79fb      	ldrb	r3, [r7, #7]
 8004064:	4619      	mov	r1, r3
 8004066:	482f      	ldr	r0, [pc, #188]	; (8004124 <FRAME_SYNC_Receive+0x1bc>)
 8004068:	f7ff fc96 	bl	8003998 <CRC_Update>
			FS_Data.rx_packet.buffer[FS_Data.rx_pointer++] = rx_data;
 800406c:	4b2c      	ldr	r3, [pc, #176]	; (8004120 <FRAME_SYNC_Receive+0x1b8>)
 800406e:	f893 3a85 	ldrb.w	r3, [r3, #2693]	; 0xa85
 8004072:	1c5a      	adds	r2, r3, #1
 8004074:	b2d1      	uxtb	r1, r2
 8004076:	4a2a      	ldr	r2, [pc, #168]	; (8004120 <FRAME_SYNC_Receive+0x1b8>)
 8004078:	f882 1a85 	strb.w	r1, [r2, #2693]	; 0xa85
 800407c:	461a      	mov	r2, r3
 800407e:	4b28      	ldr	r3, [pc, #160]	; (8004120 <FRAME_SYNC_Receive+0x1b8>)
 8004080:	4413      	add	r3, r2
 8004082:	79fa      	ldrb	r2, [r7, #7]
 8004084:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d
			if(FS_Data.rx_pointer == FS_Data.rx_packet.length)
 8004088:	4b25      	ldr	r3, [pc, #148]	; (8004120 <FRAME_SYNC_Receive+0x1b8>)
 800408a:	f893 2a85 	ldrb.w	r2, [r3, #2693]	; 0xa85
 800408e:	4b24      	ldr	r3, [pc, #144]	; (8004120 <FRAME_SYNC_Receive+0x1b8>)
 8004090:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8004094:	429a      	cmp	r2, r3
 8004096:	d136      	bne.n	8004106 <FRAME_SYNC_Receive+0x19e>
			{
				FS_Data.rx_state = RECEIVING_CRC;
 8004098:	4b21      	ldr	r3, [pc, #132]	; (8004120 <FRAME_SYNC_Receive+0x1b8>)
 800409a:	2207      	movs	r2, #7
 800409c:	f883 2a84 	strb.w	r2, [r3, #2692]	; 0xa84
			}
			break;
 80040a0:	e031      	b.n	8004106 <FRAME_SYNC_Receive+0x19e>
		case RECEIVING_CRC:
			FS_Data.rx_packet.crc32 |= (uint32_t)rx_data << ((FS_Data.rx_num_crc_byte) * 8);
 80040a2:	4b1f      	ldr	r3, [pc, #124]	; (8004120 <FRAME_SYNC_Receive+0x1b8>)
 80040a4:	f8d3 2b8c 	ldr.w	r2, [r3, #2956]	; 0xb8c
 80040a8:	79f9      	ldrb	r1, [r7, #7]
 80040aa:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <FRAME_SYNC_Receive+0x1b8>)
 80040ac:	f893 3b94 	ldrb.w	r3, [r3, #2964]	; 0xb94
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	fa01 f303 	lsl.w	r3, r1, r3
 80040b6:	4313      	orrs	r3, r2
 80040b8:	4a19      	ldr	r2, [pc, #100]	; (8004120 <FRAME_SYNC_Receive+0x1b8>)
 80040ba:	f8c2 3b8c 	str.w	r3, [r2, #2956]	; 0xb8c
			FS_Data.rx_num_crc_byte++;
 80040be:	4b18      	ldr	r3, [pc, #96]	; (8004120 <FRAME_SYNC_Receive+0x1b8>)
 80040c0:	f893 3b94 	ldrb.w	r3, [r3, #2964]	; 0xb94
 80040c4:	3301      	adds	r3, #1
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	4b15      	ldr	r3, [pc, #84]	; (8004120 <FRAME_SYNC_Receive+0x1b8>)
 80040ca:	f883 2b94 	strb.w	r2, [r3, #2964]	; 0xb94
			if(FS_Data.rx_num_crc_byte == 4)
 80040ce:	4b14      	ldr	r3, [pc, #80]	; (8004120 <FRAME_SYNC_Receive+0x1b8>)
 80040d0:	f893 3b94 	ldrb.w	r3, [r3, #2964]	; 0xb94
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d118      	bne.n	800410a <FRAME_SYNC_Receive+0x1a2>
			{
				FS_Data.rx_state = RECEIVING_ETX;
 80040d8:	4b11      	ldr	r3, [pc, #68]	; (8004120 <FRAME_SYNC_Receive+0x1b8>)
 80040da:	2208      	movs	r2, #8
 80040dc:	f883 2a84 	strb.w	r2, [r3, #2692]	; 0xa84
			}
			break;
 80040e0:	e013      	b.n	800410a <FRAME_SYNC_Receive+0x1a2>
		case RECEIVING_ETX:
			if(rx_data == ETX)
 80040e2:	79fb      	ldrb	r3, [r7, #7]
 80040e4:	2b03      	cmp	r3, #3
 80040e6:	d102      	bne.n	80040ee <FRAME_SYNC_Receive+0x186>
			{
				validate_packet();
 80040e8:	f7ff fc6a 	bl	80039c0 <validate_packet>
			else
			{
				Rx_Reset();
				FRAME_SYNC_RxFailCallback(FS_Data.rx_packet.buffer, FS_Data.rx_packet.length);
			}
			break;
 80040ec:	e00e      	b.n	800410c <FRAME_SYNC_Receive+0x1a4>
				Rx_Reset();
 80040ee:	f7ff fc35 	bl	800395c <Rx_Reset>
				FRAME_SYNC_RxFailCallback(FS_Data.rx_packet.buffer, FS_Data.rx_packet.length);
 80040f2:	4b0b      	ldr	r3, [pc, #44]	; (8004120 <FRAME_SYNC_Receive+0x1b8>)
 80040f4:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 80040f8:	4619      	mov	r1, r3
 80040fa:	480b      	ldr	r0, [pc, #44]	; (8004128 <FRAME_SYNC_Receive+0x1c0>)
 80040fc:	f7fc faf8 	bl	80006f0 <FRAME_SYNC_RxFailCallback>
			break;
 8004100:	e004      	b.n	800410c <FRAME_SYNC_Receive+0x1a4>
		default:
			break;
 8004102:	bf00      	nop
 8004104:	e002      	b.n	800410c <FRAME_SYNC_Receive+0x1a4>
			break;
 8004106:	bf00      	nop
 8004108:	e000      	b.n	800410c <FRAME_SYNC_Receive+0x1a4>
			break;
 800410a:	bf00      	nop
	}

	FS_Data.last_receive_byte_timer = HAL_GetTick();
 800410c:	f7fd f886 	bl	800121c <HAL_GetTick>
 8004110:	4603      	mov	r3, r0
 8004112:	4a03      	ldr	r2, [pc, #12]	; (8004120 <FRAME_SYNC_Receive+0x1b8>)
 8004114:	f8c2 3b98 	str.w	r3, [r2, #2968]	; 0xb98
}
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20001668 	.word	0x20001668
 8004124:	200020e8 	.word	0x200020e8
 8004128:	200020f5 	.word	0x200020f5

0800412c <FRAME_SYNC_Handle>:

void FRAME_SYNC_Handle(){
 800412c:	b590      	push	{r4, r7, lr}
 800412e:	b083      	sub	sp, #12
 8004130:	af02      	add	r7, sp, #8
	if(FS_Data.rx_state != SEARCHING_STX && (HAL_GetTick() - FS_Data.last_receive_byte_timer > WAITING_NEXT_BYTE_TIME))
 8004132:	4b31      	ldr	r3, [pc, #196]	; (80041f8 <FRAME_SYNC_Handle+0xcc>)
 8004134:	f893 3a84 	ldrb.w	r3, [r3, #2692]	; 0xa84
 8004138:	2b00      	cmp	r3, #0
 800413a:	d012      	beq.n	8004162 <FRAME_SYNC_Handle+0x36>
 800413c:	f7fd f86e 	bl	800121c <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	4b2d      	ldr	r3, [pc, #180]	; (80041f8 <FRAME_SYNC_Handle+0xcc>)
 8004144:	f8d3 3b98 	ldr.w	r3, [r3, #2968]	; 0xb98
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800414e:	d908      	bls.n	8004162 <FRAME_SYNC_Handle+0x36>
	{
		Rx_Reset();
 8004150:	f7ff fc04 	bl	800395c <Rx_Reset>
		FRAME_SYNC_RxFailCallback(FS_Data.rx_packet.buffer, FS_Data.rx_packet.length);
 8004154:	4b28      	ldr	r3, [pc, #160]	; (80041f8 <FRAME_SYNC_Handle+0xcc>)
 8004156:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 800415a:	4619      	mov	r1, r3
 800415c:	4827      	ldr	r0, [pc, #156]	; (80041fc <FRAME_SYNC_Handle+0xd0>)
 800415e:	f7fc fac7 	bl	80006f0 <FRAME_SYNC_RxFailCallback>
	}

	if(FS_Data.device_state == FRAME_SYNC_WAITING_ACK && (HAL_GetTick() - FS_Data.last_transmit_frame_timer > WAITING_ACK_TIME))
 8004162:	4b25      	ldr	r3, [pc, #148]	; (80041f8 <FRAME_SYNC_Handle+0xcc>)
 8004164:	785b      	ldrb	r3, [r3, #1]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d12e      	bne.n	80041c8 <FRAME_SYNC_Handle+0x9c>
 800416a:	f7fd f857 	bl	800121c <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	4b21      	ldr	r3, [pc, #132]	; (80041f8 <FRAME_SYNC_Handle+0xcc>)
 8004172:	f8d3 3b9c 	ldr.w	r3, [r3, #2972]	; 0xb9c
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800417c:	4293      	cmp	r3, r2
 800417e:	d923      	bls.n	80041c8 <FRAME_SYNC_Handle+0x9c>
	{
		if(FS_Data.stored_packet.time_to_live - 1 != 0)
 8004180:	4b1d      	ldr	r3, [pc, #116]	; (80041f8 <FRAME_SYNC_Handle+0xcc>)
 8004182:	f993 3ba3 	ldrsb.w	r3, [r3, #2979]	; 0xba3
 8004186:	2b01      	cmp	r3, #1
 8004188:	d01b      	beq.n	80041c2 <FRAME_SYNC_Handle+0x96>
		{
			FS_Data.device_state = FRAME_SYNC_READY_TO_TRANSMIT;
 800418a:	4b1b      	ldr	r3, [pc, #108]	; (80041f8 <FRAME_SYNC_Handle+0xcc>)
 800418c:	2200      	movs	r2, #0
 800418e:	705a      	strb	r2, [r3, #1]
			FRAME_SYNC_Send_Frame(FS_Data.stored_packet.final_des_id, FS_Data.stored_packet.temp_des_id, FS_Data.stored_packet.time_to_live - 1,
 8004190:	4b19      	ldr	r3, [pc, #100]	; (80041f8 <FRAME_SYNC_Handle+0xcc>)
 8004192:	f893 0ba0 	ldrb.w	r0, [r3, #2976]	; 0xba0
 8004196:	4b18      	ldr	r3, [pc, #96]	; (80041f8 <FRAME_SYNC_Handle+0xcc>)
 8004198:	f893 1ba1 	ldrb.w	r1, [r3, #2977]	; 0xba1
 800419c:	4b16      	ldr	r3, [pc, #88]	; (80041f8 <FRAME_SYNC_Handle+0xcc>)
 800419e:	f993 3ba3 	ldrsb.w	r3, [r3, #2979]	; 0xba3
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b2dc      	uxtb	r4, r3
 80041a8:	4b13      	ldr	r3, [pc, #76]	; (80041f8 <FRAME_SYNC_Handle+0xcc>)
 80041aa:	f893 3ba4 	ldrb.w	r3, [r3, #2980]	; 0xba4
 80041ae:	4a12      	ldr	r2, [pc, #72]	; (80041f8 <FRAME_SYNC_Handle+0xcc>)
 80041b0:	f892 2ca8 	ldrb.w	r2, [r2, #3240]	; 0xca8
 80041b4:	9201      	str	r2, [sp, #4]
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	4b11      	ldr	r3, [pc, #68]	; (8004200 <FRAME_SYNC_Handle+0xd4>)
 80041ba:	4622      	mov	r2, r4
 80041bc:	f7ff fd16 	bl	8003bec <FRAME_SYNC_Send_Frame>
 80041c0:	e002      	b.n	80041c8 <FRAME_SYNC_Handle+0x9c>
					FS_Data.stored_packet.buffer, FS_Data.stored_packet.length, FS_Data.stored_packet.is_requiring_reply);
		}
		else
		{
			FS_Data.device_state = FRAME_SYNC_READY_TO_TRANSMIT;
 80041c2:	4b0d      	ldr	r3, [pc, #52]	; (80041f8 <FRAME_SYNC_Handle+0xcc>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	705a      	strb	r2, [r3, #1]
		}
	}

	if(FS_Data.device_state == FRAME_SYNC_WAITING_REPLY && (HAL_GetTick() - FS_Data.last_transmit_frame_timer > WAITING_REPLY_TIME))
 80041c8:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <FRAME_SYNC_Handle+0xcc>)
 80041ca:	785b      	ldrb	r3, [r3, #1]
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d10d      	bne.n	80041ec <FRAME_SYNC_Handle+0xc0>
 80041d0:	f7fd f824 	bl	800121c <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <FRAME_SYNC_Handle+0xcc>)
 80041d8:	f8d3 3b9c 	ldr.w	r3, [r3, #2972]	; 0xb9c
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	f242 7210 	movw	r2, #10000	; 0x2710
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d902      	bls.n	80041ec <FRAME_SYNC_Handle+0xc0>
	{
		FS_Data.device_state = FRAME_SYNC_READY_TO_TRANSMIT;
 80041e6:	4b04      	ldr	r3, [pc, #16]	; (80041f8 <FRAME_SYNC_Handle+0xcc>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	705a      	strb	r2, [r3, #1]
	}

	FRAME_SYNC_Packet_Receive();
 80041ec:	f7fc fae2 	bl	80007b4 <FRAME_SYNC_Packet_Receive>
}
 80041f0:	bf00      	nop
 80041f2:	3704      	adds	r7, #4
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd90      	pop	{r4, r7, pc}
 80041f8:	20001668 	.word	0x20001668
 80041fc:	200020f5 	.word	0x200020f5
 8004200:	2000220d 	.word	0x2000220d

08004204 <FRAME_SYNC_Is_Ready_Transmit>:

uint8_t FRAME_SYNC_Is_Ready_Transmit()
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
	return (FS_Data.device_state == FRAME_SYNC_READY_TO_TRANSMIT) ? 1 : 0;
 8004208:	4b05      	ldr	r3, [pc, #20]	; (8004220 <FRAME_SYNC_Is_Ready_Transmit+0x1c>)
 800420a:	785b      	ldrb	r3, [r3, #1]
 800420c:	2b00      	cmp	r3, #0
 800420e:	bf0c      	ite	eq
 8004210:	2301      	moveq	r3, #1
 8004212:	2300      	movne	r3, #0
 8004214:	b2db      	uxtb	r3, r3
}
 8004216:	4618      	mov	r0, r3
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	20001668 	.word	0x20001668

08004224 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	460b      	mov	r3, r1
 800422e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	78fa      	ldrb	r2, [r7, #3]
 8004236:	4611      	mov	r1, r2
 8004238:	4618      	mov	r0, r3
 800423a:	f000 fbee 	bl	8004a1a <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fc09 	bl	8004a5a <SX1278_hw_SPIReadByte>
 8004248:	4603      	mov	r3, r0
 800424a:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2101      	movs	r1, #1
 8004252:	4618      	mov	r0, r3
 8004254:	f000 fba6 	bl	80049a4 <SX1278_hw_SetNSS>
	return tmp;
 8004258:	7bfb      	ldrb	r3, [r7, #15]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8004262:	b580      	push	{r7, lr}
 8004264:	b082      	sub	sp, #8
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	460b      	mov	r3, r1
 800426c:	70fb      	strb	r3, [r7, #3]
 800426e:	4613      	mov	r3, r2
 8004270:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2100      	movs	r1, #0
 8004278:	4618      	mov	r0, r3
 800427a:	f000 fb93 	bl	80049a4 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	78fb      	ldrb	r3, [r7, #3]
 8004284:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004288:	b2db      	uxtb	r3, r3
 800428a:	4619      	mov	r1, r3
 800428c:	4610      	mov	r0, r2
 800428e:	f000 fbc4 	bl	8004a1a <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	78ba      	ldrb	r2, [r7, #2]
 8004298:	4611      	mov	r1, r2
 800429a:	4618      	mov	r0, r3
 800429c:	f000 fbbd 	bl	8004a1a <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2101      	movs	r1, #1
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fb7c 	bl	80049a4 <SX1278_hw_SetNSS>
}
 80042ac:	bf00      	nop
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 80042b4:	b590      	push	{r4, r7, lr}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	607a      	str	r2, [r7, #4]
 80042be:	461a      	mov	r2, r3
 80042c0:	460b      	mov	r3, r1
 80042c2:	72fb      	strb	r3, [r7, #11]
 80042c4:	4613      	mov	r3, r2
 80042c6:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 80042c8:	7abb      	ldrb	r3, [r7, #10]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d927      	bls.n	800431e <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2100      	movs	r1, #0
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 fb65 	bl	80049a4 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	7afa      	ldrb	r2, [r7, #11]
 80042e0:	4611      	mov	r1, r2
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 fb99 	bl	8004a1a <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80042e8:	2300      	movs	r3, #0
 80042ea:	75fb      	strb	r3, [r7, #23]
 80042ec:	e00c      	b.n	8004308 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6819      	ldr	r1, [r3, #0]
 80042f2:	7dfb      	ldrb	r3, [r7, #23]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	18d4      	adds	r4, r2, r3
 80042f8:	4608      	mov	r0, r1
 80042fa:	f000 fbae 	bl	8004a5a <SX1278_hw_SPIReadByte>
 80042fe:	4603      	mov	r3, r0
 8004300:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8004302:	7dfb      	ldrb	r3, [r7, #23]
 8004304:	3301      	adds	r3, #1
 8004306:	75fb      	strb	r3, [r7, #23]
 8004308:	7dfa      	ldrb	r2, [r7, #23]
 800430a:	7abb      	ldrb	r3, [r7, #10]
 800430c:	429a      	cmp	r2, r3
 800430e:	d3ee      	bcc.n	80042ee <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2101      	movs	r1, #1
 8004316:	4618      	mov	r0, r3
 8004318:	f000 fb44 	bl	80049a4 <SX1278_hw_SetNSS>
 800431c:	e000      	b.n	8004320 <SX1278_SPIBurstRead+0x6c>
		return;
 800431e:	bf00      	nop
	}
}
 8004320:	371c      	adds	r7, #28
 8004322:	46bd      	mov	sp, r7
 8004324:	bd90      	pop	{r4, r7, pc}

08004326 <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8004326:	b580      	push	{r7, lr}
 8004328:	b086      	sub	sp, #24
 800432a:	af00      	add	r7, sp, #0
 800432c:	60f8      	str	r0, [r7, #12]
 800432e:	607a      	str	r2, [r7, #4]
 8004330:	461a      	mov	r2, r3
 8004332:	460b      	mov	r3, r1
 8004334:	72fb      	strb	r3, [r7, #11]
 8004336:	4613      	mov	r3, r2
 8004338:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 800433a:	7abb      	ldrb	r3, [r7, #10]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d929      	bls.n	8004394 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2100      	movs	r1, #0
 8004346:	4618      	mov	r0, r3
 8004348:	f000 fb2c 	bl	80049a4 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	7afb      	ldrb	r3, [r7, #11]
 8004352:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004356:	b2db      	uxtb	r3, r3
 8004358:	4619      	mov	r1, r3
 800435a:	4610      	mov	r0, r2
 800435c:	f000 fb5d 	bl	8004a1a <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8004360:	2300      	movs	r3, #0
 8004362:	75fb      	strb	r3, [r7, #23]
 8004364:	e00b      	b.n	800437e <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	7dfb      	ldrb	r3, [r7, #23]
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	4413      	add	r3, r2
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	4619      	mov	r1, r3
 8004374:	f000 fb51 	bl	8004a1a <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8004378:	7dfb      	ldrb	r3, [r7, #23]
 800437a:	3301      	adds	r3, #1
 800437c:	75fb      	strb	r3, [r7, #23]
 800437e:	7dfa      	ldrb	r2, [r7, #23]
 8004380:	7abb      	ldrb	r3, [r7, #10]
 8004382:	429a      	cmp	r2, r3
 8004384:	d3ef      	bcc.n	8004366 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2101      	movs	r1, #1
 800438c:	4618      	mov	r0, r3
 800438e:	f000 fb09 	bl	80049a4 <SX1278_hw_SetNSS>
 8004392:	e000      	b.n	8004396 <SX1278_SPIBurstWrite+0x70>
		return;
 8004394:	bf00      	nop
	}
}
 8004396:	3718      	adds	r7, #24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f90d 	bl	80045c4 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80043aa:	200f      	movs	r0, #15
 80043ac:	f000 fb7b 	bl	8004aa6 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f917 	bl	80045e4 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80043bc:	f04f 0000 	mov.w	r0, #0
 80043c0:	f04f 0100 	mov.w	r1, #0
 80043c4:	04d9      	lsls	r1, r3, #19
 80043c6:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80043ca:	04d0      	lsls	r0, r2, #19
 80043cc:	4a6f      	ldr	r2, [pc, #444]	; (800458c <SX1278_config+0x1f0>)
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	f7fb fec5 	bl	8000160 <__aeabi_uldivmod>
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 80043de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80043e2:	f04f 0200 	mov.w	r2, #0
 80043e6:	f04f 0300 	mov.w	r3, #0
 80043ea:	0c02      	lsrs	r2, r0, #16
 80043ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80043f0:	0c0b      	lsrs	r3, r1, #16
 80043f2:	b2d3      	uxtb	r3, r2
 80043f4:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 80043f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80043fa:	f04f 0200 	mov.w	r2, #0
 80043fe:	f04f 0300 	mov.w	r3, #0
 8004402:	0a02      	lsrs	r2, r0, #8
 8004404:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004408:	0a0b      	lsrs	r3, r1, #8
 800440a:	b2d3      	uxtb	r3, r2
 800440c:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 800440e:	7c3b      	ldrb	r3, [r7, #16]
 8004410:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 8004412:	f107 020c 	add.w	r2, r7, #12
 8004416:	2303      	movs	r3, #3
 8004418:	2106      	movs	r1, #6
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7ff ff83 	bl	8004326 <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8004420:	2234      	movs	r2, #52	; 0x34
 8004422:	2139      	movs	r1, #57	; 0x39
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f7ff ff1c 	bl	8004262 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	7c1b      	ldrb	r3, [r3, #16]
 800442e:	461a      	mov	r2, r3
 8004430:	4b57      	ldr	r3, [pc, #348]	; (8004590 <SX1278_config+0x1f4>)
 8004432:	5c9b      	ldrb	r3, [r3, r2]
 8004434:	461a      	mov	r2, r3
 8004436:	2109      	movs	r1, #9
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7ff ff12 	bl	8004262 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 800443e:	220b      	movs	r2, #11
 8004440:	210b      	movs	r1, #11
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7ff ff0d 	bl	8004262 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8004448:	2223      	movs	r2, #35	; 0x23
 800444a:	210c      	movs	r1, #12
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7ff ff08 	bl	8004262 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	7c5b      	ldrb	r3, [r3, #17]
 8004456:	461a      	mov	r2, r3
 8004458:	4b4e      	ldr	r3, [pc, #312]	; (8004594 <SX1278_config+0x1f8>)
 800445a:	5c9b      	ldrb	r3, [r3, r2]
 800445c:	2b06      	cmp	r3, #6
 800445e:	d147      	bne.n	80044f0 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	7c9b      	ldrb	r3, [r3, #18]
 8004464:	461a      	mov	r2, r3
 8004466:	4b4c      	ldr	r3, [pc, #304]	; (8004598 <SX1278_config+0x1fc>)
 8004468:	5c9b      	ldrb	r3, [r3, r2]
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	7cdb      	ldrb	r3, [r3, #19]
 8004472:	4619      	mov	r1, r3
 8004474:	4b49      	ldr	r3, [pc, #292]	; (800459c <SX1278_config+0x200>)
 8004476:	5c5b      	ldrb	r3, [r3, r1]
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	b2db      	uxtb	r3, r3
 800447c:	4413      	add	r3, r2
 800447e:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8004480:	3301      	adds	r3, #1
 8004482:	b2db      	uxtb	r3, r3
 8004484:	461a      	mov	r2, r3
 8004486:	211d      	movs	r1, #29
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7ff feea 	bl	8004262 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	7c5b      	ldrb	r3, [r3, #17]
 8004492:	461a      	mov	r2, r3
 8004494:	4b3f      	ldr	r3, [pc, #252]	; (8004594 <SX1278_config+0x1f8>)
 8004496:	5c9b      	ldrb	r3, [r3, r2]
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	7d1b      	ldrb	r3, [r3, #20]
 80044a0:	4619      	mov	r1, r3
 80044a2:	4b3f      	ldr	r3, [pc, #252]	; (80045a0 <SX1278_config+0x204>)
 80044a4:	5c5b      	ldrb	r3, [r3, r1]
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	4413      	add	r3, r2
 80044ac:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80044ae:	3303      	adds	r3, #3
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	461a      	mov	r2, r3
 80044b4:	211e      	movs	r1, #30
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7ff fed3 	bl	8004262 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 80044bc:	2131      	movs	r1, #49	; 0x31
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7ff feb0 	bl	8004224 <SX1278_SPIRead>
 80044c4:	4603      	mov	r3, r0
 80044c6:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
 80044ca:	f023 0307 	bic.w	r3, r3, #7
 80044ce:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
 80044d2:	f043 0305 	orr.w	r3, r3, #5
 80044d6:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	461a      	mov	r2, r3
 80044dc:	2131      	movs	r1, #49	; 0x31
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7ff febf 	bl	8004262 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 80044e4:	220c      	movs	r2, #12
 80044e6:	2137      	movs	r1, #55	; 0x37
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f7ff feba 	bl	8004262 <SX1278_SPIWrite>
 80044ee:	e029      	b.n	8004544 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	7c9b      	ldrb	r3, [r3, #18]
 80044f4:	461a      	mov	r2, r3
 80044f6:	4b28      	ldr	r3, [pc, #160]	; (8004598 <SX1278_config+0x1fc>)
 80044f8:	5c9b      	ldrb	r3, [r3, r2]
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	7cdb      	ldrb	r3, [r3, #19]
 8004502:	4619      	mov	r1, r3
 8004504:	4b25      	ldr	r3, [pc, #148]	; (800459c <SX1278_config+0x200>)
 8004506:	5c5b      	ldrb	r3, [r3, r1]
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800450c:	4413      	add	r3, r2
 800450e:	b2db      	uxtb	r3, r3
 8004510:	461a      	mov	r2, r3
 8004512:	211d      	movs	r1, #29
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7ff fea4 	bl	8004262 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	7c5b      	ldrb	r3, [r3, #17]
 800451e:	461a      	mov	r2, r3
 8004520:	4b1c      	ldr	r3, [pc, #112]	; (8004594 <SX1278_config+0x1f8>)
 8004522:	5c9b      	ldrb	r3, [r3, r2]
 8004524:	011b      	lsls	r3, r3, #4
 8004526:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	7d1b      	ldrb	r3, [r3, #20]
 800452c:	4619      	mov	r1, r3
 800452e:	4b1c      	ldr	r3, [pc, #112]	; (80045a0 <SX1278_config+0x204>)
 8004530:	5c5b      	ldrb	r3, [r3, r1]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8004536:	4413      	add	r3, r2
 8004538:	b2db      	uxtb	r3, r3
 800453a:	461a      	mov	r2, r3
 800453c:	211e      	movs	r1, #30
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7ff fe8f 	bl	8004262 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8004544:	2204      	movs	r2, #4
 8004546:	2126      	movs	r1, #38	; 0x26
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f7ff fe8a 	bl	8004262 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 800454e:	2208      	movs	r2, #8
 8004550:	211f      	movs	r1, #31
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7ff fe85 	bl	8004262 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8004558:	2200      	movs	r2, #0
 800455a:	2120      	movs	r1, #32
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7ff fe80 	bl	8004262 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 8004562:	2208      	movs	r2, #8
 8004564:	2121      	movs	r1, #33	; 0x21
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7ff fe7b 	bl	8004262 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 800456c:	2201      	movs	r2, #1
 800456e:	2141      	movs	r1, #65	; 0x41
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7ff fe76 	bl	8004262 <SX1278_SPIWrite>
	module->readBytes = 0;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	SX1278_standby(module); //Entry standby mode
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f810 	bl	80045a4 <SX1278_standby>
}
 8004584:	bf00      	nop
 8004586:	3718      	adds	r7, #24
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	01e84800 	.word	0x01e84800
 8004590:	0800630c 	.word	0x0800630c
 8004594:	08006310 	.word	0x08006310
 8004598:	08006318 	.word	0x08006318
 800459c:	08006324 	.word	0x08006324
 80045a0:	08006328 	.word	0x08006328

080045a4 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80045ac:	2209      	movs	r2, #9
 80045ae:	2101      	movs	r1, #1
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f7ff fe56 	bl	8004262 <SX1278_SPIWrite>
	module->status = STANDBY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	759a      	strb	r2, [r3, #22]
}
 80045bc:	bf00      	nop
 80045be:	3708      	adds	r7, #8
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 80045cc:	2208      	movs	r2, #8
 80045ce:	2101      	movs	r1, #1
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7ff fe46 	bl	8004262 <SX1278_SPIWrite>
	module->status = SLEEP;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	759a      	strb	r2, [r3, #22]
}
 80045dc:	bf00      	nop
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 80045ec:	2288      	movs	r2, #136	; 0x88
 80045ee:	2101      	movs	r1, #1
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7ff fe36 	bl	8004262 <SX1278_SPIWrite>
}
 80045f6:	bf00      	nop
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 80045fe:	b580      	push	{r7, lr}
 8004600:	b082      	sub	sp, #8
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8004606:	22ff      	movs	r2, #255	; 0xff
 8004608:	2112      	movs	r1, #18
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7ff fe29 	bl	8004262 <SX1278_SPIWrite>
}
 8004610:	bf00      	nop
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	460b      	mov	r3, r1
 8004622:	607a      	str	r2, [r7, #4]
 8004624:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	7afa      	ldrb	r2, [r7, #11]
 800462a:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f7ff feb5 	bl	800439c <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8004632:	2284      	movs	r2, #132	; 0x84
 8004634:	214d      	movs	r1, #77	; 0x4d
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f7ff fe13 	bl	8004262 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 800463c:	22ff      	movs	r2, #255	; 0xff
 800463e:	2124      	movs	r1, #36	; 0x24
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f7ff fe0e 	bl	8004262 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8004646:	2201      	movs	r2, #1
 8004648:	2140      	movs	r1, #64	; 0x40
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f7ff fe09 	bl	8004262 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8004650:	223f      	movs	r2, #63	; 0x3f
 8004652:	2111      	movs	r1, #17
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f7ff fe04 	bl	8004262 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f7ff ffcf 	bl	80045fe <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8004660:	7afb      	ldrb	r3, [r7, #11]
 8004662:	461a      	mov	r2, r3
 8004664:	2122      	movs	r1, #34	; 0x22
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f7ff fdfb 	bl	8004262 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 800466c:	210f      	movs	r1, #15
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f7ff fdd8 	bl	8004224 <SX1278_SPIRead>
 8004674:	4603      	mov	r3, r0
 8004676:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8004678:	7dfb      	ldrb	r3, [r7, #23]
 800467a:	461a      	mov	r2, r3
 800467c:	210d      	movs	r1, #13
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f7ff fdef 	bl	8004262 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8004684:	228d      	movs	r2, #141	; 0x8d
 8004686:	2101      	movs	r1, #1
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f7ff fdea 	bl	8004262 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8004696:	2118      	movs	r1, #24
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f7ff fdc3 	bl	8004224 <SX1278_SPIRead>
 800469e:	4603      	mov	r3, r0
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d104      	bne.n	80046b2 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2203      	movs	r2, #3
 80046ac:	759a      	strb	r2, [r3, #22]
			return 1;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e013      	b.n	80046da <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	3b01      	subs	r3, #1
 80046b6:	607b      	str	r3, [r7, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d109      	bne.n	80046d2 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 f985 	bl	80049d2 <SX1278_hw_Reset>
			SX1278_config(module);
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f7ff fe67 	bl	800439c <SX1278_config>
			return 0;
 80046ce:	2300      	movs	r3, #0
 80046d0:	e003      	b.n	80046da <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 80046d2:	2001      	movs	r0, #1
 80046d4:	f000 f9e7 	bl	8004aa6 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80046d8:	e7dd      	b.n	8004696 <SX1278_LoRaEntryRx+0x7e>
	}
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3718      	adds	r7, #24
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b084      	sub	sp, #16
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 f9e4 	bl	8004abc <SX1278_hw_GetDIO0>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d030      	beq.n	800475c <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3317      	adds	r3, #23
 80046fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004702:	2100      	movs	r1, #0
 8004704:	4618      	mov	r0, r3
 8004706:	f000 fb31 	bl	8004d6c <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 800470a:	2110      	movs	r1, #16
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f7ff fd89 	bl	8004224 <SX1278_SPIRead>
 8004712:	4603      	mov	r3, r0
 8004714:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8004716:	7bbb      	ldrb	r3, [r7, #14]
 8004718:	461a      	mov	r2, r3
 800471a:	210d      	movs	r1, #13
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f7ff fda0 	bl	8004262 <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	7c5b      	ldrb	r3, [r3, #17]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d103      	bne.n	8004732 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	7d5b      	ldrb	r3, [r3, #21]
 800472e:	73fb      	strb	r3, [r7, #15]
 8004730:	e005      	b.n	800473e <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8004732:	2113      	movs	r1, #19
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f7ff fd75 	bl	8004224 <SX1278_SPIRead>
 800473a:	4603      	mov	r3, r0
 800473c:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f103 0217 	add.w	r2, r3, #23
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	2100      	movs	r1, #0
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7ff fdb3 	bl	80042b4 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	7bfa      	ldrb	r2, [r7, #15]
 8004752:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
		SX1278_clearLoRaIrq(module);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7ff ff51 	bl	80045fe <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 800476a:	b580      	push	{r7, lr}
 800476c:	b086      	sub	sp, #24
 800476e:	af00      	add	r7, sp, #0
 8004770:	60f8      	str	r0, [r7, #12]
 8004772:	460b      	mov	r3, r1
 8004774:	607a      	str	r2, [r7, #4]
 8004776:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	7afa      	ldrb	r2, [r7, #11]
 800477c:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f7ff fe0c 	bl	800439c <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8004784:	2287      	movs	r2, #135	; 0x87
 8004786:	214d      	movs	r1, #77	; 0x4d
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f7ff fd6a 	bl	8004262 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 800478e:	2200      	movs	r2, #0
 8004790:	2124      	movs	r1, #36	; 0x24
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f7ff fd65 	bl	8004262 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8004798:	2241      	movs	r2, #65	; 0x41
 800479a:	2140      	movs	r1, #64	; 0x40
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f7ff fd60 	bl	8004262 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f7ff ff2b 	bl	80045fe <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 80047a8:	22f7      	movs	r2, #247	; 0xf7
 80047aa:	2111      	movs	r1, #17
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f7ff fd58 	bl	8004262 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 80047b2:	7afb      	ldrb	r3, [r7, #11]
 80047b4:	461a      	mov	r2, r3
 80047b6:	2122      	movs	r1, #34	; 0x22
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f7ff fd52 	bl	8004262 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 80047be:	210e      	movs	r1, #14
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f7ff fd2f 	bl	8004224 <SX1278_SPIRead>
 80047c6:	4603      	mov	r3, r0
 80047c8:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 80047ca:	7dfb      	ldrb	r3, [r7, #23]
 80047cc:	461a      	mov	r2, r3
 80047ce:	210d      	movs	r1, #13
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f7ff fd46 	bl	8004262 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 80047d6:	2122      	movs	r1, #34	; 0x22
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f7ff fd23 	bl	8004224 <SX1278_SPIRead>
 80047de:	4603      	mov	r3, r0
 80047e0:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 80047e2:	7dba      	ldrb	r2, [r7, #22]
 80047e4:	7afb      	ldrb	r3, [r7, #11]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d104      	bne.n	80047f4 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2202      	movs	r2, #2
 80047ee:	759a      	strb	r2, [r3, #22]
			return 1;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e00e      	b.n	8004812 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	607b      	str	r3, [r7, #4]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1ea      	bne.n	80047d6 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4618      	mov	r0, r3
 8004806:	f000 f8e4 	bl	80049d2 <SX1278_hw_Reset>
			SX1278_config(module);
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f7ff fdc6 	bl	800439c <SX1278_config>
			return 0;
 8004810:	2300      	movs	r3, #0
		}
	}
}
 8004812:	4618      	mov	r0, r3
 8004814:	3718      	adds	r7, #24
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 800481a:	b580      	push	{r7, lr}
 800481c:	b084      	sub	sp, #16
 800481e:	af00      	add	r7, sp, #0
 8004820:	60f8      	str	r0, [r7, #12]
 8004822:	60b9      	str	r1, [r7, #8]
 8004824:	603b      	str	r3, [r7, #0]
 8004826:	4613      	mov	r3, r2
 8004828:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 800482a:	79fb      	ldrb	r3, [r7, #7]
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	2100      	movs	r1, #0
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f7ff fd78 	bl	8004326 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8004836:	228b      	movs	r2, #139	; 0x8b
 8004838:	2101      	movs	r1, #1
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f7ff fd11 	bl	8004262 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f000 f939 	bl	8004abc <SX1278_hw_GetDIO0>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00b      	beq.n	8004868 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8004850:	2112      	movs	r1, #18
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f7ff fce6 	bl	8004224 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f7ff fed0 	bl	80045fe <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f7ff fea0 	bl	80045a4 <SX1278_standby>
			return 1;
 8004864:	2301      	movs	r3, #1
 8004866:	e013      	b.n	8004890 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	3b01      	subs	r3, #1
 800486c:	603b      	str	r3, [r7, #0]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d109      	bne.n	8004888 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4618      	mov	r0, r3
 800487a:	f000 f8aa 	bl	80049d2 <SX1278_hw_Reset>
			SX1278_config(module);
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f7ff fd8c 	bl	800439c <SX1278_config>
			return 0;
 8004884:	2300      	movs	r3, #0
 8004886:	e003      	b.n	8004890 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8004888:	2001      	movs	r0, #1
 800488a:	f000 f90c 	bl	8004aa6 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 800488e:	e7d7      	b.n	8004840 <SX1278_LoRaTxPacket+0x26>
	}
}
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 f866 	bl	800497a <SX1278_hw_init>
	module->frequency = frequency;
 80048ae:	68f9      	ldr	r1, [r7, #12]
 80048b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	7e3a      	ldrb	r2, [r7, #24]
 80048bc:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	7f3a      	ldrb	r2, [r7, #28]
 80048c2:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80048ca:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80048d2:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80048da:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80048e2:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f7ff fd59 	bl	800439c <SX1278_config>
}
 80048ea:	bf00      	nop
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <SX1278_transmit>:

int SX1278_transmit(SX1278_t *module, uint8_t *txBuf, uint8_t length,
		uint32_t timeout) {
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b084      	sub	sp, #16
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	60f8      	str	r0, [r7, #12]
 80048fa:	60b9      	str	r1, [r7, #8]
 80048fc:	603b      	str	r3, [r7, #0]
 80048fe:	4613      	mov	r3, r2
 8004900:	71fb      	strb	r3, [r7, #7]
	if (SX1278_LoRaEntryTx(module, length, timeout)) {
 8004902:	79fb      	ldrb	r3, [r7, #7]
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	4619      	mov	r1, r3
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f7ff ff2e 	bl	800476a <SX1278_LoRaEntryTx>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d007      	beq.n	8004924 <SX1278_transmit+0x32>
		return SX1278_LoRaTxPacket(module, txBuf, length, timeout);
 8004914:	79fa      	ldrb	r2, [r7, #7]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	68b9      	ldr	r1, [r7, #8]
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f7ff ff7d 	bl	800481a <SX1278_LoRaTxPacket>
 8004920:	4603      	mov	r3, r0
 8004922:	e000      	b.n	8004926 <SX1278_transmit+0x34>
	}
	return 0;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 800492e:	b580      	push	{r7, lr}
 8004930:	b084      	sub	sp, #16
 8004932:	af00      	add	r7, sp, #0
 8004934:	60f8      	str	r0, [r7, #12]
 8004936:	60b9      	str	r1, [r7, #8]
 8004938:	4613      	mov	r3, r2
 800493a:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8004942:	79fa      	ldrb	r2, [r7, #7]
 8004944:	429a      	cmp	r2, r3
 8004946:	d003      	beq.n	8004950 <SX1278_read+0x22>
		length = module->readBytes;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 800494e:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	3317      	adds	r3, #23
 8004954:	79fa      	ldrb	r2, [r7, #7]
 8004956:	4619      	mov	r1, r3
 8004958:	68b8      	ldr	r0, [r7, #8]
 800495a:	f000 f9f9 	bl	8004d50 <memcpy>
	rxBuf[length] = '\0';
 800495e:	79fb      	ldrb	r3, [r7, #7]
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	4413      	add	r3, r2
 8004964:	2200      	movs	r2, #0
 8004966:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	return length;
 8004970:	79fb      	ldrb	r3, [r7, #7]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <SX1278_hw_init>:
//#include "gpio.h"
//#include "spi.h"

#include "main.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 800497a:	b580      	push	{r7, lr}
 800497c:	b082      	sub	sp, #8
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8004982:	2101      	movs	r1, #1
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f80d 	bl	80049a4 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6858      	ldr	r0, [r3, #4]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	b29b      	uxth	r3, r3
 8004994:	2201      	movs	r2, #1
 8004996:	4619      	mov	r1, r3
 8004998:	f7fc ffc7 	bl	800192a <HAL_GPIO_WritePin>
}
 800499c:	bf00      	nop
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6958      	ldr	r0, [r3, #20]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	b299      	uxth	r1, r3
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	bf0c      	ite	eq
 80049be:	2301      	moveq	r3, #1
 80049c0:	2300      	movne	r3, #0
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	461a      	mov	r2, r3
 80049c6:	f7fc ffb0 	bl	800192a <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80049ca:	bf00      	nop
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b082      	sub	sp, #8
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80049da:	2101      	movs	r1, #1
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7ff ffe1 	bl	80049a4 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6858      	ldr	r0, [r3, #4]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	2200      	movs	r2, #0
 80049ee:	4619      	mov	r1, r3
 80049f0:	f7fc ff9b 	bl	800192a <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 80049f4:	2001      	movs	r0, #1
 80049f6:	f000 f856 	bl	8004aa6 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6858      	ldr	r0, [r3, #4]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	2201      	movs	r2, #1
 8004a06:	4619      	mov	r1, r3
 8004a08:	f7fc ff8f 	bl	800192a <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8004a0c:	2064      	movs	r0, #100	; 0x64
 8004a0e:	f000 f84a 	bl	8004aa6 <SX1278_hw_DelayMs>
}
 8004a12:	bf00      	nop
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b082      	sub	sp, #8
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
 8004a22:	460b      	mov	r3, r1
 8004a24:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8004a26:	2100      	movs	r1, #0
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7ff ffbb 	bl	80049a4 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6998      	ldr	r0, [r3, #24]
 8004a32:	1cf9      	adds	r1, r7, #3
 8004a34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f7fd fc2d 	bl	8002298 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8004a3e:	bf00      	nop
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7fd ff05 	bl	8002854 <HAL_SPI_GetState>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d1f7      	bne.n	8004a40 <SX1278_hw_SPICommand+0x26>
		;
}
 8004a50:	bf00      	nop
 8004a52:	bf00      	nop
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b086      	sub	sp, #24
 8004a5e:	af02      	add	r7, sp, #8
 8004a60:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8004a62:	2300      	movs	r3, #0
 8004a64:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8004a66:	2300      	movs	r3, #0
 8004a68:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7ff ff99 	bl	80049a4 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6998      	ldr	r0, [r3, #24]
 8004a76:	f107 020e 	add.w	r2, r7, #14
 8004a7a:	f107 010f 	add.w	r1, r7, #15
 8004a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	2301      	movs	r3, #1
 8004a86:	f7fd fd43 	bl	8002510 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8004a8a:	bf00      	nop
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7fd fedf 	bl	8002854 <HAL_SPI_GetState>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d1f7      	bne.n	8004a8c <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8004a9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b082      	sub	sp, #8
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7fc fbbe 	bl	8001230 <HAL_Delay>
}
 8004ab4:	bf00      	nop
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68da      	ldr	r2, [r3, #12]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	f7fc ff13 	bl	80018fc <HAL_GPIO_ReadPin>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	bf0c      	ite	eq
 8004adc:	2301      	moveq	r3, #1
 8004ade:	2300      	movne	r3, #0
 8004ae0:	b2db      	uxtb	r3, r3
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <Sensor_Init>:
extern SENSOR_HandleTypedef Sensor_1;
extern SENSOR_HandleTypedef Sensor_2;


void Sensor_Init(SENSOR_HandleTypedef *p_SENSOR, UART_HandleTypeDef *p_huart, uint8_t p_ID)
{
 8004aea:	b480      	push	{r7}
 8004aec:	b085      	sub	sp, #20
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	60f8      	str	r0, [r7, #12]
 8004af2:	60b9      	str	r1, [r7, #8]
 8004af4:	4613      	mov	r3, r2
 8004af6:	71fb      	strb	r3, [r7, #7]
	p_SENSOR->huart = p_huart;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	609a      	str	r2, [r3, #8]
	p_SENSOR->sensor_ID = p_ID;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	79fa      	ldrb	r2, [r7, #7]
 8004b02:	701a      	strb	r2, [r3, #0]
}
 8004b04:	bf00      	nop
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bc80      	pop	{r7}
 8004b0c:	4770      	bx	lr

08004b0e <Sensor_Send_cmd>:

void Sensor_Send_cmd(SENSOR_HandleTypedef *p_SENSOR)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b086      	sub	sp, #24
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
	uint8_t tx_sensor_data[8];
	if(p_SENSOR->sensor_ID == SENSOR_1)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d101      	bne.n	8004b22 <Sensor_Send_cmd+0x14>
	{
		tx_sensor_data[0]= SENSOR_1;// slave ID
 8004b1e:	2301      	movs	r3, #1
 8004b20:	733b      	strb	r3, [r7, #12]
		//tx_sensor_data[7]=0x0B;
	}
	if(p_SENSOR->sensor_ID == SENSOR_2)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d101      	bne.n	8004b2e <Sensor_Send_cmd+0x20>
	{
		tx_sensor_data[0]= SENSOR_2;// slave ID
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	733b      	strb	r3, [r7, #12]
		//tx_sensor_data[7]=0x39;
	}
	tx_sensor_data[1]=0x03;//func code for read holding registers
 8004b2e:	2303      	movs	r3, #3
 8004b30:	737b      	strb	r3, [r7, #13]
	tx_sensor_data[2]=0x00;
 8004b32:	2300      	movs	r3, #0
 8004b34:	73bb      	strb	r3, [r7, #14]
	tx_sensor_data[3]=0x00;//
 8004b36:	2300      	movs	r3, #0
 8004b38:	73fb      	strb	r3, [r7, #15]
	tx_sensor_data[4]=0x00;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	743b      	strb	r3, [r7, #16]
	tx_sensor_data[5]=0x02;//No.of registers
 8004b3e:	2302      	movs	r3, #2
 8004b40:	747b      	strb	r3, [r7, #17]
	//tx_sensor_data[6]=0xC4;
	uint16_t crc=crc_modbus(tx_sensor_data, 6);
 8004b42:	f107 030c 	add.w	r3, r7, #12
 8004b46:	2106      	movs	r1, #6
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7fe fcb3 	bl	80034b4 <crc_modbus>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	82fb      	strh	r3, [r7, #22]
	tx_sensor_data[6]=crc&0xFF;// CRC LOW
 8004b52:	8afb      	ldrh	r3, [r7, #22]
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	74bb      	strb	r3, [r7, #18]
	tx_sensor_data[7]=(crc>>8)&0xFF;// CRC HIGH
 8004b58:	8afb      	ldrh	r3, [r7, #22]
 8004b5a:	0a1b      	lsrs	r3, r3, #8
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(p_SENSOR->huart, tx_sensor_data, sizeof(tx_sensor_data), 1000);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6898      	ldr	r0, [r3, #8]
 8004b66:	f107 010c 	add.w	r1, r7, #12
 8004b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b6e:	2208      	movs	r2, #8
 8004b70:	f7fd ff71 	bl	8002a56 <HAL_UART_Transmit>
}
 8004b74:	bf00      	nop
 8004b76:	3718      	adds	r7, #24
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <Sensor_Handle>:

void Sensor_Handle(uint8_t *state)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
	switch (*state) {
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d00c      	beq.n	8004ba6 <Sensor_Handle+0x2a>
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	dc11      	bgt.n	8004bb4 <Sensor_Handle+0x38>
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d011      	beq.n	8004bb8 <Sensor_Handle+0x3c>
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d10d      	bne.n	8004bb4 <Sensor_Handle+0x38>
		case Slave_1:
			Sensor_Send_cmd(&Sensor_1);
 8004b98:	480a      	ldr	r0, [pc, #40]	; (8004bc4 <Sensor_Handle+0x48>)
 8004b9a:	f7ff ffb8 	bl	8004b0e <Sensor_Send_cmd>
			*state = Idle;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	701a      	strb	r2, [r3, #0]
			break;
 8004ba4:	e009      	b.n	8004bba <Sensor_Handle+0x3e>
		case Slave_2:
			Sensor_Send_cmd(&Sensor_2);
 8004ba6:	4808      	ldr	r0, [pc, #32]	; (8004bc8 <Sensor_Handle+0x4c>)
 8004ba8:	f7ff ffb1 	bl	8004b0e <Sensor_Send_cmd>
			*state = Idle;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	701a      	strb	r2, [r3, #0]
			break;
 8004bb2:	e002      	b.n	8004bba <Sensor_Handle+0x3e>
		case Idle:

			break;
		default:
			break;
 8004bb4:	bf00      	nop
 8004bb6:	e000      	b.n	8004bba <Sensor_Handle+0x3e>
			break;
 8004bb8:	bf00      	nop
	}
}
 8004bba:	bf00      	nop
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	20000bf0 	.word	0x20000bf0
 8004bc8:	20000bfc 	.word	0x20000bfc

08004bcc <RING_BUFFER_Init>:
#include "ring_buffer.h"

void RING_BUFFER_Init(RING_BUFFER_HandleTypeDef *p_ring_buffer, PACKET_STRUCTURE *p_buffer, uint16_t p_max_length){
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	80fb      	strh	r3, [r7, #6]
	p_ring_buffer->buffer = p_buffer;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	601a      	str	r2, [r3, #0]
	p_ring_buffer->head = 0;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	809a      	strh	r2, [r3, #4]
	p_ring_buffer->tail = 0;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	80da      	strh	r2, [r3, #6]
	p_ring_buffer->max_length = p_max_length;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	88fa      	ldrh	r2, [r7, #6]
 8004bf0:	811a      	strh	r2, [r3, #8]
}
 8004bf2:	bf00      	nop
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr

08004bfc <RING_BUFFER_Push>:

int8_t RING_BUFFER_Push(RING_BUFFER_HandleTypeDef *p_ring_buffer, PACKET_STRUCTURE p_data){
 8004bfc:	b084      	sub	sp, #16
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b084      	sub	sp, #16
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
 8004c06:	f107 001c 	add.w	r0, r7, #28
 8004c0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint16_t t_next;

	t_next = p_ring_buffer->head + 1;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	889b      	ldrh	r3, [r3, #4]
 8004c12:	3301      	adds	r3, #1
 8004c14:	81fb      	strh	r3, [r7, #14]
	if(t_next >= p_ring_buffer->max_length)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	891b      	ldrh	r3, [r3, #8]
 8004c1a:	89fa      	ldrh	r2, [r7, #14]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d301      	bcc.n	8004c24 <RING_BUFFER_Push+0x28>
		t_next = 0;
 8004c20:	2300      	movs	r3, #0
 8004c22:	81fb      	strh	r3, [r7, #14]

	if(t_next == p_ring_buffer->tail)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	88db      	ldrh	r3, [r3, #6]
 8004c28:	89fa      	ldrh	r2, [r7, #14]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d102      	bne.n	8004c34 <RING_BUFFER_Push+0x38>
		return -1;
 8004c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c32:	e015      	b.n	8004c60 <RING_BUFFER_Push+0x64>

	p_ring_buffer->buffer[p_ring_buffer->head] = p_data;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	889b      	ldrh	r3, [r3, #4]
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8004c42:	fb01 f303 	mul.w	r3, r1, r3
 8004c46:	4413      	add	r3, r2
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f107 031c 	add.w	r3, r7, #28
 8004c4e:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8004c52:	4619      	mov	r1, r3
 8004c54:	f000 f87c 	bl	8004d50 <memcpy>

	p_ring_buffer->head = t_next;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	89fa      	ldrh	r2, [r7, #14]
 8004c5c:	809a      	strh	r2, [r3, #4]

	return 0;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c6a:	b004      	add	sp, #16
 8004c6c:	4770      	bx	lr

08004c6e <RING_BUFFER_Pop>:

int8_t RING_BUFFER_Pop(RING_BUFFER_HandleTypeDef *p_ring_buffer, PACKET_STRUCTURE *p_data){
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b084      	sub	sp, #16
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	6039      	str	r1, [r7, #0]
	uint16_t t_next;

	if(p_ring_buffer->tail == p_ring_buffer->head)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	88da      	ldrh	r2, [r3, #6]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	889b      	ldrh	r3, [r3, #4]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d102      	bne.n	8004c8a <RING_BUFFER_Pop+0x1c>
		return -1;
 8004c84:	f04f 33ff 	mov.w	r3, #4294967295
 8004c88:	e020      	b.n	8004ccc <RING_BUFFER_Pop+0x5e>

	t_next = p_ring_buffer->tail + 1;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	88db      	ldrh	r3, [r3, #6]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	81fb      	strh	r3, [r7, #14]
	if(t_next >= p_ring_buffer->max_length)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	891b      	ldrh	r3, [r3, #8]
 8004c96:	89fa      	ldrh	r2, [r7, #14]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d301      	bcc.n	8004ca0 <RING_BUFFER_Pop+0x32>
		t_next = 0;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	81fb      	strh	r3, [r7, #14]

	*p_data = p_ring_buffer->buffer[p_ring_buffer->tail];
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	88db      	ldrh	r3, [r3, #6]
 8004ca8:	4619      	mov	r1, r3
 8004caa:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8004cae:	fb01 f303 	mul.w	r3, r1, r3
 8004cb2:	4413      	add	r3, r2
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	4610      	mov	r0, r2
 8004cb8:	4619      	mov	r1, r3
 8004cba:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	f000 f846 	bl	8004d50 <memcpy>
	p_ring_buffer->tail = t_next;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	89fa      	ldrh	r2, [r7, #14]
 8004cc8:	80da      	strh	r2, [r3, #6]

	return 0;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <RING_BUFFER_Available>:

uint16_t RING_BUFFER_Available(RING_BUFFER_HandleTypeDef *p_ring_buffer){
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
//	} else if(p_ring_buffer->head < p_ring_buffer->tail){
//		return p_ring_buffer->max_length - (p_ring_buffer->head - p_ring_buffer->tail);
//	} else if(p_ring_buffer->head == p_ring_buffer->tail){
//		return 0;
//	}
	return (p_ring_buffer->head == p_ring_buffer->tail) ? 0 : 1;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	889a      	ldrh	r2, [r3, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	88db      	ldrh	r3, [r3, #6]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	bf14      	ite	ne
 8004ce8:	2301      	movne	r3, #1
 8004cea:	2300      	moveq	r3, #0
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	b29b      	uxth	r3, r3
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bc80      	pop	{r7}
 8004cf8:	4770      	bx	lr
	...

08004cfc <__errno>:
 8004cfc:	4b01      	ldr	r3, [pc, #4]	; (8004d04 <__errno+0x8>)
 8004cfe:	6818      	ldr	r0, [r3, #0]
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	2000000c 	.word	0x2000000c

08004d08 <__libc_init_array>:
 8004d08:	b570      	push	{r4, r5, r6, lr}
 8004d0a:	2600      	movs	r6, #0
 8004d0c:	4d0c      	ldr	r5, [pc, #48]	; (8004d40 <__libc_init_array+0x38>)
 8004d0e:	4c0d      	ldr	r4, [pc, #52]	; (8004d44 <__libc_init_array+0x3c>)
 8004d10:	1b64      	subs	r4, r4, r5
 8004d12:	10a4      	asrs	r4, r4, #2
 8004d14:	42a6      	cmp	r6, r4
 8004d16:	d109      	bne.n	8004d2c <__libc_init_array+0x24>
 8004d18:	f001 fa80 	bl	800621c <_init>
 8004d1c:	2600      	movs	r6, #0
 8004d1e:	4d0a      	ldr	r5, [pc, #40]	; (8004d48 <__libc_init_array+0x40>)
 8004d20:	4c0a      	ldr	r4, [pc, #40]	; (8004d4c <__libc_init_array+0x44>)
 8004d22:	1b64      	subs	r4, r4, r5
 8004d24:	10a4      	asrs	r4, r4, #2
 8004d26:	42a6      	cmp	r6, r4
 8004d28:	d105      	bne.n	8004d36 <__libc_init_array+0x2e>
 8004d2a:	bd70      	pop	{r4, r5, r6, pc}
 8004d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d30:	4798      	blx	r3
 8004d32:	3601      	adds	r6, #1
 8004d34:	e7ee      	b.n	8004d14 <__libc_init_array+0xc>
 8004d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d3a:	4798      	blx	r3
 8004d3c:	3601      	adds	r6, #1
 8004d3e:	e7f2      	b.n	8004d26 <__libc_init_array+0x1e>
 8004d40:	0800647c 	.word	0x0800647c
 8004d44:	0800647c 	.word	0x0800647c
 8004d48:	0800647c 	.word	0x0800647c
 8004d4c:	08006480 	.word	0x08006480

08004d50 <memcpy>:
 8004d50:	440a      	add	r2, r1
 8004d52:	4291      	cmp	r1, r2
 8004d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d58:	d100      	bne.n	8004d5c <memcpy+0xc>
 8004d5a:	4770      	bx	lr
 8004d5c:	b510      	push	{r4, lr}
 8004d5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d62:	4291      	cmp	r1, r2
 8004d64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d68:	d1f9      	bne.n	8004d5e <memcpy+0xe>
 8004d6a:	bd10      	pop	{r4, pc}

08004d6c <memset>:
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	4402      	add	r2, r0
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d100      	bne.n	8004d76 <memset+0xa>
 8004d74:	4770      	bx	lr
 8004d76:	f803 1b01 	strb.w	r1, [r3], #1
 8004d7a:	e7f9      	b.n	8004d70 <memset+0x4>

08004d7c <siprintf>:
 8004d7c:	b40e      	push	{r1, r2, r3}
 8004d7e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d82:	b500      	push	{lr}
 8004d84:	b09c      	sub	sp, #112	; 0x70
 8004d86:	ab1d      	add	r3, sp, #116	; 0x74
 8004d88:	9002      	str	r0, [sp, #8]
 8004d8a:	9006      	str	r0, [sp, #24]
 8004d8c:	9107      	str	r1, [sp, #28]
 8004d8e:	9104      	str	r1, [sp, #16]
 8004d90:	4808      	ldr	r0, [pc, #32]	; (8004db4 <siprintf+0x38>)
 8004d92:	4909      	ldr	r1, [pc, #36]	; (8004db8 <siprintf+0x3c>)
 8004d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d98:	9105      	str	r1, [sp, #20]
 8004d9a:	6800      	ldr	r0, [r0, #0]
 8004d9c:	a902      	add	r1, sp, #8
 8004d9e:	9301      	str	r3, [sp, #4]
 8004da0:	f000 f9fe 	bl	80051a0 <_svfiprintf_r>
 8004da4:	2200      	movs	r2, #0
 8004da6:	9b02      	ldr	r3, [sp, #8]
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	b01c      	add	sp, #112	; 0x70
 8004dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8004db0:	b003      	add	sp, #12
 8004db2:	4770      	bx	lr
 8004db4:	2000000c 	.word	0x2000000c
 8004db8:	ffff0208 	.word	0xffff0208

08004dbc <strcat>:
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	b510      	push	{r4, lr}
 8004dc0:	7814      	ldrb	r4, [r2, #0]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	3201      	adds	r2, #1
 8004dc6:	2c00      	cmp	r4, #0
 8004dc8:	d1fa      	bne.n	8004dc0 <strcat+0x4>
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dd0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dd4:	2a00      	cmp	r2, #0
 8004dd6:	d1f9      	bne.n	8004dcc <strcat+0x10>
 8004dd8:	bd10      	pop	{r4, pc}

08004dda <strstr>:
 8004dda:	780a      	ldrb	r2, [r1, #0]
 8004ddc:	b570      	push	{r4, r5, r6, lr}
 8004dde:	b96a      	cbnz	r2, 8004dfc <strstr+0x22>
 8004de0:	bd70      	pop	{r4, r5, r6, pc}
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d109      	bne.n	8004dfa <strstr+0x20>
 8004de6:	460c      	mov	r4, r1
 8004de8:	4605      	mov	r5, r0
 8004dea:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0f6      	beq.n	8004de0 <strstr+0x6>
 8004df2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004df6:	429e      	cmp	r6, r3
 8004df8:	d0f7      	beq.n	8004dea <strstr+0x10>
 8004dfa:	3001      	adds	r0, #1
 8004dfc:	7803      	ldrb	r3, [r0, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1ef      	bne.n	8004de2 <strstr+0x8>
 8004e02:	4618      	mov	r0, r3
 8004e04:	e7ec      	b.n	8004de0 <strstr+0x6>
	...

08004e08 <strtok>:
 8004e08:	4b16      	ldr	r3, [pc, #88]	; (8004e64 <strtok+0x5c>)
 8004e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e0e:	681f      	ldr	r7, [r3, #0]
 8004e10:	4605      	mov	r5, r0
 8004e12:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8004e14:	460e      	mov	r6, r1
 8004e16:	b9ec      	cbnz	r4, 8004e54 <strtok+0x4c>
 8004e18:	2050      	movs	r0, #80	; 0x50
 8004e1a:	f000 f881 	bl	8004f20 <malloc>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	65b8      	str	r0, [r7, #88]	; 0x58
 8004e22:	b920      	cbnz	r0, 8004e2e <strtok+0x26>
 8004e24:	2157      	movs	r1, #87	; 0x57
 8004e26:	4b10      	ldr	r3, [pc, #64]	; (8004e68 <strtok+0x60>)
 8004e28:	4810      	ldr	r0, [pc, #64]	; (8004e6c <strtok+0x64>)
 8004e2a:	f000 f849 	bl	8004ec0 <__assert_func>
 8004e2e:	e9c0 4400 	strd	r4, r4, [r0]
 8004e32:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004e36:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004e3a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004e3e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004e42:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004e46:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004e4a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004e4e:	6184      	str	r4, [r0, #24]
 8004e50:	7704      	strb	r4, [r0, #28]
 8004e52:	6244      	str	r4, [r0, #36]	; 0x24
 8004e54:	4631      	mov	r1, r6
 8004e56:	4628      	mov	r0, r5
 8004e58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e60:	f000 b806 	b.w	8004e70 <__strtok_r>
 8004e64:	2000000c 	.word	0x2000000c
 8004e68:	08006330 	.word	0x08006330
 8004e6c:	08006347 	.word	0x08006347

08004e70 <__strtok_r>:
 8004e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e72:	b908      	cbnz	r0, 8004e78 <__strtok_r+0x8>
 8004e74:	6810      	ldr	r0, [r2, #0]
 8004e76:	b188      	cbz	r0, 8004e9c <__strtok_r+0x2c>
 8004e78:	4604      	mov	r4, r0
 8004e7a:	460f      	mov	r7, r1
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004e82:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004e86:	b91e      	cbnz	r6, 8004e90 <__strtok_r+0x20>
 8004e88:	b965      	cbnz	r5, 8004ea4 <__strtok_r+0x34>
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	6015      	str	r5, [r2, #0]
 8004e8e:	e005      	b.n	8004e9c <__strtok_r+0x2c>
 8004e90:	42b5      	cmp	r5, r6
 8004e92:	d1f6      	bne.n	8004e82 <__strtok_r+0x12>
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1f0      	bne.n	8004e7a <__strtok_r+0xa>
 8004e98:	6014      	str	r4, [r2, #0]
 8004e9a:	7003      	strb	r3, [r0, #0]
 8004e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e9e:	461c      	mov	r4, r3
 8004ea0:	e00c      	b.n	8004ebc <__strtok_r+0x4c>
 8004ea2:	b915      	cbnz	r5, 8004eaa <__strtok_r+0x3a>
 8004ea4:	460e      	mov	r6, r1
 8004ea6:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004eaa:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004eae:	42ab      	cmp	r3, r5
 8004eb0:	d1f7      	bne.n	8004ea2 <__strtok_r+0x32>
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0f3      	beq.n	8004e9e <__strtok_r+0x2e>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004ebc:	6014      	str	r4, [r2, #0]
 8004ebe:	e7ed      	b.n	8004e9c <__strtok_r+0x2c>

08004ec0 <__assert_func>:
 8004ec0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004ec2:	4614      	mov	r4, r2
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	4b09      	ldr	r3, [pc, #36]	; (8004eec <__assert_func+0x2c>)
 8004ec8:	4605      	mov	r5, r0
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68d8      	ldr	r0, [r3, #12]
 8004ece:	b14c      	cbz	r4, 8004ee4 <__assert_func+0x24>
 8004ed0:	4b07      	ldr	r3, [pc, #28]	; (8004ef0 <__assert_func+0x30>)
 8004ed2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004ed6:	9100      	str	r1, [sp, #0]
 8004ed8:	462b      	mov	r3, r5
 8004eda:	4906      	ldr	r1, [pc, #24]	; (8004ef4 <__assert_func+0x34>)
 8004edc:	f000 f80e 	bl	8004efc <fiprintf>
 8004ee0:	f000 fe1c 	bl	8005b1c <abort>
 8004ee4:	4b04      	ldr	r3, [pc, #16]	; (8004ef8 <__assert_func+0x38>)
 8004ee6:	461c      	mov	r4, r3
 8004ee8:	e7f3      	b.n	8004ed2 <__assert_func+0x12>
 8004eea:	bf00      	nop
 8004eec:	2000000c 	.word	0x2000000c
 8004ef0:	080063a4 	.word	0x080063a4
 8004ef4:	080063b1 	.word	0x080063b1
 8004ef8:	080063df 	.word	0x080063df

08004efc <fiprintf>:
 8004efc:	b40e      	push	{r1, r2, r3}
 8004efe:	b503      	push	{r0, r1, lr}
 8004f00:	4601      	mov	r1, r0
 8004f02:	ab03      	add	r3, sp, #12
 8004f04:	4805      	ldr	r0, [pc, #20]	; (8004f1c <fiprintf+0x20>)
 8004f06:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f0a:	6800      	ldr	r0, [r0, #0]
 8004f0c:	9301      	str	r3, [sp, #4]
 8004f0e:	f000 fa6f 	bl	80053f0 <_vfiprintf_r>
 8004f12:	b002      	add	sp, #8
 8004f14:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f18:	b003      	add	sp, #12
 8004f1a:	4770      	bx	lr
 8004f1c:	2000000c 	.word	0x2000000c

08004f20 <malloc>:
 8004f20:	4b02      	ldr	r3, [pc, #8]	; (8004f2c <malloc+0xc>)
 8004f22:	4601      	mov	r1, r0
 8004f24:	6818      	ldr	r0, [r3, #0]
 8004f26:	f000 b86b 	b.w	8005000 <_malloc_r>
 8004f2a:	bf00      	nop
 8004f2c:	2000000c 	.word	0x2000000c

08004f30 <_free_r>:
 8004f30:	b538      	push	{r3, r4, r5, lr}
 8004f32:	4605      	mov	r5, r0
 8004f34:	2900      	cmp	r1, #0
 8004f36:	d040      	beq.n	8004fba <_free_r+0x8a>
 8004f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f3c:	1f0c      	subs	r4, r1, #4
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	bfb8      	it	lt
 8004f42:	18e4      	addlt	r4, r4, r3
 8004f44:	f001 f836 	bl	8005fb4 <__malloc_lock>
 8004f48:	4a1c      	ldr	r2, [pc, #112]	; (8004fbc <_free_r+0x8c>)
 8004f4a:	6813      	ldr	r3, [r2, #0]
 8004f4c:	b933      	cbnz	r3, 8004f5c <_free_r+0x2c>
 8004f4e:	6063      	str	r3, [r4, #4]
 8004f50:	6014      	str	r4, [r2, #0]
 8004f52:	4628      	mov	r0, r5
 8004f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f58:	f001 b832 	b.w	8005fc0 <__malloc_unlock>
 8004f5c:	42a3      	cmp	r3, r4
 8004f5e:	d908      	bls.n	8004f72 <_free_r+0x42>
 8004f60:	6820      	ldr	r0, [r4, #0]
 8004f62:	1821      	adds	r1, r4, r0
 8004f64:	428b      	cmp	r3, r1
 8004f66:	bf01      	itttt	eq
 8004f68:	6819      	ldreq	r1, [r3, #0]
 8004f6a:	685b      	ldreq	r3, [r3, #4]
 8004f6c:	1809      	addeq	r1, r1, r0
 8004f6e:	6021      	streq	r1, [r4, #0]
 8004f70:	e7ed      	b.n	8004f4e <_free_r+0x1e>
 8004f72:	461a      	mov	r2, r3
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	b10b      	cbz	r3, 8004f7c <_free_r+0x4c>
 8004f78:	42a3      	cmp	r3, r4
 8004f7a:	d9fa      	bls.n	8004f72 <_free_r+0x42>
 8004f7c:	6811      	ldr	r1, [r2, #0]
 8004f7e:	1850      	adds	r0, r2, r1
 8004f80:	42a0      	cmp	r0, r4
 8004f82:	d10b      	bne.n	8004f9c <_free_r+0x6c>
 8004f84:	6820      	ldr	r0, [r4, #0]
 8004f86:	4401      	add	r1, r0
 8004f88:	1850      	adds	r0, r2, r1
 8004f8a:	4283      	cmp	r3, r0
 8004f8c:	6011      	str	r1, [r2, #0]
 8004f8e:	d1e0      	bne.n	8004f52 <_free_r+0x22>
 8004f90:	6818      	ldr	r0, [r3, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	4401      	add	r1, r0
 8004f96:	6011      	str	r1, [r2, #0]
 8004f98:	6053      	str	r3, [r2, #4]
 8004f9a:	e7da      	b.n	8004f52 <_free_r+0x22>
 8004f9c:	d902      	bls.n	8004fa4 <_free_r+0x74>
 8004f9e:	230c      	movs	r3, #12
 8004fa0:	602b      	str	r3, [r5, #0]
 8004fa2:	e7d6      	b.n	8004f52 <_free_r+0x22>
 8004fa4:	6820      	ldr	r0, [r4, #0]
 8004fa6:	1821      	adds	r1, r4, r0
 8004fa8:	428b      	cmp	r3, r1
 8004faa:	bf01      	itttt	eq
 8004fac:	6819      	ldreq	r1, [r3, #0]
 8004fae:	685b      	ldreq	r3, [r3, #4]
 8004fb0:	1809      	addeq	r1, r1, r0
 8004fb2:	6021      	streq	r1, [r4, #0]
 8004fb4:	6063      	str	r3, [r4, #4]
 8004fb6:	6054      	str	r4, [r2, #4]
 8004fb8:	e7cb      	b.n	8004f52 <_free_r+0x22>
 8004fba:	bd38      	pop	{r3, r4, r5, pc}
 8004fbc:	20002318 	.word	0x20002318

08004fc0 <sbrk_aligned>:
 8004fc0:	b570      	push	{r4, r5, r6, lr}
 8004fc2:	4e0e      	ldr	r6, [pc, #56]	; (8004ffc <sbrk_aligned+0x3c>)
 8004fc4:	460c      	mov	r4, r1
 8004fc6:	6831      	ldr	r1, [r6, #0]
 8004fc8:	4605      	mov	r5, r0
 8004fca:	b911      	cbnz	r1, 8004fd2 <sbrk_aligned+0x12>
 8004fcc:	f000 fcd6 	bl	800597c <_sbrk_r>
 8004fd0:	6030      	str	r0, [r6, #0]
 8004fd2:	4621      	mov	r1, r4
 8004fd4:	4628      	mov	r0, r5
 8004fd6:	f000 fcd1 	bl	800597c <_sbrk_r>
 8004fda:	1c43      	adds	r3, r0, #1
 8004fdc:	d00a      	beq.n	8004ff4 <sbrk_aligned+0x34>
 8004fde:	1cc4      	adds	r4, r0, #3
 8004fe0:	f024 0403 	bic.w	r4, r4, #3
 8004fe4:	42a0      	cmp	r0, r4
 8004fe6:	d007      	beq.n	8004ff8 <sbrk_aligned+0x38>
 8004fe8:	1a21      	subs	r1, r4, r0
 8004fea:	4628      	mov	r0, r5
 8004fec:	f000 fcc6 	bl	800597c <_sbrk_r>
 8004ff0:	3001      	adds	r0, #1
 8004ff2:	d101      	bne.n	8004ff8 <sbrk_aligned+0x38>
 8004ff4:	f04f 34ff 	mov.w	r4, #4294967295
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	bd70      	pop	{r4, r5, r6, pc}
 8004ffc:	2000231c 	.word	0x2000231c

08005000 <_malloc_r>:
 8005000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005004:	1ccd      	adds	r5, r1, #3
 8005006:	f025 0503 	bic.w	r5, r5, #3
 800500a:	3508      	adds	r5, #8
 800500c:	2d0c      	cmp	r5, #12
 800500e:	bf38      	it	cc
 8005010:	250c      	movcc	r5, #12
 8005012:	2d00      	cmp	r5, #0
 8005014:	4607      	mov	r7, r0
 8005016:	db01      	blt.n	800501c <_malloc_r+0x1c>
 8005018:	42a9      	cmp	r1, r5
 800501a:	d905      	bls.n	8005028 <_malloc_r+0x28>
 800501c:	230c      	movs	r3, #12
 800501e:	2600      	movs	r6, #0
 8005020:	603b      	str	r3, [r7, #0]
 8005022:	4630      	mov	r0, r6
 8005024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005028:	4e2e      	ldr	r6, [pc, #184]	; (80050e4 <_malloc_r+0xe4>)
 800502a:	f000 ffc3 	bl	8005fb4 <__malloc_lock>
 800502e:	6833      	ldr	r3, [r6, #0]
 8005030:	461c      	mov	r4, r3
 8005032:	bb34      	cbnz	r4, 8005082 <_malloc_r+0x82>
 8005034:	4629      	mov	r1, r5
 8005036:	4638      	mov	r0, r7
 8005038:	f7ff ffc2 	bl	8004fc0 <sbrk_aligned>
 800503c:	1c43      	adds	r3, r0, #1
 800503e:	4604      	mov	r4, r0
 8005040:	d14d      	bne.n	80050de <_malloc_r+0xde>
 8005042:	6834      	ldr	r4, [r6, #0]
 8005044:	4626      	mov	r6, r4
 8005046:	2e00      	cmp	r6, #0
 8005048:	d140      	bne.n	80050cc <_malloc_r+0xcc>
 800504a:	6823      	ldr	r3, [r4, #0]
 800504c:	4631      	mov	r1, r6
 800504e:	4638      	mov	r0, r7
 8005050:	eb04 0803 	add.w	r8, r4, r3
 8005054:	f000 fc92 	bl	800597c <_sbrk_r>
 8005058:	4580      	cmp	r8, r0
 800505a:	d13a      	bne.n	80050d2 <_malloc_r+0xd2>
 800505c:	6821      	ldr	r1, [r4, #0]
 800505e:	3503      	adds	r5, #3
 8005060:	1a6d      	subs	r5, r5, r1
 8005062:	f025 0503 	bic.w	r5, r5, #3
 8005066:	3508      	adds	r5, #8
 8005068:	2d0c      	cmp	r5, #12
 800506a:	bf38      	it	cc
 800506c:	250c      	movcc	r5, #12
 800506e:	4638      	mov	r0, r7
 8005070:	4629      	mov	r1, r5
 8005072:	f7ff ffa5 	bl	8004fc0 <sbrk_aligned>
 8005076:	3001      	adds	r0, #1
 8005078:	d02b      	beq.n	80050d2 <_malloc_r+0xd2>
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	442b      	add	r3, r5
 800507e:	6023      	str	r3, [r4, #0]
 8005080:	e00e      	b.n	80050a0 <_malloc_r+0xa0>
 8005082:	6822      	ldr	r2, [r4, #0]
 8005084:	1b52      	subs	r2, r2, r5
 8005086:	d41e      	bmi.n	80050c6 <_malloc_r+0xc6>
 8005088:	2a0b      	cmp	r2, #11
 800508a:	d916      	bls.n	80050ba <_malloc_r+0xba>
 800508c:	1961      	adds	r1, r4, r5
 800508e:	42a3      	cmp	r3, r4
 8005090:	6025      	str	r5, [r4, #0]
 8005092:	bf18      	it	ne
 8005094:	6059      	strne	r1, [r3, #4]
 8005096:	6863      	ldr	r3, [r4, #4]
 8005098:	bf08      	it	eq
 800509a:	6031      	streq	r1, [r6, #0]
 800509c:	5162      	str	r2, [r4, r5]
 800509e:	604b      	str	r3, [r1, #4]
 80050a0:	4638      	mov	r0, r7
 80050a2:	f104 060b 	add.w	r6, r4, #11
 80050a6:	f000 ff8b 	bl	8005fc0 <__malloc_unlock>
 80050aa:	f026 0607 	bic.w	r6, r6, #7
 80050ae:	1d23      	adds	r3, r4, #4
 80050b0:	1af2      	subs	r2, r6, r3
 80050b2:	d0b6      	beq.n	8005022 <_malloc_r+0x22>
 80050b4:	1b9b      	subs	r3, r3, r6
 80050b6:	50a3      	str	r3, [r4, r2]
 80050b8:	e7b3      	b.n	8005022 <_malloc_r+0x22>
 80050ba:	6862      	ldr	r2, [r4, #4]
 80050bc:	42a3      	cmp	r3, r4
 80050be:	bf0c      	ite	eq
 80050c0:	6032      	streq	r2, [r6, #0]
 80050c2:	605a      	strne	r2, [r3, #4]
 80050c4:	e7ec      	b.n	80050a0 <_malloc_r+0xa0>
 80050c6:	4623      	mov	r3, r4
 80050c8:	6864      	ldr	r4, [r4, #4]
 80050ca:	e7b2      	b.n	8005032 <_malloc_r+0x32>
 80050cc:	4634      	mov	r4, r6
 80050ce:	6876      	ldr	r6, [r6, #4]
 80050d0:	e7b9      	b.n	8005046 <_malloc_r+0x46>
 80050d2:	230c      	movs	r3, #12
 80050d4:	4638      	mov	r0, r7
 80050d6:	603b      	str	r3, [r7, #0]
 80050d8:	f000 ff72 	bl	8005fc0 <__malloc_unlock>
 80050dc:	e7a1      	b.n	8005022 <_malloc_r+0x22>
 80050de:	6025      	str	r5, [r4, #0]
 80050e0:	e7de      	b.n	80050a0 <_malloc_r+0xa0>
 80050e2:	bf00      	nop
 80050e4:	20002318 	.word	0x20002318

080050e8 <__ssputs_r>:
 80050e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050ec:	688e      	ldr	r6, [r1, #8]
 80050ee:	4682      	mov	sl, r0
 80050f0:	429e      	cmp	r6, r3
 80050f2:	460c      	mov	r4, r1
 80050f4:	4690      	mov	r8, r2
 80050f6:	461f      	mov	r7, r3
 80050f8:	d838      	bhi.n	800516c <__ssputs_r+0x84>
 80050fa:	898a      	ldrh	r2, [r1, #12]
 80050fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005100:	d032      	beq.n	8005168 <__ssputs_r+0x80>
 8005102:	6825      	ldr	r5, [r4, #0]
 8005104:	6909      	ldr	r1, [r1, #16]
 8005106:	3301      	adds	r3, #1
 8005108:	eba5 0901 	sub.w	r9, r5, r1
 800510c:	6965      	ldr	r5, [r4, #20]
 800510e:	444b      	add	r3, r9
 8005110:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005114:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005118:	106d      	asrs	r5, r5, #1
 800511a:	429d      	cmp	r5, r3
 800511c:	bf38      	it	cc
 800511e:	461d      	movcc	r5, r3
 8005120:	0553      	lsls	r3, r2, #21
 8005122:	d531      	bpl.n	8005188 <__ssputs_r+0xa0>
 8005124:	4629      	mov	r1, r5
 8005126:	f7ff ff6b 	bl	8005000 <_malloc_r>
 800512a:	4606      	mov	r6, r0
 800512c:	b950      	cbnz	r0, 8005144 <__ssputs_r+0x5c>
 800512e:	230c      	movs	r3, #12
 8005130:	f04f 30ff 	mov.w	r0, #4294967295
 8005134:	f8ca 3000 	str.w	r3, [sl]
 8005138:	89a3      	ldrh	r3, [r4, #12]
 800513a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800513e:	81a3      	strh	r3, [r4, #12]
 8005140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005144:	464a      	mov	r2, r9
 8005146:	6921      	ldr	r1, [r4, #16]
 8005148:	f7ff fe02 	bl	8004d50 <memcpy>
 800514c:	89a3      	ldrh	r3, [r4, #12]
 800514e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005156:	81a3      	strh	r3, [r4, #12]
 8005158:	6126      	str	r6, [r4, #16]
 800515a:	444e      	add	r6, r9
 800515c:	6026      	str	r6, [r4, #0]
 800515e:	463e      	mov	r6, r7
 8005160:	6165      	str	r5, [r4, #20]
 8005162:	eba5 0509 	sub.w	r5, r5, r9
 8005166:	60a5      	str	r5, [r4, #8]
 8005168:	42be      	cmp	r6, r7
 800516a:	d900      	bls.n	800516e <__ssputs_r+0x86>
 800516c:	463e      	mov	r6, r7
 800516e:	4632      	mov	r2, r6
 8005170:	4641      	mov	r1, r8
 8005172:	6820      	ldr	r0, [r4, #0]
 8005174:	f000 ff04 	bl	8005f80 <memmove>
 8005178:	68a3      	ldr	r3, [r4, #8]
 800517a:	2000      	movs	r0, #0
 800517c:	1b9b      	subs	r3, r3, r6
 800517e:	60a3      	str	r3, [r4, #8]
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	4433      	add	r3, r6
 8005184:	6023      	str	r3, [r4, #0]
 8005186:	e7db      	b.n	8005140 <__ssputs_r+0x58>
 8005188:	462a      	mov	r2, r5
 800518a:	f000 ff1f 	bl	8005fcc <_realloc_r>
 800518e:	4606      	mov	r6, r0
 8005190:	2800      	cmp	r0, #0
 8005192:	d1e1      	bne.n	8005158 <__ssputs_r+0x70>
 8005194:	4650      	mov	r0, sl
 8005196:	6921      	ldr	r1, [r4, #16]
 8005198:	f7ff feca 	bl	8004f30 <_free_r>
 800519c:	e7c7      	b.n	800512e <__ssputs_r+0x46>
	...

080051a0 <_svfiprintf_r>:
 80051a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a4:	4698      	mov	r8, r3
 80051a6:	898b      	ldrh	r3, [r1, #12]
 80051a8:	4607      	mov	r7, r0
 80051aa:	061b      	lsls	r3, r3, #24
 80051ac:	460d      	mov	r5, r1
 80051ae:	4614      	mov	r4, r2
 80051b0:	b09d      	sub	sp, #116	; 0x74
 80051b2:	d50e      	bpl.n	80051d2 <_svfiprintf_r+0x32>
 80051b4:	690b      	ldr	r3, [r1, #16]
 80051b6:	b963      	cbnz	r3, 80051d2 <_svfiprintf_r+0x32>
 80051b8:	2140      	movs	r1, #64	; 0x40
 80051ba:	f7ff ff21 	bl	8005000 <_malloc_r>
 80051be:	6028      	str	r0, [r5, #0]
 80051c0:	6128      	str	r0, [r5, #16]
 80051c2:	b920      	cbnz	r0, 80051ce <_svfiprintf_r+0x2e>
 80051c4:	230c      	movs	r3, #12
 80051c6:	603b      	str	r3, [r7, #0]
 80051c8:	f04f 30ff 	mov.w	r0, #4294967295
 80051cc:	e0d1      	b.n	8005372 <_svfiprintf_r+0x1d2>
 80051ce:	2340      	movs	r3, #64	; 0x40
 80051d0:	616b      	str	r3, [r5, #20]
 80051d2:	2300      	movs	r3, #0
 80051d4:	9309      	str	r3, [sp, #36]	; 0x24
 80051d6:	2320      	movs	r3, #32
 80051d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051dc:	2330      	movs	r3, #48	; 0x30
 80051de:	f04f 0901 	mov.w	r9, #1
 80051e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80051e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800538c <_svfiprintf_r+0x1ec>
 80051ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051ee:	4623      	mov	r3, r4
 80051f0:	469a      	mov	sl, r3
 80051f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051f6:	b10a      	cbz	r2, 80051fc <_svfiprintf_r+0x5c>
 80051f8:	2a25      	cmp	r2, #37	; 0x25
 80051fa:	d1f9      	bne.n	80051f0 <_svfiprintf_r+0x50>
 80051fc:	ebba 0b04 	subs.w	fp, sl, r4
 8005200:	d00b      	beq.n	800521a <_svfiprintf_r+0x7a>
 8005202:	465b      	mov	r3, fp
 8005204:	4622      	mov	r2, r4
 8005206:	4629      	mov	r1, r5
 8005208:	4638      	mov	r0, r7
 800520a:	f7ff ff6d 	bl	80050e8 <__ssputs_r>
 800520e:	3001      	adds	r0, #1
 8005210:	f000 80aa 	beq.w	8005368 <_svfiprintf_r+0x1c8>
 8005214:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005216:	445a      	add	r2, fp
 8005218:	9209      	str	r2, [sp, #36]	; 0x24
 800521a:	f89a 3000 	ldrb.w	r3, [sl]
 800521e:	2b00      	cmp	r3, #0
 8005220:	f000 80a2 	beq.w	8005368 <_svfiprintf_r+0x1c8>
 8005224:	2300      	movs	r3, #0
 8005226:	f04f 32ff 	mov.w	r2, #4294967295
 800522a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800522e:	f10a 0a01 	add.w	sl, sl, #1
 8005232:	9304      	str	r3, [sp, #16]
 8005234:	9307      	str	r3, [sp, #28]
 8005236:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800523a:	931a      	str	r3, [sp, #104]	; 0x68
 800523c:	4654      	mov	r4, sl
 800523e:	2205      	movs	r2, #5
 8005240:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005244:	4851      	ldr	r0, [pc, #324]	; (800538c <_svfiprintf_r+0x1ec>)
 8005246:	f000 fe8d 	bl	8005f64 <memchr>
 800524a:	9a04      	ldr	r2, [sp, #16]
 800524c:	b9d8      	cbnz	r0, 8005286 <_svfiprintf_r+0xe6>
 800524e:	06d0      	lsls	r0, r2, #27
 8005250:	bf44      	itt	mi
 8005252:	2320      	movmi	r3, #32
 8005254:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005258:	0711      	lsls	r1, r2, #28
 800525a:	bf44      	itt	mi
 800525c:	232b      	movmi	r3, #43	; 0x2b
 800525e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005262:	f89a 3000 	ldrb.w	r3, [sl]
 8005266:	2b2a      	cmp	r3, #42	; 0x2a
 8005268:	d015      	beq.n	8005296 <_svfiprintf_r+0xf6>
 800526a:	4654      	mov	r4, sl
 800526c:	2000      	movs	r0, #0
 800526e:	f04f 0c0a 	mov.w	ip, #10
 8005272:	9a07      	ldr	r2, [sp, #28]
 8005274:	4621      	mov	r1, r4
 8005276:	f811 3b01 	ldrb.w	r3, [r1], #1
 800527a:	3b30      	subs	r3, #48	; 0x30
 800527c:	2b09      	cmp	r3, #9
 800527e:	d94e      	bls.n	800531e <_svfiprintf_r+0x17e>
 8005280:	b1b0      	cbz	r0, 80052b0 <_svfiprintf_r+0x110>
 8005282:	9207      	str	r2, [sp, #28]
 8005284:	e014      	b.n	80052b0 <_svfiprintf_r+0x110>
 8005286:	eba0 0308 	sub.w	r3, r0, r8
 800528a:	fa09 f303 	lsl.w	r3, r9, r3
 800528e:	4313      	orrs	r3, r2
 8005290:	46a2      	mov	sl, r4
 8005292:	9304      	str	r3, [sp, #16]
 8005294:	e7d2      	b.n	800523c <_svfiprintf_r+0x9c>
 8005296:	9b03      	ldr	r3, [sp, #12]
 8005298:	1d19      	adds	r1, r3, #4
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	9103      	str	r1, [sp, #12]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	bfbb      	ittet	lt
 80052a2:	425b      	neglt	r3, r3
 80052a4:	f042 0202 	orrlt.w	r2, r2, #2
 80052a8:	9307      	strge	r3, [sp, #28]
 80052aa:	9307      	strlt	r3, [sp, #28]
 80052ac:	bfb8      	it	lt
 80052ae:	9204      	strlt	r2, [sp, #16]
 80052b0:	7823      	ldrb	r3, [r4, #0]
 80052b2:	2b2e      	cmp	r3, #46	; 0x2e
 80052b4:	d10c      	bne.n	80052d0 <_svfiprintf_r+0x130>
 80052b6:	7863      	ldrb	r3, [r4, #1]
 80052b8:	2b2a      	cmp	r3, #42	; 0x2a
 80052ba:	d135      	bne.n	8005328 <_svfiprintf_r+0x188>
 80052bc:	9b03      	ldr	r3, [sp, #12]
 80052be:	3402      	adds	r4, #2
 80052c0:	1d1a      	adds	r2, r3, #4
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	9203      	str	r2, [sp, #12]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	bfb8      	it	lt
 80052ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80052ce:	9305      	str	r3, [sp, #20]
 80052d0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005390 <_svfiprintf_r+0x1f0>
 80052d4:	2203      	movs	r2, #3
 80052d6:	4650      	mov	r0, sl
 80052d8:	7821      	ldrb	r1, [r4, #0]
 80052da:	f000 fe43 	bl	8005f64 <memchr>
 80052de:	b140      	cbz	r0, 80052f2 <_svfiprintf_r+0x152>
 80052e0:	2340      	movs	r3, #64	; 0x40
 80052e2:	eba0 000a 	sub.w	r0, r0, sl
 80052e6:	fa03 f000 	lsl.w	r0, r3, r0
 80052ea:	9b04      	ldr	r3, [sp, #16]
 80052ec:	3401      	adds	r4, #1
 80052ee:	4303      	orrs	r3, r0
 80052f0:	9304      	str	r3, [sp, #16]
 80052f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052f6:	2206      	movs	r2, #6
 80052f8:	4826      	ldr	r0, [pc, #152]	; (8005394 <_svfiprintf_r+0x1f4>)
 80052fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052fe:	f000 fe31 	bl	8005f64 <memchr>
 8005302:	2800      	cmp	r0, #0
 8005304:	d038      	beq.n	8005378 <_svfiprintf_r+0x1d8>
 8005306:	4b24      	ldr	r3, [pc, #144]	; (8005398 <_svfiprintf_r+0x1f8>)
 8005308:	bb1b      	cbnz	r3, 8005352 <_svfiprintf_r+0x1b2>
 800530a:	9b03      	ldr	r3, [sp, #12]
 800530c:	3307      	adds	r3, #7
 800530e:	f023 0307 	bic.w	r3, r3, #7
 8005312:	3308      	adds	r3, #8
 8005314:	9303      	str	r3, [sp, #12]
 8005316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005318:	4433      	add	r3, r6
 800531a:	9309      	str	r3, [sp, #36]	; 0x24
 800531c:	e767      	b.n	80051ee <_svfiprintf_r+0x4e>
 800531e:	460c      	mov	r4, r1
 8005320:	2001      	movs	r0, #1
 8005322:	fb0c 3202 	mla	r2, ip, r2, r3
 8005326:	e7a5      	b.n	8005274 <_svfiprintf_r+0xd4>
 8005328:	2300      	movs	r3, #0
 800532a:	f04f 0c0a 	mov.w	ip, #10
 800532e:	4619      	mov	r1, r3
 8005330:	3401      	adds	r4, #1
 8005332:	9305      	str	r3, [sp, #20]
 8005334:	4620      	mov	r0, r4
 8005336:	f810 2b01 	ldrb.w	r2, [r0], #1
 800533a:	3a30      	subs	r2, #48	; 0x30
 800533c:	2a09      	cmp	r2, #9
 800533e:	d903      	bls.n	8005348 <_svfiprintf_r+0x1a8>
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0c5      	beq.n	80052d0 <_svfiprintf_r+0x130>
 8005344:	9105      	str	r1, [sp, #20]
 8005346:	e7c3      	b.n	80052d0 <_svfiprintf_r+0x130>
 8005348:	4604      	mov	r4, r0
 800534a:	2301      	movs	r3, #1
 800534c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005350:	e7f0      	b.n	8005334 <_svfiprintf_r+0x194>
 8005352:	ab03      	add	r3, sp, #12
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	462a      	mov	r2, r5
 8005358:	4638      	mov	r0, r7
 800535a:	4b10      	ldr	r3, [pc, #64]	; (800539c <_svfiprintf_r+0x1fc>)
 800535c:	a904      	add	r1, sp, #16
 800535e:	f3af 8000 	nop.w
 8005362:	1c42      	adds	r2, r0, #1
 8005364:	4606      	mov	r6, r0
 8005366:	d1d6      	bne.n	8005316 <_svfiprintf_r+0x176>
 8005368:	89ab      	ldrh	r3, [r5, #12]
 800536a:	065b      	lsls	r3, r3, #25
 800536c:	f53f af2c 	bmi.w	80051c8 <_svfiprintf_r+0x28>
 8005370:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005372:	b01d      	add	sp, #116	; 0x74
 8005374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005378:	ab03      	add	r3, sp, #12
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	462a      	mov	r2, r5
 800537e:	4638      	mov	r0, r7
 8005380:	4b06      	ldr	r3, [pc, #24]	; (800539c <_svfiprintf_r+0x1fc>)
 8005382:	a904      	add	r1, sp, #16
 8005384:	f000 f9d4 	bl	8005730 <_printf_i>
 8005388:	e7eb      	b.n	8005362 <_svfiprintf_r+0x1c2>
 800538a:	bf00      	nop
 800538c:	080063e0 	.word	0x080063e0
 8005390:	080063e6 	.word	0x080063e6
 8005394:	080063ea 	.word	0x080063ea
 8005398:	00000000 	.word	0x00000000
 800539c:	080050e9 	.word	0x080050e9

080053a0 <__sfputc_r>:
 80053a0:	6893      	ldr	r3, [r2, #8]
 80053a2:	b410      	push	{r4}
 80053a4:	3b01      	subs	r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	6093      	str	r3, [r2, #8]
 80053aa:	da07      	bge.n	80053bc <__sfputc_r+0x1c>
 80053ac:	6994      	ldr	r4, [r2, #24]
 80053ae:	42a3      	cmp	r3, r4
 80053b0:	db01      	blt.n	80053b6 <__sfputc_r+0x16>
 80053b2:	290a      	cmp	r1, #10
 80053b4:	d102      	bne.n	80053bc <__sfputc_r+0x1c>
 80053b6:	bc10      	pop	{r4}
 80053b8:	f000 baf0 	b.w	800599c <__swbuf_r>
 80053bc:	6813      	ldr	r3, [r2, #0]
 80053be:	1c58      	adds	r0, r3, #1
 80053c0:	6010      	str	r0, [r2, #0]
 80053c2:	7019      	strb	r1, [r3, #0]
 80053c4:	4608      	mov	r0, r1
 80053c6:	bc10      	pop	{r4}
 80053c8:	4770      	bx	lr

080053ca <__sfputs_r>:
 80053ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053cc:	4606      	mov	r6, r0
 80053ce:	460f      	mov	r7, r1
 80053d0:	4614      	mov	r4, r2
 80053d2:	18d5      	adds	r5, r2, r3
 80053d4:	42ac      	cmp	r4, r5
 80053d6:	d101      	bne.n	80053dc <__sfputs_r+0x12>
 80053d8:	2000      	movs	r0, #0
 80053da:	e007      	b.n	80053ec <__sfputs_r+0x22>
 80053dc:	463a      	mov	r2, r7
 80053de:	4630      	mov	r0, r6
 80053e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053e4:	f7ff ffdc 	bl	80053a0 <__sfputc_r>
 80053e8:	1c43      	adds	r3, r0, #1
 80053ea:	d1f3      	bne.n	80053d4 <__sfputs_r+0xa>
 80053ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080053f0 <_vfiprintf_r>:
 80053f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f4:	460d      	mov	r5, r1
 80053f6:	4614      	mov	r4, r2
 80053f8:	4698      	mov	r8, r3
 80053fa:	4606      	mov	r6, r0
 80053fc:	b09d      	sub	sp, #116	; 0x74
 80053fe:	b118      	cbz	r0, 8005408 <_vfiprintf_r+0x18>
 8005400:	6983      	ldr	r3, [r0, #24]
 8005402:	b90b      	cbnz	r3, 8005408 <_vfiprintf_r+0x18>
 8005404:	f000 fca8 	bl	8005d58 <__sinit>
 8005408:	4b89      	ldr	r3, [pc, #548]	; (8005630 <_vfiprintf_r+0x240>)
 800540a:	429d      	cmp	r5, r3
 800540c:	d11b      	bne.n	8005446 <_vfiprintf_r+0x56>
 800540e:	6875      	ldr	r5, [r6, #4]
 8005410:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005412:	07d9      	lsls	r1, r3, #31
 8005414:	d405      	bmi.n	8005422 <_vfiprintf_r+0x32>
 8005416:	89ab      	ldrh	r3, [r5, #12]
 8005418:	059a      	lsls	r2, r3, #22
 800541a:	d402      	bmi.n	8005422 <_vfiprintf_r+0x32>
 800541c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800541e:	f000 fd39 	bl	8005e94 <__retarget_lock_acquire_recursive>
 8005422:	89ab      	ldrh	r3, [r5, #12]
 8005424:	071b      	lsls	r3, r3, #28
 8005426:	d501      	bpl.n	800542c <_vfiprintf_r+0x3c>
 8005428:	692b      	ldr	r3, [r5, #16]
 800542a:	b9eb      	cbnz	r3, 8005468 <_vfiprintf_r+0x78>
 800542c:	4629      	mov	r1, r5
 800542e:	4630      	mov	r0, r6
 8005430:	f000 fb06 	bl	8005a40 <__swsetup_r>
 8005434:	b1c0      	cbz	r0, 8005468 <_vfiprintf_r+0x78>
 8005436:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005438:	07dc      	lsls	r4, r3, #31
 800543a:	d50e      	bpl.n	800545a <_vfiprintf_r+0x6a>
 800543c:	f04f 30ff 	mov.w	r0, #4294967295
 8005440:	b01d      	add	sp, #116	; 0x74
 8005442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005446:	4b7b      	ldr	r3, [pc, #492]	; (8005634 <_vfiprintf_r+0x244>)
 8005448:	429d      	cmp	r5, r3
 800544a:	d101      	bne.n	8005450 <_vfiprintf_r+0x60>
 800544c:	68b5      	ldr	r5, [r6, #8]
 800544e:	e7df      	b.n	8005410 <_vfiprintf_r+0x20>
 8005450:	4b79      	ldr	r3, [pc, #484]	; (8005638 <_vfiprintf_r+0x248>)
 8005452:	429d      	cmp	r5, r3
 8005454:	bf08      	it	eq
 8005456:	68f5      	ldreq	r5, [r6, #12]
 8005458:	e7da      	b.n	8005410 <_vfiprintf_r+0x20>
 800545a:	89ab      	ldrh	r3, [r5, #12]
 800545c:	0598      	lsls	r0, r3, #22
 800545e:	d4ed      	bmi.n	800543c <_vfiprintf_r+0x4c>
 8005460:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005462:	f000 fd18 	bl	8005e96 <__retarget_lock_release_recursive>
 8005466:	e7e9      	b.n	800543c <_vfiprintf_r+0x4c>
 8005468:	2300      	movs	r3, #0
 800546a:	9309      	str	r3, [sp, #36]	; 0x24
 800546c:	2320      	movs	r3, #32
 800546e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005472:	2330      	movs	r3, #48	; 0x30
 8005474:	f04f 0901 	mov.w	r9, #1
 8005478:	f8cd 800c 	str.w	r8, [sp, #12]
 800547c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800563c <_vfiprintf_r+0x24c>
 8005480:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005484:	4623      	mov	r3, r4
 8005486:	469a      	mov	sl, r3
 8005488:	f813 2b01 	ldrb.w	r2, [r3], #1
 800548c:	b10a      	cbz	r2, 8005492 <_vfiprintf_r+0xa2>
 800548e:	2a25      	cmp	r2, #37	; 0x25
 8005490:	d1f9      	bne.n	8005486 <_vfiprintf_r+0x96>
 8005492:	ebba 0b04 	subs.w	fp, sl, r4
 8005496:	d00b      	beq.n	80054b0 <_vfiprintf_r+0xc0>
 8005498:	465b      	mov	r3, fp
 800549a:	4622      	mov	r2, r4
 800549c:	4629      	mov	r1, r5
 800549e:	4630      	mov	r0, r6
 80054a0:	f7ff ff93 	bl	80053ca <__sfputs_r>
 80054a4:	3001      	adds	r0, #1
 80054a6:	f000 80aa 	beq.w	80055fe <_vfiprintf_r+0x20e>
 80054aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054ac:	445a      	add	r2, fp
 80054ae:	9209      	str	r2, [sp, #36]	; 0x24
 80054b0:	f89a 3000 	ldrb.w	r3, [sl]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 80a2 	beq.w	80055fe <_vfiprintf_r+0x20e>
 80054ba:	2300      	movs	r3, #0
 80054bc:	f04f 32ff 	mov.w	r2, #4294967295
 80054c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054c4:	f10a 0a01 	add.w	sl, sl, #1
 80054c8:	9304      	str	r3, [sp, #16]
 80054ca:	9307      	str	r3, [sp, #28]
 80054cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054d0:	931a      	str	r3, [sp, #104]	; 0x68
 80054d2:	4654      	mov	r4, sl
 80054d4:	2205      	movs	r2, #5
 80054d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054da:	4858      	ldr	r0, [pc, #352]	; (800563c <_vfiprintf_r+0x24c>)
 80054dc:	f000 fd42 	bl	8005f64 <memchr>
 80054e0:	9a04      	ldr	r2, [sp, #16]
 80054e2:	b9d8      	cbnz	r0, 800551c <_vfiprintf_r+0x12c>
 80054e4:	06d1      	lsls	r1, r2, #27
 80054e6:	bf44      	itt	mi
 80054e8:	2320      	movmi	r3, #32
 80054ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054ee:	0713      	lsls	r3, r2, #28
 80054f0:	bf44      	itt	mi
 80054f2:	232b      	movmi	r3, #43	; 0x2b
 80054f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054f8:	f89a 3000 	ldrb.w	r3, [sl]
 80054fc:	2b2a      	cmp	r3, #42	; 0x2a
 80054fe:	d015      	beq.n	800552c <_vfiprintf_r+0x13c>
 8005500:	4654      	mov	r4, sl
 8005502:	2000      	movs	r0, #0
 8005504:	f04f 0c0a 	mov.w	ip, #10
 8005508:	9a07      	ldr	r2, [sp, #28]
 800550a:	4621      	mov	r1, r4
 800550c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005510:	3b30      	subs	r3, #48	; 0x30
 8005512:	2b09      	cmp	r3, #9
 8005514:	d94e      	bls.n	80055b4 <_vfiprintf_r+0x1c4>
 8005516:	b1b0      	cbz	r0, 8005546 <_vfiprintf_r+0x156>
 8005518:	9207      	str	r2, [sp, #28]
 800551a:	e014      	b.n	8005546 <_vfiprintf_r+0x156>
 800551c:	eba0 0308 	sub.w	r3, r0, r8
 8005520:	fa09 f303 	lsl.w	r3, r9, r3
 8005524:	4313      	orrs	r3, r2
 8005526:	46a2      	mov	sl, r4
 8005528:	9304      	str	r3, [sp, #16]
 800552a:	e7d2      	b.n	80054d2 <_vfiprintf_r+0xe2>
 800552c:	9b03      	ldr	r3, [sp, #12]
 800552e:	1d19      	adds	r1, r3, #4
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	9103      	str	r1, [sp, #12]
 8005534:	2b00      	cmp	r3, #0
 8005536:	bfbb      	ittet	lt
 8005538:	425b      	neglt	r3, r3
 800553a:	f042 0202 	orrlt.w	r2, r2, #2
 800553e:	9307      	strge	r3, [sp, #28]
 8005540:	9307      	strlt	r3, [sp, #28]
 8005542:	bfb8      	it	lt
 8005544:	9204      	strlt	r2, [sp, #16]
 8005546:	7823      	ldrb	r3, [r4, #0]
 8005548:	2b2e      	cmp	r3, #46	; 0x2e
 800554a:	d10c      	bne.n	8005566 <_vfiprintf_r+0x176>
 800554c:	7863      	ldrb	r3, [r4, #1]
 800554e:	2b2a      	cmp	r3, #42	; 0x2a
 8005550:	d135      	bne.n	80055be <_vfiprintf_r+0x1ce>
 8005552:	9b03      	ldr	r3, [sp, #12]
 8005554:	3402      	adds	r4, #2
 8005556:	1d1a      	adds	r2, r3, #4
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	9203      	str	r2, [sp, #12]
 800555c:	2b00      	cmp	r3, #0
 800555e:	bfb8      	it	lt
 8005560:	f04f 33ff 	movlt.w	r3, #4294967295
 8005564:	9305      	str	r3, [sp, #20]
 8005566:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005640 <_vfiprintf_r+0x250>
 800556a:	2203      	movs	r2, #3
 800556c:	4650      	mov	r0, sl
 800556e:	7821      	ldrb	r1, [r4, #0]
 8005570:	f000 fcf8 	bl	8005f64 <memchr>
 8005574:	b140      	cbz	r0, 8005588 <_vfiprintf_r+0x198>
 8005576:	2340      	movs	r3, #64	; 0x40
 8005578:	eba0 000a 	sub.w	r0, r0, sl
 800557c:	fa03 f000 	lsl.w	r0, r3, r0
 8005580:	9b04      	ldr	r3, [sp, #16]
 8005582:	3401      	adds	r4, #1
 8005584:	4303      	orrs	r3, r0
 8005586:	9304      	str	r3, [sp, #16]
 8005588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800558c:	2206      	movs	r2, #6
 800558e:	482d      	ldr	r0, [pc, #180]	; (8005644 <_vfiprintf_r+0x254>)
 8005590:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005594:	f000 fce6 	bl	8005f64 <memchr>
 8005598:	2800      	cmp	r0, #0
 800559a:	d03f      	beq.n	800561c <_vfiprintf_r+0x22c>
 800559c:	4b2a      	ldr	r3, [pc, #168]	; (8005648 <_vfiprintf_r+0x258>)
 800559e:	bb1b      	cbnz	r3, 80055e8 <_vfiprintf_r+0x1f8>
 80055a0:	9b03      	ldr	r3, [sp, #12]
 80055a2:	3307      	adds	r3, #7
 80055a4:	f023 0307 	bic.w	r3, r3, #7
 80055a8:	3308      	adds	r3, #8
 80055aa:	9303      	str	r3, [sp, #12]
 80055ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055ae:	443b      	add	r3, r7
 80055b0:	9309      	str	r3, [sp, #36]	; 0x24
 80055b2:	e767      	b.n	8005484 <_vfiprintf_r+0x94>
 80055b4:	460c      	mov	r4, r1
 80055b6:	2001      	movs	r0, #1
 80055b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80055bc:	e7a5      	b.n	800550a <_vfiprintf_r+0x11a>
 80055be:	2300      	movs	r3, #0
 80055c0:	f04f 0c0a 	mov.w	ip, #10
 80055c4:	4619      	mov	r1, r3
 80055c6:	3401      	adds	r4, #1
 80055c8:	9305      	str	r3, [sp, #20]
 80055ca:	4620      	mov	r0, r4
 80055cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055d0:	3a30      	subs	r2, #48	; 0x30
 80055d2:	2a09      	cmp	r2, #9
 80055d4:	d903      	bls.n	80055de <_vfiprintf_r+0x1ee>
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0c5      	beq.n	8005566 <_vfiprintf_r+0x176>
 80055da:	9105      	str	r1, [sp, #20]
 80055dc:	e7c3      	b.n	8005566 <_vfiprintf_r+0x176>
 80055de:	4604      	mov	r4, r0
 80055e0:	2301      	movs	r3, #1
 80055e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80055e6:	e7f0      	b.n	80055ca <_vfiprintf_r+0x1da>
 80055e8:	ab03      	add	r3, sp, #12
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	462a      	mov	r2, r5
 80055ee:	4630      	mov	r0, r6
 80055f0:	4b16      	ldr	r3, [pc, #88]	; (800564c <_vfiprintf_r+0x25c>)
 80055f2:	a904      	add	r1, sp, #16
 80055f4:	f3af 8000 	nop.w
 80055f8:	4607      	mov	r7, r0
 80055fa:	1c78      	adds	r0, r7, #1
 80055fc:	d1d6      	bne.n	80055ac <_vfiprintf_r+0x1bc>
 80055fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005600:	07d9      	lsls	r1, r3, #31
 8005602:	d405      	bmi.n	8005610 <_vfiprintf_r+0x220>
 8005604:	89ab      	ldrh	r3, [r5, #12]
 8005606:	059a      	lsls	r2, r3, #22
 8005608:	d402      	bmi.n	8005610 <_vfiprintf_r+0x220>
 800560a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800560c:	f000 fc43 	bl	8005e96 <__retarget_lock_release_recursive>
 8005610:	89ab      	ldrh	r3, [r5, #12]
 8005612:	065b      	lsls	r3, r3, #25
 8005614:	f53f af12 	bmi.w	800543c <_vfiprintf_r+0x4c>
 8005618:	9809      	ldr	r0, [sp, #36]	; 0x24
 800561a:	e711      	b.n	8005440 <_vfiprintf_r+0x50>
 800561c:	ab03      	add	r3, sp, #12
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	462a      	mov	r2, r5
 8005622:	4630      	mov	r0, r6
 8005624:	4b09      	ldr	r3, [pc, #36]	; (800564c <_vfiprintf_r+0x25c>)
 8005626:	a904      	add	r1, sp, #16
 8005628:	f000 f882 	bl	8005730 <_printf_i>
 800562c:	e7e4      	b.n	80055f8 <_vfiprintf_r+0x208>
 800562e:	bf00      	nop
 8005630:	08006434 	.word	0x08006434
 8005634:	08006454 	.word	0x08006454
 8005638:	08006414 	.word	0x08006414
 800563c:	080063e0 	.word	0x080063e0
 8005640:	080063e6 	.word	0x080063e6
 8005644:	080063ea 	.word	0x080063ea
 8005648:	00000000 	.word	0x00000000
 800564c:	080053cb 	.word	0x080053cb

08005650 <_printf_common>:
 8005650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005654:	4616      	mov	r6, r2
 8005656:	4699      	mov	r9, r3
 8005658:	688a      	ldr	r2, [r1, #8]
 800565a:	690b      	ldr	r3, [r1, #16]
 800565c:	4607      	mov	r7, r0
 800565e:	4293      	cmp	r3, r2
 8005660:	bfb8      	it	lt
 8005662:	4613      	movlt	r3, r2
 8005664:	6033      	str	r3, [r6, #0]
 8005666:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800566a:	460c      	mov	r4, r1
 800566c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005670:	b10a      	cbz	r2, 8005676 <_printf_common+0x26>
 8005672:	3301      	adds	r3, #1
 8005674:	6033      	str	r3, [r6, #0]
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	0699      	lsls	r1, r3, #26
 800567a:	bf42      	ittt	mi
 800567c:	6833      	ldrmi	r3, [r6, #0]
 800567e:	3302      	addmi	r3, #2
 8005680:	6033      	strmi	r3, [r6, #0]
 8005682:	6825      	ldr	r5, [r4, #0]
 8005684:	f015 0506 	ands.w	r5, r5, #6
 8005688:	d106      	bne.n	8005698 <_printf_common+0x48>
 800568a:	f104 0a19 	add.w	sl, r4, #25
 800568e:	68e3      	ldr	r3, [r4, #12]
 8005690:	6832      	ldr	r2, [r6, #0]
 8005692:	1a9b      	subs	r3, r3, r2
 8005694:	42ab      	cmp	r3, r5
 8005696:	dc28      	bgt.n	80056ea <_printf_common+0x9a>
 8005698:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800569c:	1e13      	subs	r3, r2, #0
 800569e:	6822      	ldr	r2, [r4, #0]
 80056a0:	bf18      	it	ne
 80056a2:	2301      	movne	r3, #1
 80056a4:	0692      	lsls	r2, r2, #26
 80056a6:	d42d      	bmi.n	8005704 <_printf_common+0xb4>
 80056a8:	4649      	mov	r1, r9
 80056aa:	4638      	mov	r0, r7
 80056ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056b0:	47c0      	blx	r8
 80056b2:	3001      	adds	r0, #1
 80056b4:	d020      	beq.n	80056f8 <_printf_common+0xa8>
 80056b6:	6823      	ldr	r3, [r4, #0]
 80056b8:	68e5      	ldr	r5, [r4, #12]
 80056ba:	f003 0306 	and.w	r3, r3, #6
 80056be:	2b04      	cmp	r3, #4
 80056c0:	bf18      	it	ne
 80056c2:	2500      	movne	r5, #0
 80056c4:	6832      	ldr	r2, [r6, #0]
 80056c6:	f04f 0600 	mov.w	r6, #0
 80056ca:	68a3      	ldr	r3, [r4, #8]
 80056cc:	bf08      	it	eq
 80056ce:	1aad      	subeq	r5, r5, r2
 80056d0:	6922      	ldr	r2, [r4, #16]
 80056d2:	bf08      	it	eq
 80056d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056d8:	4293      	cmp	r3, r2
 80056da:	bfc4      	itt	gt
 80056dc:	1a9b      	subgt	r3, r3, r2
 80056de:	18ed      	addgt	r5, r5, r3
 80056e0:	341a      	adds	r4, #26
 80056e2:	42b5      	cmp	r5, r6
 80056e4:	d11a      	bne.n	800571c <_printf_common+0xcc>
 80056e6:	2000      	movs	r0, #0
 80056e8:	e008      	b.n	80056fc <_printf_common+0xac>
 80056ea:	2301      	movs	r3, #1
 80056ec:	4652      	mov	r2, sl
 80056ee:	4649      	mov	r1, r9
 80056f0:	4638      	mov	r0, r7
 80056f2:	47c0      	blx	r8
 80056f4:	3001      	adds	r0, #1
 80056f6:	d103      	bne.n	8005700 <_printf_common+0xb0>
 80056f8:	f04f 30ff 	mov.w	r0, #4294967295
 80056fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005700:	3501      	adds	r5, #1
 8005702:	e7c4      	b.n	800568e <_printf_common+0x3e>
 8005704:	2030      	movs	r0, #48	; 0x30
 8005706:	18e1      	adds	r1, r4, r3
 8005708:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800570c:	1c5a      	adds	r2, r3, #1
 800570e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005712:	4422      	add	r2, r4
 8005714:	3302      	adds	r3, #2
 8005716:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800571a:	e7c5      	b.n	80056a8 <_printf_common+0x58>
 800571c:	2301      	movs	r3, #1
 800571e:	4622      	mov	r2, r4
 8005720:	4649      	mov	r1, r9
 8005722:	4638      	mov	r0, r7
 8005724:	47c0      	blx	r8
 8005726:	3001      	adds	r0, #1
 8005728:	d0e6      	beq.n	80056f8 <_printf_common+0xa8>
 800572a:	3601      	adds	r6, #1
 800572c:	e7d9      	b.n	80056e2 <_printf_common+0x92>
	...

08005730 <_printf_i>:
 8005730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005734:	7e0f      	ldrb	r7, [r1, #24]
 8005736:	4691      	mov	r9, r2
 8005738:	2f78      	cmp	r7, #120	; 0x78
 800573a:	4680      	mov	r8, r0
 800573c:	460c      	mov	r4, r1
 800573e:	469a      	mov	sl, r3
 8005740:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005742:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005746:	d807      	bhi.n	8005758 <_printf_i+0x28>
 8005748:	2f62      	cmp	r7, #98	; 0x62
 800574a:	d80a      	bhi.n	8005762 <_printf_i+0x32>
 800574c:	2f00      	cmp	r7, #0
 800574e:	f000 80d9 	beq.w	8005904 <_printf_i+0x1d4>
 8005752:	2f58      	cmp	r7, #88	; 0x58
 8005754:	f000 80a4 	beq.w	80058a0 <_printf_i+0x170>
 8005758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800575c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005760:	e03a      	b.n	80057d8 <_printf_i+0xa8>
 8005762:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005766:	2b15      	cmp	r3, #21
 8005768:	d8f6      	bhi.n	8005758 <_printf_i+0x28>
 800576a:	a101      	add	r1, pc, #4	; (adr r1, 8005770 <_printf_i+0x40>)
 800576c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005770:	080057c9 	.word	0x080057c9
 8005774:	080057dd 	.word	0x080057dd
 8005778:	08005759 	.word	0x08005759
 800577c:	08005759 	.word	0x08005759
 8005780:	08005759 	.word	0x08005759
 8005784:	08005759 	.word	0x08005759
 8005788:	080057dd 	.word	0x080057dd
 800578c:	08005759 	.word	0x08005759
 8005790:	08005759 	.word	0x08005759
 8005794:	08005759 	.word	0x08005759
 8005798:	08005759 	.word	0x08005759
 800579c:	080058eb 	.word	0x080058eb
 80057a0:	0800580d 	.word	0x0800580d
 80057a4:	080058cd 	.word	0x080058cd
 80057a8:	08005759 	.word	0x08005759
 80057ac:	08005759 	.word	0x08005759
 80057b0:	0800590d 	.word	0x0800590d
 80057b4:	08005759 	.word	0x08005759
 80057b8:	0800580d 	.word	0x0800580d
 80057bc:	08005759 	.word	0x08005759
 80057c0:	08005759 	.word	0x08005759
 80057c4:	080058d5 	.word	0x080058d5
 80057c8:	682b      	ldr	r3, [r5, #0]
 80057ca:	1d1a      	adds	r2, r3, #4
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	602a      	str	r2, [r5, #0]
 80057d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057d8:	2301      	movs	r3, #1
 80057da:	e0a4      	b.n	8005926 <_printf_i+0x1f6>
 80057dc:	6820      	ldr	r0, [r4, #0]
 80057de:	6829      	ldr	r1, [r5, #0]
 80057e0:	0606      	lsls	r6, r0, #24
 80057e2:	f101 0304 	add.w	r3, r1, #4
 80057e6:	d50a      	bpl.n	80057fe <_printf_i+0xce>
 80057e8:	680e      	ldr	r6, [r1, #0]
 80057ea:	602b      	str	r3, [r5, #0]
 80057ec:	2e00      	cmp	r6, #0
 80057ee:	da03      	bge.n	80057f8 <_printf_i+0xc8>
 80057f0:	232d      	movs	r3, #45	; 0x2d
 80057f2:	4276      	negs	r6, r6
 80057f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057f8:	230a      	movs	r3, #10
 80057fa:	485e      	ldr	r0, [pc, #376]	; (8005974 <_printf_i+0x244>)
 80057fc:	e019      	b.n	8005832 <_printf_i+0x102>
 80057fe:	680e      	ldr	r6, [r1, #0]
 8005800:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005804:	602b      	str	r3, [r5, #0]
 8005806:	bf18      	it	ne
 8005808:	b236      	sxthne	r6, r6
 800580a:	e7ef      	b.n	80057ec <_printf_i+0xbc>
 800580c:	682b      	ldr	r3, [r5, #0]
 800580e:	6820      	ldr	r0, [r4, #0]
 8005810:	1d19      	adds	r1, r3, #4
 8005812:	6029      	str	r1, [r5, #0]
 8005814:	0601      	lsls	r1, r0, #24
 8005816:	d501      	bpl.n	800581c <_printf_i+0xec>
 8005818:	681e      	ldr	r6, [r3, #0]
 800581a:	e002      	b.n	8005822 <_printf_i+0xf2>
 800581c:	0646      	lsls	r6, r0, #25
 800581e:	d5fb      	bpl.n	8005818 <_printf_i+0xe8>
 8005820:	881e      	ldrh	r6, [r3, #0]
 8005822:	2f6f      	cmp	r7, #111	; 0x6f
 8005824:	bf0c      	ite	eq
 8005826:	2308      	moveq	r3, #8
 8005828:	230a      	movne	r3, #10
 800582a:	4852      	ldr	r0, [pc, #328]	; (8005974 <_printf_i+0x244>)
 800582c:	2100      	movs	r1, #0
 800582e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005832:	6865      	ldr	r5, [r4, #4]
 8005834:	2d00      	cmp	r5, #0
 8005836:	bfa8      	it	ge
 8005838:	6821      	ldrge	r1, [r4, #0]
 800583a:	60a5      	str	r5, [r4, #8]
 800583c:	bfa4      	itt	ge
 800583e:	f021 0104 	bicge.w	r1, r1, #4
 8005842:	6021      	strge	r1, [r4, #0]
 8005844:	b90e      	cbnz	r6, 800584a <_printf_i+0x11a>
 8005846:	2d00      	cmp	r5, #0
 8005848:	d04d      	beq.n	80058e6 <_printf_i+0x1b6>
 800584a:	4615      	mov	r5, r2
 800584c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005850:	fb03 6711 	mls	r7, r3, r1, r6
 8005854:	5dc7      	ldrb	r7, [r0, r7]
 8005856:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800585a:	4637      	mov	r7, r6
 800585c:	42bb      	cmp	r3, r7
 800585e:	460e      	mov	r6, r1
 8005860:	d9f4      	bls.n	800584c <_printf_i+0x11c>
 8005862:	2b08      	cmp	r3, #8
 8005864:	d10b      	bne.n	800587e <_printf_i+0x14e>
 8005866:	6823      	ldr	r3, [r4, #0]
 8005868:	07de      	lsls	r6, r3, #31
 800586a:	d508      	bpl.n	800587e <_printf_i+0x14e>
 800586c:	6923      	ldr	r3, [r4, #16]
 800586e:	6861      	ldr	r1, [r4, #4]
 8005870:	4299      	cmp	r1, r3
 8005872:	bfde      	ittt	le
 8005874:	2330      	movle	r3, #48	; 0x30
 8005876:	f805 3c01 	strble.w	r3, [r5, #-1]
 800587a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800587e:	1b52      	subs	r2, r2, r5
 8005880:	6122      	str	r2, [r4, #16]
 8005882:	464b      	mov	r3, r9
 8005884:	4621      	mov	r1, r4
 8005886:	4640      	mov	r0, r8
 8005888:	f8cd a000 	str.w	sl, [sp]
 800588c:	aa03      	add	r2, sp, #12
 800588e:	f7ff fedf 	bl	8005650 <_printf_common>
 8005892:	3001      	adds	r0, #1
 8005894:	d14c      	bne.n	8005930 <_printf_i+0x200>
 8005896:	f04f 30ff 	mov.w	r0, #4294967295
 800589a:	b004      	add	sp, #16
 800589c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058a0:	4834      	ldr	r0, [pc, #208]	; (8005974 <_printf_i+0x244>)
 80058a2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80058a6:	6829      	ldr	r1, [r5, #0]
 80058a8:	6823      	ldr	r3, [r4, #0]
 80058aa:	f851 6b04 	ldr.w	r6, [r1], #4
 80058ae:	6029      	str	r1, [r5, #0]
 80058b0:	061d      	lsls	r5, r3, #24
 80058b2:	d514      	bpl.n	80058de <_printf_i+0x1ae>
 80058b4:	07df      	lsls	r7, r3, #31
 80058b6:	bf44      	itt	mi
 80058b8:	f043 0320 	orrmi.w	r3, r3, #32
 80058bc:	6023      	strmi	r3, [r4, #0]
 80058be:	b91e      	cbnz	r6, 80058c8 <_printf_i+0x198>
 80058c0:	6823      	ldr	r3, [r4, #0]
 80058c2:	f023 0320 	bic.w	r3, r3, #32
 80058c6:	6023      	str	r3, [r4, #0]
 80058c8:	2310      	movs	r3, #16
 80058ca:	e7af      	b.n	800582c <_printf_i+0xfc>
 80058cc:	6823      	ldr	r3, [r4, #0]
 80058ce:	f043 0320 	orr.w	r3, r3, #32
 80058d2:	6023      	str	r3, [r4, #0]
 80058d4:	2378      	movs	r3, #120	; 0x78
 80058d6:	4828      	ldr	r0, [pc, #160]	; (8005978 <_printf_i+0x248>)
 80058d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058dc:	e7e3      	b.n	80058a6 <_printf_i+0x176>
 80058de:	0659      	lsls	r1, r3, #25
 80058e0:	bf48      	it	mi
 80058e2:	b2b6      	uxthmi	r6, r6
 80058e4:	e7e6      	b.n	80058b4 <_printf_i+0x184>
 80058e6:	4615      	mov	r5, r2
 80058e8:	e7bb      	b.n	8005862 <_printf_i+0x132>
 80058ea:	682b      	ldr	r3, [r5, #0]
 80058ec:	6826      	ldr	r6, [r4, #0]
 80058ee:	1d18      	adds	r0, r3, #4
 80058f0:	6961      	ldr	r1, [r4, #20]
 80058f2:	6028      	str	r0, [r5, #0]
 80058f4:	0635      	lsls	r5, r6, #24
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	d501      	bpl.n	80058fe <_printf_i+0x1ce>
 80058fa:	6019      	str	r1, [r3, #0]
 80058fc:	e002      	b.n	8005904 <_printf_i+0x1d4>
 80058fe:	0670      	lsls	r0, r6, #25
 8005900:	d5fb      	bpl.n	80058fa <_printf_i+0x1ca>
 8005902:	8019      	strh	r1, [r3, #0]
 8005904:	2300      	movs	r3, #0
 8005906:	4615      	mov	r5, r2
 8005908:	6123      	str	r3, [r4, #16]
 800590a:	e7ba      	b.n	8005882 <_printf_i+0x152>
 800590c:	682b      	ldr	r3, [r5, #0]
 800590e:	2100      	movs	r1, #0
 8005910:	1d1a      	adds	r2, r3, #4
 8005912:	602a      	str	r2, [r5, #0]
 8005914:	681d      	ldr	r5, [r3, #0]
 8005916:	6862      	ldr	r2, [r4, #4]
 8005918:	4628      	mov	r0, r5
 800591a:	f000 fb23 	bl	8005f64 <memchr>
 800591e:	b108      	cbz	r0, 8005924 <_printf_i+0x1f4>
 8005920:	1b40      	subs	r0, r0, r5
 8005922:	6060      	str	r0, [r4, #4]
 8005924:	6863      	ldr	r3, [r4, #4]
 8005926:	6123      	str	r3, [r4, #16]
 8005928:	2300      	movs	r3, #0
 800592a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800592e:	e7a8      	b.n	8005882 <_printf_i+0x152>
 8005930:	462a      	mov	r2, r5
 8005932:	4649      	mov	r1, r9
 8005934:	4640      	mov	r0, r8
 8005936:	6923      	ldr	r3, [r4, #16]
 8005938:	47d0      	blx	sl
 800593a:	3001      	adds	r0, #1
 800593c:	d0ab      	beq.n	8005896 <_printf_i+0x166>
 800593e:	6823      	ldr	r3, [r4, #0]
 8005940:	079b      	lsls	r3, r3, #30
 8005942:	d413      	bmi.n	800596c <_printf_i+0x23c>
 8005944:	68e0      	ldr	r0, [r4, #12]
 8005946:	9b03      	ldr	r3, [sp, #12]
 8005948:	4298      	cmp	r0, r3
 800594a:	bfb8      	it	lt
 800594c:	4618      	movlt	r0, r3
 800594e:	e7a4      	b.n	800589a <_printf_i+0x16a>
 8005950:	2301      	movs	r3, #1
 8005952:	4632      	mov	r2, r6
 8005954:	4649      	mov	r1, r9
 8005956:	4640      	mov	r0, r8
 8005958:	47d0      	blx	sl
 800595a:	3001      	adds	r0, #1
 800595c:	d09b      	beq.n	8005896 <_printf_i+0x166>
 800595e:	3501      	adds	r5, #1
 8005960:	68e3      	ldr	r3, [r4, #12]
 8005962:	9903      	ldr	r1, [sp, #12]
 8005964:	1a5b      	subs	r3, r3, r1
 8005966:	42ab      	cmp	r3, r5
 8005968:	dcf2      	bgt.n	8005950 <_printf_i+0x220>
 800596a:	e7eb      	b.n	8005944 <_printf_i+0x214>
 800596c:	2500      	movs	r5, #0
 800596e:	f104 0619 	add.w	r6, r4, #25
 8005972:	e7f5      	b.n	8005960 <_printf_i+0x230>
 8005974:	080063f1 	.word	0x080063f1
 8005978:	08006402 	.word	0x08006402

0800597c <_sbrk_r>:
 800597c:	b538      	push	{r3, r4, r5, lr}
 800597e:	2300      	movs	r3, #0
 8005980:	4d05      	ldr	r5, [pc, #20]	; (8005998 <_sbrk_r+0x1c>)
 8005982:	4604      	mov	r4, r0
 8005984:	4608      	mov	r0, r1
 8005986:	602b      	str	r3, [r5, #0]
 8005988:	f7fb fb8e 	bl	80010a8 <_sbrk>
 800598c:	1c43      	adds	r3, r0, #1
 800598e:	d102      	bne.n	8005996 <_sbrk_r+0x1a>
 8005990:	682b      	ldr	r3, [r5, #0]
 8005992:	b103      	cbz	r3, 8005996 <_sbrk_r+0x1a>
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	bd38      	pop	{r3, r4, r5, pc}
 8005998:	20002324 	.word	0x20002324

0800599c <__swbuf_r>:
 800599c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800599e:	460e      	mov	r6, r1
 80059a0:	4614      	mov	r4, r2
 80059a2:	4605      	mov	r5, r0
 80059a4:	b118      	cbz	r0, 80059ae <__swbuf_r+0x12>
 80059a6:	6983      	ldr	r3, [r0, #24]
 80059a8:	b90b      	cbnz	r3, 80059ae <__swbuf_r+0x12>
 80059aa:	f000 f9d5 	bl	8005d58 <__sinit>
 80059ae:	4b21      	ldr	r3, [pc, #132]	; (8005a34 <__swbuf_r+0x98>)
 80059b0:	429c      	cmp	r4, r3
 80059b2:	d12b      	bne.n	8005a0c <__swbuf_r+0x70>
 80059b4:	686c      	ldr	r4, [r5, #4]
 80059b6:	69a3      	ldr	r3, [r4, #24]
 80059b8:	60a3      	str	r3, [r4, #8]
 80059ba:	89a3      	ldrh	r3, [r4, #12]
 80059bc:	071a      	lsls	r2, r3, #28
 80059be:	d52f      	bpl.n	8005a20 <__swbuf_r+0x84>
 80059c0:	6923      	ldr	r3, [r4, #16]
 80059c2:	b36b      	cbz	r3, 8005a20 <__swbuf_r+0x84>
 80059c4:	6923      	ldr	r3, [r4, #16]
 80059c6:	6820      	ldr	r0, [r4, #0]
 80059c8:	b2f6      	uxtb	r6, r6
 80059ca:	1ac0      	subs	r0, r0, r3
 80059cc:	6963      	ldr	r3, [r4, #20]
 80059ce:	4637      	mov	r7, r6
 80059d0:	4283      	cmp	r3, r0
 80059d2:	dc04      	bgt.n	80059de <__swbuf_r+0x42>
 80059d4:	4621      	mov	r1, r4
 80059d6:	4628      	mov	r0, r5
 80059d8:	f000 f92a 	bl	8005c30 <_fflush_r>
 80059dc:	bb30      	cbnz	r0, 8005a2c <__swbuf_r+0x90>
 80059de:	68a3      	ldr	r3, [r4, #8]
 80059e0:	3001      	adds	r0, #1
 80059e2:	3b01      	subs	r3, #1
 80059e4:	60a3      	str	r3, [r4, #8]
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	6022      	str	r2, [r4, #0]
 80059ec:	701e      	strb	r6, [r3, #0]
 80059ee:	6963      	ldr	r3, [r4, #20]
 80059f0:	4283      	cmp	r3, r0
 80059f2:	d004      	beq.n	80059fe <__swbuf_r+0x62>
 80059f4:	89a3      	ldrh	r3, [r4, #12]
 80059f6:	07db      	lsls	r3, r3, #31
 80059f8:	d506      	bpl.n	8005a08 <__swbuf_r+0x6c>
 80059fa:	2e0a      	cmp	r6, #10
 80059fc:	d104      	bne.n	8005a08 <__swbuf_r+0x6c>
 80059fe:	4621      	mov	r1, r4
 8005a00:	4628      	mov	r0, r5
 8005a02:	f000 f915 	bl	8005c30 <_fflush_r>
 8005a06:	b988      	cbnz	r0, 8005a2c <__swbuf_r+0x90>
 8005a08:	4638      	mov	r0, r7
 8005a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a0c:	4b0a      	ldr	r3, [pc, #40]	; (8005a38 <__swbuf_r+0x9c>)
 8005a0e:	429c      	cmp	r4, r3
 8005a10:	d101      	bne.n	8005a16 <__swbuf_r+0x7a>
 8005a12:	68ac      	ldr	r4, [r5, #8]
 8005a14:	e7cf      	b.n	80059b6 <__swbuf_r+0x1a>
 8005a16:	4b09      	ldr	r3, [pc, #36]	; (8005a3c <__swbuf_r+0xa0>)
 8005a18:	429c      	cmp	r4, r3
 8005a1a:	bf08      	it	eq
 8005a1c:	68ec      	ldreq	r4, [r5, #12]
 8005a1e:	e7ca      	b.n	80059b6 <__swbuf_r+0x1a>
 8005a20:	4621      	mov	r1, r4
 8005a22:	4628      	mov	r0, r5
 8005a24:	f000 f80c 	bl	8005a40 <__swsetup_r>
 8005a28:	2800      	cmp	r0, #0
 8005a2a:	d0cb      	beq.n	80059c4 <__swbuf_r+0x28>
 8005a2c:	f04f 37ff 	mov.w	r7, #4294967295
 8005a30:	e7ea      	b.n	8005a08 <__swbuf_r+0x6c>
 8005a32:	bf00      	nop
 8005a34:	08006434 	.word	0x08006434
 8005a38:	08006454 	.word	0x08006454
 8005a3c:	08006414 	.word	0x08006414

08005a40 <__swsetup_r>:
 8005a40:	4b32      	ldr	r3, [pc, #200]	; (8005b0c <__swsetup_r+0xcc>)
 8005a42:	b570      	push	{r4, r5, r6, lr}
 8005a44:	681d      	ldr	r5, [r3, #0]
 8005a46:	4606      	mov	r6, r0
 8005a48:	460c      	mov	r4, r1
 8005a4a:	b125      	cbz	r5, 8005a56 <__swsetup_r+0x16>
 8005a4c:	69ab      	ldr	r3, [r5, #24]
 8005a4e:	b913      	cbnz	r3, 8005a56 <__swsetup_r+0x16>
 8005a50:	4628      	mov	r0, r5
 8005a52:	f000 f981 	bl	8005d58 <__sinit>
 8005a56:	4b2e      	ldr	r3, [pc, #184]	; (8005b10 <__swsetup_r+0xd0>)
 8005a58:	429c      	cmp	r4, r3
 8005a5a:	d10f      	bne.n	8005a7c <__swsetup_r+0x3c>
 8005a5c:	686c      	ldr	r4, [r5, #4]
 8005a5e:	89a3      	ldrh	r3, [r4, #12]
 8005a60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a64:	0719      	lsls	r1, r3, #28
 8005a66:	d42c      	bmi.n	8005ac2 <__swsetup_r+0x82>
 8005a68:	06dd      	lsls	r5, r3, #27
 8005a6a:	d411      	bmi.n	8005a90 <__swsetup_r+0x50>
 8005a6c:	2309      	movs	r3, #9
 8005a6e:	6033      	str	r3, [r6, #0]
 8005a70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a74:	f04f 30ff 	mov.w	r0, #4294967295
 8005a78:	81a3      	strh	r3, [r4, #12]
 8005a7a:	e03e      	b.n	8005afa <__swsetup_r+0xba>
 8005a7c:	4b25      	ldr	r3, [pc, #148]	; (8005b14 <__swsetup_r+0xd4>)
 8005a7e:	429c      	cmp	r4, r3
 8005a80:	d101      	bne.n	8005a86 <__swsetup_r+0x46>
 8005a82:	68ac      	ldr	r4, [r5, #8]
 8005a84:	e7eb      	b.n	8005a5e <__swsetup_r+0x1e>
 8005a86:	4b24      	ldr	r3, [pc, #144]	; (8005b18 <__swsetup_r+0xd8>)
 8005a88:	429c      	cmp	r4, r3
 8005a8a:	bf08      	it	eq
 8005a8c:	68ec      	ldreq	r4, [r5, #12]
 8005a8e:	e7e6      	b.n	8005a5e <__swsetup_r+0x1e>
 8005a90:	0758      	lsls	r0, r3, #29
 8005a92:	d512      	bpl.n	8005aba <__swsetup_r+0x7a>
 8005a94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a96:	b141      	cbz	r1, 8005aaa <__swsetup_r+0x6a>
 8005a98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a9c:	4299      	cmp	r1, r3
 8005a9e:	d002      	beq.n	8005aa6 <__swsetup_r+0x66>
 8005aa0:	4630      	mov	r0, r6
 8005aa2:	f7ff fa45 	bl	8004f30 <_free_r>
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	6363      	str	r3, [r4, #52]	; 0x34
 8005aaa:	89a3      	ldrh	r3, [r4, #12]
 8005aac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ab0:	81a3      	strh	r3, [r4, #12]
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	6063      	str	r3, [r4, #4]
 8005ab6:	6923      	ldr	r3, [r4, #16]
 8005ab8:	6023      	str	r3, [r4, #0]
 8005aba:	89a3      	ldrh	r3, [r4, #12]
 8005abc:	f043 0308 	orr.w	r3, r3, #8
 8005ac0:	81a3      	strh	r3, [r4, #12]
 8005ac2:	6923      	ldr	r3, [r4, #16]
 8005ac4:	b94b      	cbnz	r3, 8005ada <__swsetup_r+0x9a>
 8005ac6:	89a3      	ldrh	r3, [r4, #12]
 8005ac8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ad0:	d003      	beq.n	8005ada <__swsetup_r+0x9a>
 8005ad2:	4621      	mov	r1, r4
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	f000 fa05 	bl	8005ee4 <__smakebuf_r>
 8005ada:	89a0      	ldrh	r0, [r4, #12]
 8005adc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ae0:	f010 0301 	ands.w	r3, r0, #1
 8005ae4:	d00a      	beq.n	8005afc <__swsetup_r+0xbc>
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60a3      	str	r3, [r4, #8]
 8005aea:	6963      	ldr	r3, [r4, #20]
 8005aec:	425b      	negs	r3, r3
 8005aee:	61a3      	str	r3, [r4, #24]
 8005af0:	6923      	ldr	r3, [r4, #16]
 8005af2:	b943      	cbnz	r3, 8005b06 <__swsetup_r+0xc6>
 8005af4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005af8:	d1ba      	bne.n	8005a70 <__swsetup_r+0x30>
 8005afa:	bd70      	pop	{r4, r5, r6, pc}
 8005afc:	0781      	lsls	r1, r0, #30
 8005afe:	bf58      	it	pl
 8005b00:	6963      	ldrpl	r3, [r4, #20]
 8005b02:	60a3      	str	r3, [r4, #8]
 8005b04:	e7f4      	b.n	8005af0 <__swsetup_r+0xb0>
 8005b06:	2000      	movs	r0, #0
 8005b08:	e7f7      	b.n	8005afa <__swsetup_r+0xba>
 8005b0a:	bf00      	nop
 8005b0c:	2000000c 	.word	0x2000000c
 8005b10:	08006434 	.word	0x08006434
 8005b14:	08006454 	.word	0x08006454
 8005b18:	08006414 	.word	0x08006414

08005b1c <abort>:
 8005b1c:	2006      	movs	r0, #6
 8005b1e:	b508      	push	{r3, lr}
 8005b20:	f000 faac 	bl	800607c <raise>
 8005b24:	2001      	movs	r0, #1
 8005b26:	f7fb fa4c 	bl	8000fc2 <_exit>
	...

08005b2c <__sflush_r>:
 8005b2c:	898a      	ldrh	r2, [r1, #12]
 8005b2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b30:	4605      	mov	r5, r0
 8005b32:	0710      	lsls	r0, r2, #28
 8005b34:	460c      	mov	r4, r1
 8005b36:	d457      	bmi.n	8005be8 <__sflush_r+0xbc>
 8005b38:	684b      	ldr	r3, [r1, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	dc04      	bgt.n	8005b48 <__sflush_r+0x1c>
 8005b3e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	dc01      	bgt.n	8005b48 <__sflush_r+0x1c>
 8005b44:	2000      	movs	r0, #0
 8005b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b4a:	2e00      	cmp	r6, #0
 8005b4c:	d0fa      	beq.n	8005b44 <__sflush_r+0x18>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b54:	682f      	ldr	r7, [r5, #0]
 8005b56:	602b      	str	r3, [r5, #0]
 8005b58:	d032      	beq.n	8005bc0 <__sflush_r+0x94>
 8005b5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b5c:	89a3      	ldrh	r3, [r4, #12]
 8005b5e:	075a      	lsls	r2, r3, #29
 8005b60:	d505      	bpl.n	8005b6e <__sflush_r+0x42>
 8005b62:	6863      	ldr	r3, [r4, #4]
 8005b64:	1ac0      	subs	r0, r0, r3
 8005b66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b68:	b10b      	cbz	r3, 8005b6e <__sflush_r+0x42>
 8005b6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b6c:	1ac0      	subs	r0, r0, r3
 8005b6e:	2300      	movs	r3, #0
 8005b70:	4602      	mov	r2, r0
 8005b72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b74:	4628      	mov	r0, r5
 8005b76:	6a21      	ldr	r1, [r4, #32]
 8005b78:	47b0      	blx	r6
 8005b7a:	1c43      	adds	r3, r0, #1
 8005b7c:	89a3      	ldrh	r3, [r4, #12]
 8005b7e:	d106      	bne.n	8005b8e <__sflush_r+0x62>
 8005b80:	6829      	ldr	r1, [r5, #0]
 8005b82:	291d      	cmp	r1, #29
 8005b84:	d82c      	bhi.n	8005be0 <__sflush_r+0xb4>
 8005b86:	4a29      	ldr	r2, [pc, #164]	; (8005c2c <__sflush_r+0x100>)
 8005b88:	40ca      	lsrs	r2, r1
 8005b8a:	07d6      	lsls	r6, r2, #31
 8005b8c:	d528      	bpl.n	8005be0 <__sflush_r+0xb4>
 8005b8e:	2200      	movs	r2, #0
 8005b90:	6062      	str	r2, [r4, #4]
 8005b92:	6922      	ldr	r2, [r4, #16]
 8005b94:	04d9      	lsls	r1, r3, #19
 8005b96:	6022      	str	r2, [r4, #0]
 8005b98:	d504      	bpl.n	8005ba4 <__sflush_r+0x78>
 8005b9a:	1c42      	adds	r2, r0, #1
 8005b9c:	d101      	bne.n	8005ba2 <__sflush_r+0x76>
 8005b9e:	682b      	ldr	r3, [r5, #0]
 8005ba0:	b903      	cbnz	r3, 8005ba4 <__sflush_r+0x78>
 8005ba2:	6560      	str	r0, [r4, #84]	; 0x54
 8005ba4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ba6:	602f      	str	r7, [r5, #0]
 8005ba8:	2900      	cmp	r1, #0
 8005baa:	d0cb      	beq.n	8005b44 <__sflush_r+0x18>
 8005bac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bb0:	4299      	cmp	r1, r3
 8005bb2:	d002      	beq.n	8005bba <__sflush_r+0x8e>
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	f7ff f9bb 	bl	8004f30 <_free_r>
 8005bba:	2000      	movs	r0, #0
 8005bbc:	6360      	str	r0, [r4, #52]	; 0x34
 8005bbe:	e7c2      	b.n	8005b46 <__sflush_r+0x1a>
 8005bc0:	6a21      	ldr	r1, [r4, #32]
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	47b0      	blx	r6
 8005bc8:	1c41      	adds	r1, r0, #1
 8005bca:	d1c7      	bne.n	8005b5c <__sflush_r+0x30>
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d0c4      	beq.n	8005b5c <__sflush_r+0x30>
 8005bd2:	2b1d      	cmp	r3, #29
 8005bd4:	d001      	beq.n	8005bda <__sflush_r+0xae>
 8005bd6:	2b16      	cmp	r3, #22
 8005bd8:	d101      	bne.n	8005bde <__sflush_r+0xb2>
 8005bda:	602f      	str	r7, [r5, #0]
 8005bdc:	e7b2      	b.n	8005b44 <__sflush_r+0x18>
 8005bde:	89a3      	ldrh	r3, [r4, #12]
 8005be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005be4:	81a3      	strh	r3, [r4, #12]
 8005be6:	e7ae      	b.n	8005b46 <__sflush_r+0x1a>
 8005be8:	690f      	ldr	r7, [r1, #16]
 8005bea:	2f00      	cmp	r7, #0
 8005bec:	d0aa      	beq.n	8005b44 <__sflush_r+0x18>
 8005bee:	0793      	lsls	r3, r2, #30
 8005bf0:	bf18      	it	ne
 8005bf2:	2300      	movne	r3, #0
 8005bf4:	680e      	ldr	r6, [r1, #0]
 8005bf6:	bf08      	it	eq
 8005bf8:	694b      	ldreq	r3, [r1, #20]
 8005bfa:	1bf6      	subs	r6, r6, r7
 8005bfc:	600f      	str	r7, [r1, #0]
 8005bfe:	608b      	str	r3, [r1, #8]
 8005c00:	2e00      	cmp	r6, #0
 8005c02:	dd9f      	ble.n	8005b44 <__sflush_r+0x18>
 8005c04:	4633      	mov	r3, r6
 8005c06:	463a      	mov	r2, r7
 8005c08:	4628      	mov	r0, r5
 8005c0a:	6a21      	ldr	r1, [r4, #32]
 8005c0c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005c10:	47e0      	blx	ip
 8005c12:	2800      	cmp	r0, #0
 8005c14:	dc06      	bgt.n	8005c24 <__sflush_r+0xf8>
 8005c16:	89a3      	ldrh	r3, [r4, #12]
 8005c18:	f04f 30ff 	mov.w	r0, #4294967295
 8005c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c20:	81a3      	strh	r3, [r4, #12]
 8005c22:	e790      	b.n	8005b46 <__sflush_r+0x1a>
 8005c24:	4407      	add	r7, r0
 8005c26:	1a36      	subs	r6, r6, r0
 8005c28:	e7ea      	b.n	8005c00 <__sflush_r+0xd4>
 8005c2a:	bf00      	nop
 8005c2c:	20400001 	.word	0x20400001

08005c30 <_fflush_r>:
 8005c30:	b538      	push	{r3, r4, r5, lr}
 8005c32:	690b      	ldr	r3, [r1, #16]
 8005c34:	4605      	mov	r5, r0
 8005c36:	460c      	mov	r4, r1
 8005c38:	b913      	cbnz	r3, 8005c40 <_fflush_r+0x10>
 8005c3a:	2500      	movs	r5, #0
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	bd38      	pop	{r3, r4, r5, pc}
 8005c40:	b118      	cbz	r0, 8005c4a <_fflush_r+0x1a>
 8005c42:	6983      	ldr	r3, [r0, #24]
 8005c44:	b90b      	cbnz	r3, 8005c4a <_fflush_r+0x1a>
 8005c46:	f000 f887 	bl	8005d58 <__sinit>
 8005c4a:	4b14      	ldr	r3, [pc, #80]	; (8005c9c <_fflush_r+0x6c>)
 8005c4c:	429c      	cmp	r4, r3
 8005c4e:	d11b      	bne.n	8005c88 <_fflush_r+0x58>
 8005c50:	686c      	ldr	r4, [r5, #4]
 8005c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d0ef      	beq.n	8005c3a <_fflush_r+0xa>
 8005c5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c5c:	07d0      	lsls	r0, r2, #31
 8005c5e:	d404      	bmi.n	8005c6a <_fflush_r+0x3a>
 8005c60:	0599      	lsls	r1, r3, #22
 8005c62:	d402      	bmi.n	8005c6a <_fflush_r+0x3a>
 8005c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c66:	f000 f915 	bl	8005e94 <__retarget_lock_acquire_recursive>
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	4621      	mov	r1, r4
 8005c6e:	f7ff ff5d 	bl	8005b2c <__sflush_r>
 8005c72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c74:	4605      	mov	r5, r0
 8005c76:	07da      	lsls	r2, r3, #31
 8005c78:	d4e0      	bmi.n	8005c3c <_fflush_r+0xc>
 8005c7a:	89a3      	ldrh	r3, [r4, #12]
 8005c7c:	059b      	lsls	r3, r3, #22
 8005c7e:	d4dd      	bmi.n	8005c3c <_fflush_r+0xc>
 8005c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c82:	f000 f908 	bl	8005e96 <__retarget_lock_release_recursive>
 8005c86:	e7d9      	b.n	8005c3c <_fflush_r+0xc>
 8005c88:	4b05      	ldr	r3, [pc, #20]	; (8005ca0 <_fflush_r+0x70>)
 8005c8a:	429c      	cmp	r4, r3
 8005c8c:	d101      	bne.n	8005c92 <_fflush_r+0x62>
 8005c8e:	68ac      	ldr	r4, [r5, #8]
 8005c90:	e7df      	b.n	8005c52 <_fflush_r+0x22>
 8005c92:	4b04      	ldr	r3, [pc, #16]	; (8005ca4 <_fflush_r+0x74>)
 8005c94:	429c      	cmp	r4, r3
 8005c96:	bf08      	it	eq
 8005c98:	68ec      	ldreq	r4, [r5, #12]
 8005c9a:	e7da      	b.n	8005c52 <_fflush_r+0x22>
 8005c9c:	08006434 	.word	0x08006434
 8005ca0:	08006454 	.word	0x08006454
 8005ca4:	08006414 	.word	0x08006414

08005ca8 <std>:
 8005ca8:	2300      	movs	r3, #0
 8005caa:	b510      	push	{r4, lr}
 8005cac:	4604      	mov	r4, r0
 8005cae:	e9c0 3300 	strd	r3, r3, [r0]
 8005cb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cb6:	6083      	str	r3, [r0, #8]
 8005cb8:	8181      	strh	r1, [r0, #12]
 8005cba:	6643      	str	r3, [r0, #100]	; 0x64
 8005cbc:	81c2      	strh	r2, [r0, #14]
 8005cbe:	6183      	str	r3, [r0, #24]
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	2208      	movs	r2, #8
 8005cc4:	305c      	adds	r0, #92	; 0x5c
 8005cc6:	f7ff f851 	bl	8004d6c <memset>
 8005cca:	4b05      	ldr	r3, [pc, #20]	; (8005ce0 <std+0x38>)
 8005ccc:	6224      	str	r4, [r4, #32]
 8005cce:	6263      	str	r3, [r4, #36]	; 0x24
 8005cd0:	4b04      	ldr	r3, [pc, #16]	; (8005ce4 <std+0x3c>)
 8005cd2:	62a3      	str	r3, [r4, #40]	; 0x28
 8005cd4:	4b04      	ldr	r3, [pc, #16]	; (8005ce8 <std+0x40>)
 8005cd6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005cd8:	4b04      	ldr	r3, [pc, #16]	; (8005cec <std+0x44>)
 8005cda:	6323      	str	r3, [r4, #48]	; 0x30
 8005cdc:	bd10      	pop	{r4, pc}
 8005cde:	bf00      	nop
 8005ce0:	080060b5 	.word	0x080060b5
 8005ce4:	080060d7 	.word	0x080060d7
 8005ce8:	0800610f 	.word	0x0800610f
 8005cec:	08006133 	.word	0x08006133

08005cf0 <_cleanup_r>:
 8005cf0:	4901      	ldr	r1, [pc, #4]	; (8005cf8 <_cleanup_r+0x8>)
 8005cf2:	f000 b8af 	b.w	8005e54 <_fwalk_reent>
 8005cf6:	bf00      	nop
 8005cf8:	08005c31 	.word	0x08005c31

08005cfc <__sfmoreglue>:
 8005cfc:	2268      	movs	r2, #104	; 0x68
 8005cfe:	b570      	push	{r4, r5, r6, lr}
 8005d00:	1e4d      	subs	r5, r1, #1
 8005d02:	4355      	muls	r5, r2
 8005d04:	460e      	mov	r6, r1
 8005d06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005d0a:	f7ff f979 	bl	8005000 <_malloc_r>
 8005d0e:	4604      	mov	r4, r0
 8005d10:	b140      	cbz	r0, 8005d24 <__sfmoreglue+0x28>
 8005d12:	2100      	movs	r1, #0
 8005d14:	e9c0 1600 	strd	r1, r6, [r0]
 8005d18:	300c      	adds	r0, #12
 8005d1a:	60a0      	str	r0, [r4, #8]
 8005d1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d20:	f7ff f824 	bl	8004d6c <memset>
 8005d24:	4620      	mov	r0, r4
 8005d26:	bd70      	pop	{r4, r5, r6, pc}

08005d28 <__sfp_lock_acquire>:
 8005d28:	4801      	ldr	r0, [pc, #4]	; (8005d30 <__sfp_lock_acquire+0x8>)
 8005d2a:	f000 b8b3 	b.w	8005e94 <__retarget_lock_acquire_recursive>
 8005d2e:	bf00      	nop
 8005d30:	20002321 	.word	0x20002321

08005d34 <__sfp_lock_release>:
 8005d34:	4801      	ldr	r0, [pc, #4]	; (8005d3c <__sfp_lock_release+0x8>)
 8005d36:	f000 b8ae 	b.w	8005e96 <__retarget_lock_release_recursive>
 8005d3a:	bf00      	nop
 8005d3c:	20002321 	.word	0x20002321

08005d40 <__sinit_lock_acquire>:
 8005d40:	4801      	ldr	r0, [pc, #4]	; (8005d48 <__sinit_lock_acquire+0x8>)
 8005d42:	f000 b8a7 	b.w	8005e94 <__retarget_lock_acquire_recursive>
 8005d46:	bf00      	nop
 8005d48:	20002322 	.word	0x20002322

08005d4c <__sinit_lock_release>:
 8005d4c:	4801      	ldr	r0, [pc, #4]	; (8005d54 <__sinit_lock_release+0x8>)
 8005d4e:	f000 b8a2 	b.w	8005e96 <__retarget_lock_release_recursive>
 8005d52:	bf00      	nop
 8005d54:	20002322 	.word	0x20002322

08005d58 <__sinit>:
 8005d58:	b510      	push	{r4, lr}
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	f7ff fff0 	bl	8005d40 <__sinit_lock_acquire>
 8005d60:	69a3      	ldr	r3, [r4, #24]
 8005d62:	b11b      	cbz	r3, 8005d6c <__sinit+0x14>
 8005d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d68:	f7ff bff0 	b.w	8005d4c <__sinit_lock_release>
 8005d6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005d70:	6523      	str	r3, [r4, #80]	; 0x50
 8005d72:	4b13      	ldr	r3, [pc, #76]	; (8005dc0 <__sinit+0x68>)
 8005d74:	4a13      	ldr	r2, [pc, #76]	; (8005dc4 <__sinit+0x6c>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	62a2      	str	r2, [r4, #40]	; 0x28
 8005d7a:	42a3      	cmp	r3, r4
 8005d7c:	bf08      	it	eq
 8005d7e:	2301      	moveq	r3, #1
 8005d80:	4620      	mov	r0, r4
 8005d82:	bf08      	it	eq
 8005d84:	61a3      	streq	r3, [r4, #24]
 8005d86:	f000 f81f 	bl	8005dc8 <__sfp>
 8005d8a:	6060      	str	r0, [r4, #4]
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	f000 f81b 	bl	8005dc8 <__sfp>
 8005d92:	60a0      	str	r0, [r4, #8]
 8005d94:	4620      	mov	r0, r4
 8005d96:	f000 f817 	bl	8005dc8 <__sfp>
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	2104      	movs	r1, #4
 8005d9e:	60e0      	str	r0, [r4, #12]
 8005da0:	6860      	ldr	r0, [r4, #4]
 8005da2:	f7ff ff81 	bl	8005ca8 <std>
 8005da6:	2201      	movs	r2, #1
 8005da8:	2109      	movs	r1, #9
 8005daa:	68a0      	ldr	r0, [r4, #8]
 8005dac:	f7ff ff7c 	bl	8005ca8 <std>
 8005db0:	2202      	movs	r2, #2
 8005db2:	2112      	movs	r1, #18
 8005db4:	68e0      	ldr	r0, [r4, #12]
 8005db6:	f7ff ff77 	bl	8005ca8 <std>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	61a3      	str	r3, [r4, #24]
 8005dbe:	e7d1      	b.n	8005d64 <__sinit+0xc>
 8005dc0:	0800632c 	.word	0x0800632c
 8005dc4:	08005cf1 	.word	0x08005cf1

08005dc8 <__sfp>:
 8005dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dca:	4607      	mov	r7, r0
 8005dcc:	f7ff ffac 	bl	8005d28 <__sfp_lock_acquire>
 8005dd0:	4b1e      	ldr	r3, [pc, #120]	; (8005e4c <__sfp+0x84>)
 8005dd2:	681e      	ldr	r6, [r3, #0]
 8005dd4:	69b3      	ldr	r3, [r6, #24]
 8005dd6:	b913      	cbnz	r3, 8005dde <__sfp+0x16>
 8005dd8:	4630      	mov	r0, r6
 8005dda:	f7ff ffbd 	bl	8005d58 <__sinit>
 8005dde:	3648      	adds	r6, #72	; 0x48
 8005de0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005de4:	3b01      	subs	r3, #1
 8005de6:	d503      	bpl.n	8005df0 <__sfp+0x28>
 8005de8:	6833      	ldr	r3, [r6, #0]
 8005dea:	b30b      	cbz	r3, 8005e30 <__sfp+0x68>
 8005dec:	6836      	ldr	r6, [r6, #0]
 8005dee:	e7f7      	b.n	8005de0 <__sfp+0x18>
 8005df0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005df4:	b9d5      	cbnz	r5, 8005e2c <__sfp+0x64>
 8005df6:	4b16      	ldr	r3, [pc, #88]	; (8005e50 <__sfp+0x88>)
 8005df8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005dfc:	60e3      	str	r3, [r4, #12]
 8005dfe:	6665      	str	r5, [r4, #100]	; 0x64
 8005e00:	f000 f847 	bl	8005e92 <__retarget_lock_init_recursive>
 8005e04:	f7ff ff96 	bl	8005d34 <__sfp_lock_release>
 8005e08:	2208      	movs	r2, #8
 8005e0a:	4629      	mov	r1, r5
 8005e0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005e10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005e14:	6025      	str	r5, [r4, #0]
 8005e16:	61a5      	str	r5, [r4, #24]
 8005e18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005e1c:	f7fe ffa6 	bl	8004d6c <memset>
 8005e20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005e24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005e28:	4620      	mov	r0, r4
 8005e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e2c:	3468      	adds	r4, #104	; 0x68
 8005e2e:	e7d9      	b.n	8005de4 <__sfp+0x1c>
 8005e30:	2104      	movs	r1, #4
 8005e32:	4638      	mov	r0, r7
 8005e34:	f7ff ff62 	bl	8005cfc <__sfmoreglue>
 8005e38:	4604      	mov	r4, r0
 8005e3a:	6030      	str	r0, [r6, #0]
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	d1d5      	bne.n	8005dec <__sfp+0x24>
 8005e40:	f7ff ff78 	bl	8005d34 <__sfp_lock_release>
 8005e44:	230c      	movs	r3, #12
 8005e46:	603b      	str	r3, [r7, #0]
 8005e48:	e7ee      	b.n	8005e28 <__sfp+0x60>
 8005e4a:	bf00      	nop
 8005e4c:	0800632c 	.word	0x0800632c
 8005e50:	ffff0001 	.word	0xffff0001

08005e54 <_fwalk_reent>:
 8005e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e58:	4606      	mov	r6, r0
 8005e5a:	4688      	mov	r8, r1
 8005e5c:	2700      	movs	r7, #0
 8005e5e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e66:	f1b9 0901 	subs.w	r9, r9, #1
 8005e6a:	d505      	bpl.n	8005e78 <_fwalk_reent+0x24>
 8005e6c:	6824      	ldr	r4, [r4, #0]
 8005e6e:	2c00      	cmp	r4, #0
 8005e70:	d1f7      	bne.n	8005e62 <_fwalk_reent+0xe>
 8005e72:	4638      	mov	r0, r7
 8005e74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e78:	89ab      	ldrh	r3, [r5, #12]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d907      	bls.n	8005e8e <_fwalk_reent+0x3a>
 8005e7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e82:	3301      	adds	r3, #1
 8005e84:	d003      	beq.n	8005e8e <_fwalk_reent+0x3a>
 8005e86:	4629      	mov	r1, r5
 8005e88:	4630      	mov	r0, r6
 8005e8a:	47c0      	blx	r8
 8005e8c:	4307      	orrs	r7, r0
 8005e8e:	3568      	adds	r5, #104	; 0x68
 8005e90:	e7e9      	b.n	8005e66 <_fwalk_reent+0x12>

08005e92 <__retarget_lock_init_recursive>:
 8005e92:	4770      	bx	lr

08005e94 <__retarget_lock_acquire_recursive>:
 8005e94:	4770      	bx	lr

08005e96 <__retarget_lock_release_recursive>:
 8005e96:	4770      	bx	lr

08005e98 <__swhatbuf_r>:
 8005e98:	b570      	push	{r4, r5, r6, lr}
 8005e9a:	460e      	mov	r6, r1
 8005e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ea0:	4614      	mov	r4, r2
 8005ea2:	2900      	cmp	r1, #0
 8005ea4:	461d      	mov	r5, r3
 8005ea6:	b096      	sub	sp, #88	; 0x58
 8005ea8:	da08      	bge.n	8005ebc <__swhatbuf_r+0x24>
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005eb0:	602a      	str	r2, [r5, #0]
 8005eb2:	061a      	lsls	r2, r3, #24
 8005eb4:	d410      	bmi.n	8005ed8 <__swhatbuf_r+0x40>
 8005eb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005eba:	e00e      	b.n	8005eda <__swhatbuf_r+0x42>
 8005ebc:	466a      	mov	r2, sp
 8005ebe:	f000 f95f 	bl	8006180 <_fstat_r>
 8005ec2:	2800      	cmp	r0, #0
 8005ec4:	dbf1      	blt.n	8005eaa <__swhatbuf_r+0x12>
 8005ec6:	9a01      	ldr	r2, [sp, #4]
 8005ec8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ecc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ed0:	425a      	negs	r2, r3
 8005ed2:	415a      	adcs	r2, r3
 8005ed4:	602a      	str	r2, [r5, #0]
 8005ed6:	e7ee      	b.n	8005eb6 <__swhatbuf_r+0x1e>
 8005ed8:	2340      	movs	r3, #64	; 0x40
 8005eda:	2000      	movs	r0, #0
 8005edc:	6023      	str	r3, [r4, #0]
 8005ede:	b016      	add	sp, #88	; 0x58
 8005ee0:	bd70      	pop	{r4, r5, r6, pc}
	...

08005ee4 <__smakebuf_r>:
 8005ee4:	898b      	ldrh	r3, [r1, #12]
 8005ee6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ee8:	079d      	lsls	r5, r3, #30
 8005eea:	4606      	mov	r6, r0
 8005eec:	460c      	mov	r4, r1
 8005eee:	d507      	bpl.n	8005f00 <__smakebuf_r+0x1c>
 8005ef0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ef4:	6023      	str	r3, [r4, #0]
 8005ef6:	6123      	str	r3, [r4, #16]
 8005ef8:	2301      	movs	r3, #1
 8005efa:	6163      	str	r3, [r4, #20]
 8005efc:	b002      	add	sp, #8
 8005efe:	bd70      	pop	{r4, r5, r6, pc}
 8005f00:	466a      	mov	r2, sp
 8005f02:	ab01      	add	r3, sp, #4
 8005f04:	f7ff ffc8 	bl	8005e98 <__swhatbuf_r>
 8005f08:	9900      	ldr	r1, [sp, #0]
 8005f0a:	4605      	mov	r5, r0
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	f7ff f877 	bl	8005000 <_malloc_r>
 8005f12:	b948      	cbnz	r0, 8005f28 <__smakebuf_r+0x44>
 8005f14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f18:	059a      	lsls	r2, r3, #22
 8005f1a:	d4ef      	bmi.n	8005efc <__smakebuf_r+0x18>
 8005f1c:	f023 0303 	bic.w	r3, r3, #3
 8005f20:	f043 0302 	orr.w	r3, r3, #2
 8005f24:	81a3      	strh	r3, [r4, #12]
 8005f26:	e7e3      	b.n	8005ef0 <__smakebuf_r+0xc>
 8005f28:	4b0d      	ldr	r3, [pc, #52]	; (8005f60 <__smakebuf_r+0x7c>)
 8005f2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f2c:	89a3      	ldrh	r3, [r4, #12]
 8005f2e:	6020      	str	r0, [r4, #0]
 8005f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f34:	81a3      	strh	r3, [r4, #12]
 8005f36:	9b00      	ldr	r3, [sp, #0]
 8005f38:	6120      	str	r0, [r4, #16]
 8005f3a:	6163      	str	r3, [r4, #20]
 8005f3c:	9b01      	ldr	r3, [sp, #4]
 8005f3e:	b15b      	cbz	r3, 8005f58 <__smakebuf_r+0x74>
 8005f40:	4630      	mov	r0, r6
 8005f42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f46:	f000 f92d 	bl	80061a4 <_isatty_r>
 8005f4a:	b128      	cbz	r0, 8005f58 <__smakebuf_r+0x74>
 8005f4c:	89a3      	ldrh	r3, [r4, #12]
 8005f4e:	f023 0303 	bic.w	r3, r3, #3
 8005f52:	f043 0301 	orr.w	r3, r3, #1
 8005f56:	81a3      	strh	r3, [r4, #12]
 8005f58:	89a0      	ldrh	r0, [r4, #12]
 8005f5a:	4305      	orrs	r5, r0
 8005f5c:	81a5      	strh	r5, [r4, #12]
 8005f5e:	e7cd      	b.n	8005efc <__smakebuf_r+0x18>
 8005f60:	08005cf1 	.word	0x08005cf1

08005f64 <memchr>:
 8005f64:	4603      	mov	r3, r0
 8005f66:	b510      	push	{r4, lr}
 8005f68:	b2c9      	uxtb	r1, r1
 8005f6a:	4402      	add	r2, r0
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	4618      	mov	r0, r3
 8005f70:	d101      	bne.n	8005f76 <memchr+0x12>
 8005f72:	2000      	movs	r0, #0
 8005f74:	e003      	b.n	8005f7e <memchr+0x1a>
 8005f76:	7804      	ldrb	r4, [r0, #0]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	428c      	cmp	r4, r1
 8005f7c:	d1f6      	bne.n	8005f6c <memchr+0x8>
 8005f7e:	bd10      	pop	{r4, pc}

08005f80 <memmove>:
 8005f80:	4288      	cmp	r0, r1
 8005f82:	b510      	push	{r4, lr}
 8005f84:	eb01 0402 	add.w	r4, r1, r2
 8005f88:	d902      	bls.n	8005f90 <memmove+0x10>
 8005f8a:	4284      	cmp	r4, r0
 8005f8c:	4623      	mov	r3, r4
 8005f8e:	d807      	bhi.n	8005fa0 <memmove+0x20>
 8005f90:	1e43      	subs	r3, r0, #1
 8005f92:	42a1      	cmp	r1, r4
 8005f94:	d008      	beq.n	8005fa8 <memmove+0x28>
 8005f96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f9e:	e7f8      	b.n	8005f92 <memmove+0x12>
 8005fa0:	4601      	mov	r1, r0
 8005fa2:	4402      	add	r2, r0
 8005fa4:	428a      	cmp	r2, r1
 8005fa6:	d100      	bne.n	8005faa <memmove+0x2a>
 8005fa8:	bd10      	pop	{r4, pc}
 8005faa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fb2:	e7f7      	b.n	8005fa4 <memmove+0x24>

08005fb4 <__malloc_lock>:
 8005fb4:	4801      	ldr	r0, [pc, #4]	; (8005fbc <__malloc_lock+0x8>)
 8005fb6:	f7ff bf6d 	b.w	8005e94 <__retarget_lock_acquire_recursive>
 8005fba:	bf00      	nop
 8005fbc:	20002320 	.word	0x20002320

08005fc0 <__malloc_unlock>:
 8005fc0:	4801      	ldr	r0, [pc, #4]	; (8005fc8 <__malloc_unlock+0x8>)
 8005fc2:	f7ff bf68 	b.w	8005e96 <__retarget_lock_release_recursive>
 8005fc6:	bf00      	nop
 8005fc8:	20002320 	.word	0x20002320

08005fcc <_realloc_r>:
 8005fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fd0:	4680      	mov	r8, r0
 8005fd2:	4614      	mov	r4, r2
 8005fd4:	460e      	mov	r6, r1
 8005fd6:	b921      	cbnz	r1, 8005fe2 <_realloc_r+0x16>
 8005fd8:	4611      	mov	r1, r2
 8005fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fde:	f7ff b80f 	b.w	8005000 <_malloc_r>
 8005fe2:	b92a      	cbnz	r2, 8005ff0 <_realloc_r+0x24>
 8005fe4:	f7fe ffa4 	bl	8004f30 <_free_r>
 8005fe8:	4625      	mov	r5, r4
 8005fea:	4628      	mov	r0, r5
 8005fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ff0:	f000 f8fa 	bl	80061e8 <_malloc_usable_size_r>
 8005ff4:	4284      	cmp	r4, r0
 8005ff6:	4607      	mov	r7, r0
 8005ff8:	d802      	bhi.n	8006000 <_realloc_r+0x34>
 8005ffa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005ffe:	d812      	bhi.n	8006026 <_realloc_r+0x5a>
 8006000:	4621      	mov	r1, r4
 8006002:	4640      	mov	r0, r8
 8006004:	f7fe fffc 	bl	8005000 <_malloc_r>
 8006008:	4605      	mov	r5, r0
 800600a:	2800      	cmp	r0, #0
 800600c:	d0ed      	beq.n	8005fea <_realloc_r+0x1e>
 800600e:	42bc      	cmp	r4, r7
 8006010:	4622      	mov	r2, r4
 8006012:	4631      	mov	r1, r6
 8006014:	bf28      	it	cs
 8006016:	463a      	movcs	r2, r7
 8006018:	f7fe fe9a 	bl	8004d50 <memcpy>
 800601c:	4631      	mov	r1, r6
 800601e:	4640      	mov	r0, r8
 8006020:	f7fe ff86 	bl	8004f30 <_free_r>
 8006024:	e7e1      	b.n	8005fea <_realloc_r+0x1e>
 8006026:	4635      	mov	r5, r6
 8006028:	e7df      	b.n	8005fea <_realloc_r+0x1e>

0800602a <_raise_r>:
 800602a:	291f      	cmp	r1, #31
 800602c:	b538      	push	{r3, r4, r5, lr}
 800602e:	4604      	mov	r4, r0
 8006030:	460d      	mov	r5, r1
 8006032:	d904      	bls.n	800603e <_raise_r+0x14>
 8006034:	2316      	movs	r3, #22
 8006036:	6003      	str	r3, [r0, #0]
 8006038:	f04f 30ff 	mov.w	r0, #4294967295
 800603c:	bd38      	pop	{r3, r4, r5, pc}
 800603e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006040:	b112      	cbz	r2, 8006048 <_raise_r+0x1e>
 8006042:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006046:	b94b      	cbnz	r3, 800605c <_raise_r+0x32>
 8006048:	4620      	mov	r0, r4
 800604a:	f000 f831 	bl	80060b0 <_getpid_r>
 800604e:	462a      	mov	r2, r5
 8006050:	4601      	mov	r1, r0
 8006052:	4620      	mov	r0, r4
 8006054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006058:	f000 b818 	b.w	800608c <_kill_r>
 800605c:	2b01      	cmp	r3, #1
 800605e:	d00a      	beq.n	8006076 <_raise_r+0x4c>
 8006060:	1c59      	adds	r1, r3, #1
 8006062:	d103      	bne.n	800606c <_raise_r+0x42>
 8006064:	2316      	movs	r3, #22
 8006066:	6003      	str	r3, [r0, #0]
 8006068:	2001      	movs	r0, #1
 800606a:	e7e7      	b.n	800603c <_raise_r+0x12>
 800606c:	2400      	movs	r4, #0
 800606e:	4628      	mov	r0, r5
 8006070:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006074:	4798      	blx	r3
 8006076:	2000      	movs	r0, #0
 8006078:	e7e0      	b.n	800603c <_raise_r+0x12>
	...

0800607c <raise>:
 800607c:	4b02      	ldr	r3, [pc, #8]	; (8006088 <raise+0xc>)
 800607e:	4601      	mov	r1, r0
 8006080:	6818      	ldr	r0, [r3, #0]
 8006082:	f7ff bfd2 	b.w	800602a <_raise_r>
 8006086:	bf00      	nop
 8006088:	2000000c 	.word	0x2000000c

0800608c <_kill_r>:
 800608c:	b538      	push	{r3, r4, r5, lr}
 800608e:	2300      	movs	r3, #0
 8006090:	4d06      	ldr	r5, [pc, #24]	; (80060ac <_kill_r+0x20>)
 8006092:	4604      	mov	r4, r0
 8006094:	4608      	mov	r0, r1
 8006096:	4611      	mov	r1, r2
 8006098:	602b      	str	r3, [r5, #0]
 800609a:	f7fa ff82 	bl	8000fa2 <_kill>
 800609e:	1c43      	adds	r3, r0, #1
 80060a0:	d102      	bne.n	80060a8 <_kill_r+0x1c>
 80060a2:	682b      	ldr	r3, [r5, #0]
 80060a4:	b103      	cbz	r3, 80060a8 <_kill_r+0x1c>
 80060a6:	6023      	str	r3, [r4, #0]
 80060a8:	bd38      	pop	{r3, r4, r5, pc}
 80060aa:	bf00      	nop
 80060ac:	20002324 	.word	0x20002324

080060b0 <_getpid_r>:
 80060b0:	f7fa bf70 	b.w	8000f94 <_getpid>

080060b4 <__sread>:
 80060b4:	b510      	push	{r4, lr}
 80060b6:	460c      	mov	r4, r1
 80060b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060bc:	f000 f89c 	bl	80061f8 <_read_r>
 80060c0:	2800      	cmp	r0, #0
 80060c2:	bfab      	itete	ge
 80060c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80060c6:	89a3      	ldrhlt	r3, [r4, #12]
 80060c8:	181b      	addge	r3, r3, r0
 80060ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80060ce:	bfac      	ite	ge
 80060d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80060d2:	81a3      	strhlt	r3, [r4, #12]
 80060d4:	bd10      	pop	{r4, pc}

080060d6 <__swrite>:
 80060d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060da:	461f      	mov	r7, r3
 80060dc:	898b      	ldrh	r3, [r1, #12]
 80060de:	4605      	mov	r5, r0
 80060e0:	05db      	lsls	r3, r3, #23
 80060e2:	460c      	mov	r4, r1
 80060e4:	4616      	mov	r6, r2
 80060e6:	d505      	bpl.n	80060f4 <__swrite+0x1e>
 80060e8:	2302      	movs	r3, #2
 80060ea:	2200      	movs	r2, #0
 80060ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060f0:	f000 f868 	bl	80061c4 <_lseek_r>
 80060f4:	89a3      	ldrh	r3, [r4, #12]
 80060f6:	4632      	mov	r2, r6
 80060f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060fc:	81a3      	strh	r3, [r4, #12]
 80060fe:	4628      	mov	r0, r5
 8006100:	463b      	mov	r3, r7
 8006102:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800610a:	f000 b817 	b.w	800613c <_write_r>

0800610e <__sseek>:
 800610e:	b510      	push	{r4, lr}
 8006110:	460c      	mov	r4, r1
 8006112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006116:	f000 f855 	bl	80061c4 <_lseek_r>
 800611a:	1c43      	adds	r3, r0, #1
 800611c:	89a3      	ldrh	r3, [r4, #12]
 800611e:	bf15      	itete	ne
 8006120:	6560      	strne	r0, [r4, #84]	; 0x54
 8006122:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006126:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800612a:	81a3      	strheq	r3, [r4, #12]
 800612c:	bf18      	it	ne
 800612e:	81a3      	strhne	r3, [r4, #12]
 8006130:	bd10      	pop	{r4, pc}

08006132 <__sclose>:
 8006132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006136:	f000 b813 	b.w	8006160 <_close_r>
	...

0800613c <_write_r>:
 800613c:	b538      	push	{r3, r4, r5, lr}
 800613e:	4604      	mov	r4, r0
 8006140:	4608      	mov	r0, r1
 8006142:	4611      	mov	r1, r2
 8006144:	2200      	movs	r2, #0
 8006146:	4d05      	ldr	r5, [pc, #20]	; (800615c <_write_r+0x20>)
 8006148:	602a      	str	r2, [r5, #0]
 800614a:	461a      	mov	r2, r3
 800614c:	f7fa ff60 	bl	8001010 <_write>
 8006150:	1c43      	adds	r3, r0, #1
 8006152:	d102      	bne.n	800615a <_write_r+0x1e>
 8006154:	682b      	ldr	r3, [r5, #0]
 8006156:	b103      	cbz	r3, 800615a <_write_r+0x1e>
 8006158:	6023      	str	r3, [r4, #0]
 800615a:	bd38      	pop	{r3, r4, r5, pc}
 800615c:	20002324 	.word	0x20002324

08006160 <_close_r>:
 8006160:	b538      	push	{r3, r4, r5, lr}
 8006162:	2300      	movs	r3, #0
 8006164:	4d05      	ldr	r5, [pc, #20]	; (800617c <_close_r+0x1c>)
 8006166:	4604      	mov	r4, r0
 8006168:	4608      	mov	r0, r1
 800616a:	602b      	str	r3, [r5, #0]
 800616c:	f7fa ff6c 	bl	8001048 <_close>
 8006170:	1c43      	adds	r3, r0, #1
 8006172:	d102      	bne.n	800617a <_close_r+0x1a>
 8006174:	682b      	ldr	r3, [r5, #0]
 8006176:	b103      	cbz	r3, 800617a <_close_r+0x1a>
 8006178:	6023      	str	r3, [r4, #0]
 800617a:	bd38      	pop	{r3, r4, r5, pc}
 800617c:	20002324 	.word	0x20002324

08006180 <_fstat_r>:
 8006180:	b538      	push	{r3, r4, r5, lr}
 8006182:	2300      	movs	r3, #0
 8006184:	4d06      	ldr	r5, [pc, #24]	; (80061a0 <_fstat_r+0x20>)
 8006186:	4604      	mov	r4, r0
 8006188:	4608      	mov	r0, r1
 800618a:	4611      	mov	r1, r2
 800618c:	602b      	str	r3, [r5, #0]
 800618e:	f7fa ff66 	bl	800105e <_fstat>
 8006192:	1c43      	adds	r3, r0, #1
 8006194:	d102      	bne.n	800619c <_fstat_r+0x1c>
 8006196:	682b      	ldr	r3, [r5, #0]
 8006198:	b103      	cbz	r3, 800619c <_fstat_r+0x1c>
 800619a:	6023      	str	r3, [r4, #0]
 800619c:	bd38      	pop	{r3, r4, r5, pc}
 800619e:	bf00      	nop
 80061a0:	20002324 	.word	0x20002324

080061a4 <_isatty_r>:
 80061a4:	b538      	push	{r3, r4, r5, lr}
 80061a6:	2300      	movs	r3, #0
 80061a8:	4d05      	ldr	r5, [pc, #20]	; (80061c0 <_isatty_r+0x1c>)
 80061aa:	4604      	mov	r4, r0
 80061ac:	4608      	mov	r0, r1
 80061ae:	602b      	str	r3, [r5, #0]
 80061b0:	f7fa ff64 	bl	800107c <_isatty>
 80061b4:	1c43      	adds	r3, r0, #1
 80061b6:	d102      	bne.n	80061be <_isatty_r+0x1a>
 80061b8:	682b      	ldr	r3, [r5, #0]
 80061ba:	b103      	cbz	r3, 80061be <_isatty_r+0x1a>
 80061bc:	6023      	str	r3, [r4, #0]
 80061be:	bd38      	pop	{r3, r4, r5, pc}
 80061c0:	20002324 	.word	0x20002324

080061c4 <_lseek_r>:
 80061c4:	b538      	push	{r3, r4, r5, lr}
 80061c6:	4604      	mov	r4, r0
 80061c8:	4608      	mov	r0, r1
 80061ca:	4611      	mov	r1, r2
 80061cc:	2200      	movs	r2, #0
 80061ce:	4d05      	ldr	r5, [pc, #20]	; (80061e4 <_lseek_r+0x20>)
 80061d0:	602a      	str	r2, [r5, #0]
 80061d2:	461a      	mov	r2, r3
 80061d4:	f7fa ff5c 	bl	8001090 <_lseek>
 80061d8:	1c43      	adds	r3, r0, #1
 80061da:	d102      	bne.n	80061e2 <_lseek_r+0x1e>
 80061dc:	682b      	ldr	r3, [r5, #0]
 80061de:	b103      	cbz	r3, 80061e2 <_lseek_r+0x1e>
 80061e0:	6023      	str	r3, [r4, #0]
 80061e2:	bd38      	pop	{r3, r4, r5, pc}
 80061e4:	20002324 	.word	0x20002324

080061e8 <_malloc_usable_size_r>:
 80061e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061ec:	1f18      	subs	r0, r3, #4
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	bfbc      	itt	lt
 80061f2:	580b      	ldrlt	r3, [r1, r0]
 80061f4:	18c0      	addlt	r0, r0, r3
 80061f6:	4770      	bx	lr

080061f8 <_read_r>:
 80061f8:	b538      	push	{r3, r4, r5, lr}
 80061fa:	4604      	mov	r4, r0
 80061fc:	4608      	mov	r0, r1
 80061fe:	4611      	mov	r1, r2
 8006200:	2200      	movs	r2, #0
 8006202:	4d05      	ldr	r5, [pc, #20]	; (8006218 <_read_r+0x20>)
 8006204:	602a      	str	r2, [r5, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	f7fa fee5 	bl	8000fd6 <_read>
 800620c:	1c43      	adds	r3, r0, #1
 800620e:	d102      	bne.n	8006216 <_read_r+0x1e>
 8006210:	682b      	ldr	r3, [r5, #0]
 8006212:	b103      	cbz	r3, 8006216 <_read_r+0x1e>
 8006214:	6023      	str	r3, [r4, #0]
 8006216:	bd38      	pop	{r3, r4, r5, pc}
 8006218:	20002324 	.word	0x20002324

0800621c <_init>:
 800621c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621e:	bf00      	nop
 8006220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006222:	bc08      	pop	{r3}
 8006224:	469e      	mov	lr, r3
 8006226:	4770      	bx	lr

08006228 <_fini>:
 8006228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800622a:	bf00      	nop
 800622c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800622e:	bc08      	pop	{r3}
 8006230:	469e      	mov	lr, r3
 8006232:	4770      	bx	lr
